name: CI Template job

on:
  workflow_call:
    inputs:
      reason:
        description: |
          Reason why this workflow was called. Could be "buildpulse" for
          flaky tests detection or "daily-test" for scheduled full builds,
          "CI" for normal pushes/PRs
        type: string
        required: false
        default: CI
      ubuntuRunner:
        description: Override default runner used for linux tests. Can be used to opt-out of buildjet
        type: string
        default: buildjet-4vcpu-ubuntu-2004
        required: false
      jobTimeout:
        description: Timeout for the jobs. Default is 35 minutes
        type: number
        default: 35
        required: false
      jobsToRun:
        description: Jobs to run. See .github/workflows/scripts/detect-jobs-to-run.js script
        type: string
        default: '-all-'
        required: false
      queryEngine:
        description: List of query engines to run tests on as JSON array
        type: string
        default: '["library", "binary"]'
      pnpmVersion:
        description: pnpm package manager version
        type: string
        default: '8'
    secrets:
      BUILDPULSE_ACCESS_KEY_ID:
        required: false
      BUILDPULSE_SECRET_ACCESS_KEY:
        required: false
      # Docker Hub credentials must be passed to avoid rate limiting when using Buildjet runners
      # But they are not required, so forks can run the workflow without defining them
      DOCKERHUB_USERNAME:
        required: false
      DOCKERHUB_TOKEN:
        required: false
      BOT_TOKEN:
        required: false

env:
  HAS_BUILDPULSE_SECRETS: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID != '' && secrets.BUILDPULSE_SECRET_ACCESS_KEY != '' }}
  PRISMA_TELEMETRY_INFORMATION: 'prisma test.yml'
  # To hide "Update available 0.0.0 -> x.x.x"
  PRISMA_HIDE_UPDATE_MESSAGE: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # Don't cancel if called from buildpulse workflow
  cancel-in-progress: ${{ inputs.reason != 'buildpulse' }}

jobs:
  #
  # Linting
  #
  lint:
    name: Lint
    timeout-minutes: 7
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: false

      # https://github.com/actions/toolkit/blob/master/docs/commands.md#problem-matchers
      # Matchers are added in setup-node
      # https://github.com/actions/setup-node/blob/bacd6b4b3ac3127b28a1e1920c23bf1c2cadbb85/src/main.ts#L54-L60
      - name: Disable GitHub annotations from linting
        run: |
          echo "::remove-matcher owner=eslint-compact::"
          echo "::remove-matcher owner=eslint-stylish::"

      - name: Run eslint
        run: pnpm run lint
        working-directory: ./

      - name: Run prettier-check
        run: pnpm run prettier-check
        working-directory: ./

      - name: Run check-engines-override
        run: pnpm run check-engines-override
        working-directory: ./

  #
  # CLIENT (functional and legacy tests without types test)
  #
  client:
    name: Client func/legacy-notypes
    timeout-minutes: ${{ inputs.jobTimeout }}
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        shard: ['1/5', '2/5', '3/5', '4/5', '5/5']
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        node: [16, 18, 20]

    env:
      NODE_OPTIONS: '--max-old-space-size=8096'
      JEST_JUNIT_SUITE_NAME: 'client/functional'
      JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        # Login to Docker Hub is only needed for buildjet runners
        if: "${{ startsWith(inputs.ubuntuRunner, 'buildjet') && env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set CLI Engine Type
        run: |
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set Client Engine Type
        run: |
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres postgres_isolated mysql mysql_isolated mssql mongo cockroachdb vitess-8

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          # Fails if set to true
          skip-tsc: false

      # Run the functional test suite
      - run: pnpm run test:functional --silent --shard ${{ matrix.shard }}
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}
        working-directory: packages/client
      # And run  all the other tests (except the types tests)
      - run: pnpm run test-notypes --silent --shard ${{ matrix.shard }}
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}
        working-directory: packages/client

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }},${{ matrix.queryEngine }}
          name: client-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason == 'buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}

  #
  # CLIENT (functional tests with mini-proxy)
  #
  client-miniproxy:
    name: Client (func/mini-proxy)
    timeout-minutes: ${{ inputs.jobTimeout }}
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        shard: ['1/6', '2/6', '3/6', '4/6', '5/6', '6/6']
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mssql mongo cockroachdb vitess-8

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          # Fails if set to true
          skip-tsc: false

      - run: pnpm run test:functional --data-proxy --shard ${{ matrix.shard }}
        working-directory: packages/client
        env:
          NODE_OPTIONS: '--max-old-space-size=8096'
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - run: pnpm run test:functional --data-proxy --edge-client --shard ${{ matrix.shard }}
        working-directory: packages/client
        env:
          NODE_OPTIONS: '--max-old-space-size=8096'
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }},dataproxy
          name: client-${{ matrix.os }}-dataproxy

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason == 'buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}

  #
  # CLIENT (functional tests with driver adapters)
  #
  client-driveradapters:
    name: Client (func/adapters)
    timeout-minutes: ${{ inputs.jobTimeout }}
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        flavor: ['js_pg', 'js_neon', 'js_libsql', 'js_planetscale']
        shard: ['1/6', '2/6', '3/6', '4/6', '5/6', '6/6']
        node: [20] #[16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres neon_wsproxy planetscale_proxy

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: false

      - run: pnpm run test:functional --flavor ${{ matrix.flavor }} --shard ${{ matrix.shard }} --runInBand
        working-directory: packages/client
        env:
          PRISMA_DISABLE_QUAINT_EXECUTORS: true, # ensures quaint runs no queries
          NODE_NO_WARNINGS: 1 # hides undici websocket warnings
          NODE_OPTIONS: '--max-old-space-size=8096'
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }},driveradapters
          name: client-${{ matrix.os }}-driveradapters

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason == 'buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}

  #
  # CLIENT (memory tests)
  #
  client-memory:
    name: Client (memory tests)
    timeout-minutes: ${{ inputs.jobTimeout }}
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        queryEngine: ['library'] # TODO: binary engine is leaking at the moment
        node: [16, 18, 20]
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres # mysql mysql_isolated mssql mongo cockroachdb

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test:memory
        working-directory: packages/client

      - uses: actions/github-script@v6
        if: ${{ failure() && github.event_name == 'pull_request' }}
        id: upload-report
        env:
          NODE_VERSION: ${{ matrix.node }}
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const fs = require('fs')
            const nodeVersion = process.env.NODE_VERSION
            const reportPath = `client-memory-test/${context.issue.number}/${context.sha}.${nodeVersion}.html`
            const url = `https://prisma.github.io/ci-reports/${reportPath}`
            const localReport = './packages/client/tests/memory/memory-report.html'
            if (fs.existsSync(localReport)) {
              await github.rest.repos.createOrUpdateFileContents({
                owner: 'prisma',
                repo: 'ci-reports',
                branch: 'gh-pages',
                path: reportPath,
                message: `Add memory results for PR ${context.issue.number}`,
                content: fs.readFileSync(localReport, 'base64'),
              });
              core.setOutput('url', url);
            }

      - name: Find report comment
        uses: peter-evans/find-comment@v2
        id: fc
        if: ${{ always() && github.event_name == 'pull_request' }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'Client memory tests, node ${{ matrix.node}}, ${{ matrix.queryEngine }}:'

      - name: Create or update remote comment (failure)
        uses: peter-evans/create-or-update-comment@v3
        if: ${{ failure() && steps.upload-report.outputs.url }}
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Client memory tests, node ${{ matrix.node}}, ${{ matrix.queryEngine }}:

            ❌ Failure, [see report](${{ steps.upload-report.outputs.url }}).
          edit-mode: replace

      - name: Create or update remote comment (success)
        uses: peter-evans/create-or-update-comment@v3
        if: ${{ success() && steps.fc.outputs.comment-id != '' }}
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Client memory tests, node ${{ matrix.node}}, ${{ matrix.queryEngine }}:

            ✅ Success
          edit-mode: replace

  #
  # CLIENT test:e2e
  #
  client-e2e:
    name: Client (test:e2e)
    timeout-minutes: 35
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16]

    steps:
      - uses: actions/checkout@v4

      # Not currently needed, but we might need it in the future
      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mssql mongo cockroachdb vitess-8

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          # Fails if set to true
          skip-tsc: false

      - run: pnpm run test:e2e --skipBuild --verbose --runInBand
        working-directory: packages/client
        env:
          NODE_OPTIONS: '--max-old-space-size=8096'

  #
  # CLIENT test:functional:code --relation-mode-tests-only for `relationMode-in-separate-gh-action` tests
  #
  client-relationMode:
    name: Client (func/relationMode)
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        relationMode: ['', 'foreignKeys', 'prisma']
        os: [ubuntu-latest]
        node: [16]

    env:
      NODE_OPTIONS: '--max-old-space-size=8096'
      JEST_JUNIT_SUITE_NAME: 'client/functional'
      JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

    steps:
      - uses: actions/checkout@v4

      - name: Set RELATION_MODE custom test env var
        run: |
          echo "RELATION_MODE=${{ matrix.relationMode }}"
          if [ ! -z "${{ matrix.relationMode }}" ]; then echo "RELATION_MODE=${{ matrix.relationMode }}" >> $GITHUB_ENV; fi

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mssql mongo cockroachdb vitess-8

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      # shouldn't take more than 15 minutes
      - name: 1 to 1
        run: pnpm run test:functional:code --silent --relation-mode-tests-only relationMode-in-separate-gh-action/tests_1-to-1.ts
        working-directory: packages/client

      # shouldn't take more than 15 minutes
      - name: 1 to n
        run: pnpm run test:functional:code --silent --relation-mode-tests-only relationMode-in-separate-gh-action/tests_1-to-n.ts
        working-directory: packages/client

      # shouldn't take more than 15 minutes
      - name: m to n (SQL databases)
        run: pnpm run test:functional:code --silent --relation-mode-tests-only relationMode-in-separate-gh-action/tests_m-to-n.ts
        working-directory: packages/client

      - name: m to n (MongoDB)
        run: pnpm run test:functional:code --silent --relation-mode-tests-only relationMode-in-separate-gh-action/tests_m-to-n-MongoDB.ts
        working-directory: packages/client

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason == 'buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}

  #
  # CLIENT (legacy types tests only)
  #
  client-legacy-types:
    name: Client (legacy types)
    timeout-minutes: 15
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        node: [16]

    steps:
      - uses: actions/checkout@v4

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          # Fails if set to true
          skip-tsc: false

      - run: pnpm run test src/__tests__/types/types.test.ts
        working-directory: packages/client

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client-legacy-types,${{ matrix.os }},library,binary
          name: client-legacy-types-${{ matrix.os }}

  #
  # WORKSPACE-TYPES
  #
  workspace-types:
    name: Workspace types
    timeout-minutes: 15
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        node: [16]

    steps:
      - uses: actions/checkout@v4

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm tsc -p tsconfig.utils.typecheck.json

  #
  # INTEGRATION-TESTS
  #
  integration-tests:
    name: Integration tests
    timeout-minutes: 20
    runs-on: ubuntu-latest

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-integration-tests-') }}

    strategy:
      fail-fast: false
      matrix:
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        node: [16]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set CLI Engine Type
        run: |
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set Client Engine Type
        run: |
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mariadb mssql

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test
        working-directory: packages/integration-tests

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/integration-tests/src/__tests__/coverage/clover.xml
          flags: integration-tests,${{ matrix.node }},${{ matrix.queryEngine }}
          name: integration-tests-${{ matrix.node }}-${{ matrix.queryEngine }}

  #
  # `@prisma/internals`
  #
  internals:
    name: '@prisma/internals'
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-internals-') }}

    strategy:
      fail-fast: false
      matrix:
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        os: [ubuntu-latest]
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mssql

      - name: Set CLI Engine Type
        run: |
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set Client Engine Type
        run: |
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test
        working-directory: packages/internals

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/internals/src/__tests__/coverage/clover.xml
          flags: internals,${{ matrix.os }},${{ matrix.queryEngine }}
          name: internals-${{ matrix.os }}-${{ matrix.queryEngine }}

  #
  # MIGRATE
  #
  migrate:
    name: Migrate
    timeout-minutes: 15
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-migrate-') }}

    strategy:
      fail-fast: false
      matrix:
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        os: [ubuntu-latest]
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres mysql mssql mongodb_migrate mongodb_migrate_seed cockroachdb

      - name: Set CLI Engine Type
        run: |
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set Client Engine Type
        run: |
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test
        working-directory: packages/migrate

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/migrate/src/__tests__/coverage/clover.xml
          flags: migrate,${{ matrix.os }},${{ matrix.queryEngine }}
          name: migrate-${{ matrix.os }}-${{ matrix.queryEngine }}

  #
  # CLI-COMMANDS
  #
  cli-commands:
    name: CLI commands
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-cli-') }}

    strategy:
      fail-fast: false
      matrix:
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        os: [ubuntu-latest]
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        if: "${{ env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != '' }}"
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Docker Compose Services
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_wait_seconds: 120
          command: docker compose -f docker/docker-compose.yml up --wait --detach postgres

      - name: Set CLI Engine Type
        run: |
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set Client Engine Type
        run: |
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test
        working-directory: packages/cli

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/cli/src/__tests__/coverage/clover.xml
          flags: cli,${{ matrix.os }},${{ matrix.queryEngine }}
          name: cli-${{ matrix.os }}-${{ matrix.queryEngine }}

  #
  # All the other packages!
  #
  others:
    name: Others
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}

    if: ${{ contains(inputs.jobsToRun, '-all-') }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        node: [16, 18, 20]

    steps:
      - uses: actions/checkout@v4

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - run: pnpm run test
        name: 'debug'
        working-directory: packages/debug

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/debug/src/__tests__/coverage/clover.xml
          flags: debug,${{ matrix.os }},library,binary
          name: debug-${{ matrix.os }}

      - run: pnpm run test
        name: 'generator-helper'
        working-directory: packages/generator-helper

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/generator-helper/src/__tests__/coverage/clover.xml
          flags: generator-helper,${{ matrix.os }},library,binary
          name: generator-helper-${{ matrix.os }}

      - run: pnpm run test
        name: 'get-platform'
        working-directory: packages/get-platform

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/get-platform/src/__tests__/coverage/clover.xml
          flags: get-platform,${{ matrix.os }},library,binary
          name: get-platform-${{ matrix.os }}

      - run: pnpm run test
        name: 'fetch-engine'
        working-directory: packages/fetch-engine

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/fetch-engine/src/__tests__/coverage/clover.xml
          flags: fetch-engine,${{ matrix.os }},library,binary
          name: fetch-engine-${{ matrix.os }}

      - run: pnpm run test
        name: 'engines'
        working-directory: packages/engines

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/engines/src/__tests__/coverage/clover.xml
          flags: engines,${{ matrix.os }},library,binary
          name: engines-${{ matrix.os }}

      - run: pnpm run test
        name: 'instrumentation'
        working-directory: packages/instrumentation

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/instrumentation/src/__tests__/coverage/clover.xml
          flags: instrumentation,${{ matrix.os }},library,binary
          name: instrumentation-${{ matrix.os }}

  #
  # Run all tests on macOS and Windows.
  #
  # Unlike the other jobs, this job doesn't use Docker (and thus skips some
  # tests that require dependencies not easily installable without Docker).
  #
  # It also runs most tests for different packages sequentially
  # to prevent the combinatorial explosion of the number of parallel jobs,
  # to minimize the number of times we need to install MySQL using the package manager
  # (PostgreSQL and MongoDB are provided by GitHub Actions out of the box), and
  # minimize the time spent waiting for a free runner.
  #
  no-docker-client-functional:
    name: Client (func/win+mac)
    timeout-minutes: 40
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        node: [16]
        queryEngine: ${{ fromJson(inputs.queryEngine) }}
        shard: ['1/2', '2/2']

    if: |
      ${{
        contains(inputs.jobsToRun, '-all-') ||
        contains(inputs.jobsToRun, '-client-')
      }}
    steps:
      - uses: actions/checkout@v4

      - name: Prerequisites
        shell: bash
        run: |
          echo "TEST_SKIP_MSSQL=true" >> $GITHUB_ENV
          echo "TEST_SKIP_MONGODB=true" >> $GITHUB_ENV
          echo "TEST_SKIP_COCKROACHDB=true" >> $GITHUB_ENV
          echo "TEST_SKIP_VITESS=true" >> $GITHUB_ENV
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set up PostgreSQL
        run: bash .github/workflows/scripts/setup-postgres.sh

      - name: Set up MySQL
        run: bash .github/workflows/scripts/setup-mysql.sh

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          skip-tsc: true

      - name: Test packages/client
        run: pnpm run test:functional:code --silent --shard ${{matrix.shard}}
        working-directory: packages/client
        env:
          # allow Node.js to allocate at most 14GB of heap on macOS and 7GB on Windows
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
          NODE_OPTIONS: "${{ matrix.os == 'macos-13' && '--max-old-space-size=14336' || '--max-old-space-size=7168' }}"
          JEST_JUNIT_SUITE_NAME: 'client/functional'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }},${{ matrix.queryEngine }}
          name: client-functional-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason =='buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}

  no-docker:
    name: All pkgs (win+mac)
    timeout-minutes: 40
    runs-on: ${{ matrix.os }}

    if: |
      ${{
        contains(inputs.jobsToRun, '-all-') ||
        contains(inputs.jobsToRun, '-internals-') ||
        contains(inputs.jobsToRun, '-migrate-') ||
        contains(inputs.jobsToRun, '-cli-') ||
        contains(inputs.jobsToRun, '-client-')
      }}

    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, windows-latest]
        node: [16]
        queryEngine: ${{ fromJson(inputs.queryEngine) }}

    steps:
      - uses: actions/checkout@v4

      - name: Prerequisites
        shell: bash
        run: |
          echo "TEST_SKIP_MSSQL=true" >> $GITHUB_ENV
          echo "TEST_SKIP_MONGODB=true" >> $GITHUB_ENV
          echo "TEST_SKIP_COCKROACHDB=true" >> $GITHUB_ENV
          echo "PRISMA_CLI_QUERY_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV
          echo "PRISMA_CLIENT_ENGINE_TYPE=${{ matrix.queryEngine }}" >> $GITHUB_ENV

      - name: Set up PostgreSQL
        run: bash .github/workflows/scripts/setup-postgres.sh

      - name: Set up MySQL
        run: bash .github/workflows/scripts/setup-mysql.sh

      - name: Install & build
        uses: ./.github/actions/setup
        with:
          node-version: ${{ matrix.node }}
          pnpm-version: ${{ inputs.pnpmVersion }}
          # Fails if set to true
          skip-tsc: false

      - name: Test packages/internals
        if: ${{ contains(inputs.jobsToRun, '-all-') }} || contains(inputs.jobsToRun, '-internals-') }}
        run: pnpm run test --testTimeout=40000
        working-directory: packages/internals
        env:
          JEST_JUNIT_SUITE_NAME: 'internals'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }} || contains(inputs.jobsToRun, '-internals-') }}
        with:
          files: ./packages/internals/src/__tests__/coverage/clover.xml
          flags: internals,${{ matrix.os }},${{ matrix.queryEngine }}
          name: internals-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Test packages/client (old suite)
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}
        run: pnpm run test-notypes --silent --testTimeout=40000
        working-directory: packages/client
        env:
          # Allow Node.js to allocate at most a certain amount heap on macOS and a different amount on Windows
          # Note that this value should be lower than the total amount of RAM available
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
          NODE_OPTIONS: "${{ matrix.os == 'macos-13' && '--max-old-space-size=14336' || '--max-old-space-size=3072' }}"
          JEST_JUNIT_SUITE_NAME: 'client/old'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-client-') }}
        with:
          files: ./packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }},${{ matrix.queryEngine }}
          name: client-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Test packages/migrate
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-migrate-') }}
        run: pnpm run test --testTimeout=40000
        working-directory: packages/migrate
        env:
          JEST_JUNIT_SUITE_NAME: 'migrate'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-migrate-') }}
        with:
          files: ./packages/migrate/src/__tests__/coverage/clover.xml
          flags: migrate,${{ matrix.os }},${{ matrix.queryEngine }}
          name: migrate-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Test packages/cli
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-cli-') }}
        run: pnpm run test --testTimeout=40000
        working-directory: packages/cli
        env:
          JEST_JUNIT_SUITE_NAME: 'cli'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') || contains(inputs.jobsToRun, '-cli-') }}
        with:
          files: ./packages/cli/src/__tests__/coverage/clover.xml
          flags: cli,${{ matrix.os }},${{ matrix.queryEngine }}
          name: cli-${{ matrix.os }}-${{ matrix.queryEngine }}

      - name: Test packages/debug
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        run: pnpm run test
        working-directory: packages/debug
        env:
          JEST_JUNIT_SUITE_NAME: 'debug'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        with:
          files: ./packages/debug/src/__tests__/coverage/clover.xml
          flags: debug,${{ matrix.os }},library,binary
          name: debug-${{ matrix.os }}

      - name: Test packages/generator-helper
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        run: pnpm run test
        working-directory: packages/generator-helper
        env:
          JEST_JUNIT_SUITE_NAME: 'generator-helper'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        with:
          files: ./packages/generator-helper/src/__tests__/coverage/clover.xml
          flags: generator-helper,${{ matrix.os }},library,binary
          name: generator-helper-${{ matrix.os }}

      - name: Test packages/get-platform
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        run: pnpm run test
        working-directory: packages/get-platform
        env:
          JEST_JUNIT_SUITE_NAME: 'get-platform'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        with:
          files: ./packages/get-platform/src/__tests__/coverage/clover.xml
          flags: get-platform,${{ matrix.os }},library,binary
          name: get-platform-${{ matrix.os }}

      - name: Test packages/fetch-engine
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        run: pnpm run test
        working-directory: packages/fetch-engine
        env:
          JEST_JUNIT_SUITE_NAME: 'fetch-engine'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        with:
          files: ./packages/fetch-engine/src/__tests__/coverage/clover.xml
          flags: fetch-engine,${{ matrix.os }},library,binary
          name: fetch-engine-${{ matrix.os }}

      - name: Test packages/engines
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        run: pnpm run test
        working-directory: packages/engines
        env:
          JEST_JUNIT_SUITE_NAME: 'engines'
          JEST_JUNIT_UNIQUE_OUTPUT_NAME: true

      - uses: codecov/codecov-action@v3
        if: ${{ contains(inputs.jobsToRun, '-all-') }}
        with:
          files: ./packages/engines/src/__tests__/coverage/clover.xml
          flags: engines,${{ matrix.os }},library,binary
          name: engines-${{ matrix.os }}

      - name: Upload test results to BuildPulse for flaky test detection
        # Only run this step for branches where we have access to secrets.
        # Run this step even when the tests fail. Skip if the workflow is cancelled.
        if: env.HAS_BUILDPULSE_SECRETS == 'true' && !cancelled() && inputs.reason == 'buildpulse'
        uses: buildpulse/buildpulse-action@v0.11.0
        with:
          account: 17219288
          repository: 192925833
          path: packages/*/junit*.xml
          key: ${{ secrets.BUILDPULSE_ACCESS_KEY_ID }}
          secret: ${{ secrets.BUILDPULSE_SECRET_ACCESS_KEY }}
