name: Update Engines Version
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to check and update the engines version'
        required: true

jobs:
  update_engines:
    name: 'Check and update @prisma/engines@${{ github.event.inputs.version }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: pnpm/action-setup@v2.2.0
        with:
          version: latest

      - uses: actions/setup-node@v2
        with:
          cache: 'pnpm'
          node-version: '16'

      # This step uses `@prisma/ensure-npm-release` (abbv. `enr`) https://github.com/prisma/ensure-npm-release
      - name: Check if version is available on npm
        run: |
          echo 'Checking that all packages [@prisma/engines, @prisma/engines-version, @prisma/fetch-engine, @prisma/get-platform] have the published version @${{ github.event.inputs.version }}'
          pnpx -y -p @prisma/ensure-npm-release enr update -p @prisma/engines -u ${{ github.event.inputs.version }}
          pnpx -y -p @prisma/ensure-npm-release enr update -p @prisma/engines-version -u ${{ github.event.inputs.version }}
          pnpx -y -p @prisma/ensure-npm-release enr update -p @prisma/fetch-engine -u ${{ github.event.inputs.version }}
          pnpx -y -p @prisma/ensure-npm-release enr update -p @prisma/get-platform -u ${{ github.event.inputs.version }}
          echo 'Awesome - proceeding to update the dependencies'

      - name: Update the engines dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 7
          max_attempts: 3
          command: |
            echo 'Updating @prisma/engines, @prisma/engines-version, @prisma/fetch-engine and @prisma/get-platform to ${{ github.event.inputs.version }} using pnpm'
            pnpm update -r @prisma/engines@${{ github.event.inputs.version }} @prisma/engines-version@${{ github.event.inputs.version }} @prisma/fetch-engine@${{ github.event.inputs.version }} @prisma/get-platform@${{ github.event.inputs.version }}
            echo 'Awesome - proceeding to make the PR'

      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3
        with:
          token: ${{ secrets.BOT_TOKEN }}
          commit-message: 'chore(deps): update engines to ${{ github.event.inputs.version }}'
          committer: 'Prismo <prismabots@gmail.com>'
          author: 'Prismo <prismabots@gmail.com>'
          branch: deps/engines-${{ github.event.inputs.version }}
          delete-branch: true
          labels: automerge
          title: 'chore(deps): update engines to ${{ github.event.inputs.version }}'
          body: |
            This automatic PR updates the engines to version `${{  github.event.inputs.version }}`. This will get automatically merged if all the tests pass.
            ## Packages:
            | Package | NPM URL |
            |---------|---------|
            |`@prisma/engines`| https://npmjs.com/package/@prisma/engines/v/${{ github.event.inputs.version }}|
            |`@prisma/engines-version`| https://npmjs.com/package/@prisma/engines-version/v/${{  github.event.inputs.version }}|
            |`@prisma/fetch-engine`| https://npmjs.com/package/@prisma/fetch-engine/v/${{  github.event.inputs.version }}|
            |`@prisma/get-platform`| https://npmjs.com/package/@prisma/get-platform/v/${{  github.event.inputs.version }}|

      - name: PR url
        run: |
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Sleep for 5 seconds
        run: sleep 5s
        shell: bash

      - name: Auto approve Pull Request (to trigger automerge if tests passing)
        if: steps.cpr.outputs.pull-request-operation == 'created'
        uses: juliangruber/approve-pull-request-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.cpr.outputs.pull-request-number }}

      - name: 'Set current job url in SLACK_FOOTER env var'
        if: ${{ failure() }}
        run: echo "SLACK_FOOTER=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Click here to go to the job logs>" >> $GITHUB_ENV

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_TITLE: 'Update Engines Version failed :x:'
          SLACK_COLOR: '#FF0000'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: feed-prisma-failures
          SLACK_USERNAME: Prismo
          SLACK_ICON_EMOJI: ':boom:'
          SLACK_MSG_AUTHOR: prisma-bot
