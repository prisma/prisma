name: CI

# Run on push only for master, if not it will trigger push & pull_request on PRs at the same time
on:
  push:
    branches:
      - master
    paths-ignore:
      # Any update here needs to be done for
      # - `pull_request` see below
      # - https://github.com/prisma/prisma/blob/master/src/.buildkite/test/buildkite-entry.sh
      # - https://github.com/prisma/prisma/blob/master/src/.buildkite/publish/buildkite-entry.sh
      - '*.md'
      - '.vscode/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
      - 'examples/**'
      - 'LICENSE'
      - '.github/CODEOWNERS'
      - 'src/.buildkite/**'
      - 'src/.dockerignore'
      - '*.bench.ts'
      - 'src/scripts/ci/publish.ts'
      - 'src/graphs/**'
  pull_request:
    paths-ignore:
      # Any update here needs to be done for
      # - `push`see before
      # - https://github.com/prisma/prisma/blob/master/src/.buildkite/test/buildkite-entry.sh
      # - https://github.com/prisma/prisma/blob/master/src/.buildkite/publish/buildkite-entry.sh
      - '*.md'
      - '.vscode/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docs/**'
      - 'examples/**'
      - 'LICENSE'
      - '.github/CODEOWNERS'
      - 'src/.buildkite/**'
      - 'src/.dockerignore'
      - '*.bench.ts'
      - 'src/scripts/ci/publish.ts'
      - 'src/graphs/**'

env:
  PRISMA_TELEMETRY_INFORMATION: 'prisma test.yml'

jobs:
  detect_jobs_to_run:
    name: Detect jobs to run
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.detect.outputs.jobs }}
    steps:
      - id: checkout
        uses: actions/checkout@v2        
      - id: files
        uses: Ana06/get-changed-files@v1.2 # it's a fork of jitterbit/get-changed-files@v1 which works better with pull requests
        with:
          format: 'json'
      - id: detect
        run: ./.github/workflows/detect-jobs-to-run.js <<<'${{ steps.files.outputs.all }}'

  # From https://github.com/marketplace/actions/skip-duplicate-actions
  # This action cleans up previously running instances of a workflow on the same branch.
  # This accomplishes the task of automatically cancelling CI runs on pushes to the same branch,
  # which is a common feature in most CI systems but currently not possible with GitHub actions.
  cleanup-runs:
    continue-on-error: true
    runs-on: ubuntu-20.04
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master' && !contains(github.actor, 'renovate')"
    steps:
      - uses: fkirc/skip-duplicate-actions@v3.4.0

  #
  # Linting
  #
  lint:
    timeout-minutes: 7
    runs-on: ubuntu-20.04
    # Ignore if renovate (dependency update)
    if: "!contains(github.actor, 'renovate')"
    
    steps:
      - uses: actions/checkout@v2

      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: '12'

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run lint
        working-directory: ./


  #
  # CLIENT (without types test)
  #
  client:
    timeout-minutes: 20
    runs-on: ${{ matrix.os }}

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') || contains(needs.detect_jobs_to_run.outputs.jobs, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        engine: ['napi', 'binary']
        os: [ubuntu-20.04] # macos-latest, windows-latest
        node: [12]

    steps:
      - uses: actions/checkout@v2

      - name: Set Engine Type
        if: ${{ matrix.engine == 'napi' }}
        run: |
          echo "PRISMA_FORCE_NAPI=true" >> $GITHUB_ENV

      - run: docker-compose -f src/docker/docker-compose.yml up --detach postgres postgres_isolated mysql mysql_isolated mssql
      
      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run test -- --testPathIgnorePatterns src/__tests__/types/types.test.ts --verbose
        working-directory: src/packages/client
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}
          TEST_POSTGRES_URI: postgres://prisma:prisma@localhost:5432/tests
          TEST_POSTGRES_ISOLATED_URI: postgres://prisma:prisma@localhost:5435/tests
          TEST_MYSQL_URI: mysql://root:root@localhost:3306/tests
          TEST_MYSQL_ISOLATED_URI: mysql://root:root@localhost:3307/tests
          TEST_MSSQL_URI: mssql://SA:Pr1sm4_Pr1sm4@localhost:1433/master
          TEST_MSSQL_JDBC_URI: sqlserver://localhost:1433;database=master;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;encrypt=DANGER_PLAINTEXT

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/client/src/__tests__/coverage/clover.xml
          flags: client,${{ matrix.os }}
          name: client-${{ matrix.os }}

  #
  # CLIENT (types tests only)
  #
  client-types:
    timeout-minutes: 10
    runs-on: ubuntu-20.04

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') || contains(needs.detect_jobs_to_run.outputs.jobs, '-client-') }}

    strategy:
      fail-fast: false
      matrix:
        node: [12]

    steps:
      - uses: actions/checkout@v2

      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run test src/__tests__/types/types.test.ts
        working-directory: src/packages/client
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/client/src/__tests__/coverage/clover.xml
          flags: client-types,${{ matrix.os }}
          name: client-types-${{ matrix.os }}

  #
  # INTEGRATION-TESTS
  #
  integration-tests:
    timeout-minutes: 20
    runs-on: ubuntu-20.04

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') || contains(needs.detect_jobs_to_run.outputs.jobs, '-integration-tests-') }}

    strategy:
      fail-fast: false
      matrix:
        engine: ['napi', 'binary']
        database:
          - sqlite
          - postgres
          - mysql
          - mariadb
          - mssql
        node: [12]

    steps:
      - uses: actions/checkout@v2

      - name: Set Engine Type
        if: ${{ matrix.engine == 'napi' }}
        run: |
          echo "PRISMA_FORCE_NAPI=true" >> $GITHUB_ENV

      - run: docker-compose -f src/docker/docker-compose.yml up --detach ${{matrix.database}}
        if: matrix.database != 'sqlite'
      
      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm i sqlite3@5.0.2 --unsafe-perm --reporter=silent
        if: ${{ matrix.database == 'sqlite' }}
        working-directory: src/packages/integration-tests

      # temp
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - run: pnpm run jest integration/${{ matrix.database }} -- --maxConcurrency=8
        working-directory: src/packages/integration-tests
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}
          TEST_POSTGRES_BASE_URI: postgres://prisma:prisma@localhost:5432
          TEST_MYSQL_BASE_URI: mysql://root:root@localhost:3306
          TEST_MARIADB_BASE_URI: mysql://root:root@localhost:4306
          TEST_POSTGRES_URI: postgres://prisma:prisma@localhost:5432/tests
          TEST_MYSQL_URI: mysql://root:root@localhost:3306/tests
          TEST_MARIADB_URI: mysql://root:root@localhost:4306/tests
          TEST_MSSQL_URI: mssql://SA:Pr1sm4_Pr1sm4@localhost:1433/master

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/integration-tests/src/__tests__/coverage/clover.xml
          flags: integration-tests,${{ matrix.database }},${{ matrix.engine }}
          name: integration-tests-${{ matrix.database }}-${{ matrix.engine }}

  #
  # SDK
  #
  sdk:
    timeout-minutes: 5
    runs-on: ${{ matrix.os }}

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') }}

    strategy:
      fail-fast: false
      matrix:
        engine: ['napi', 'binary']
        os: [ubuntu-20.04] # macos-latest, windows-latest
        node: [12]

    steps:
      - uses: actions/checkout@v2
      
      - name: Set Engine Type
        if: ${{ matrix.engine == 'napi' }}
        run: |
          echo "PRISMA_FORCE_NAPI=true" >> $GITHUB_ENV
      
      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run test
        working-directory: src/packages/sdk
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/sdk/src/__tests__/coverage/clover.xml
          flags: sdk,${{ matrix.os }}
          name: sdk-${{ matrix.os }}

  #
  # MIGRATE
  #
  migrate:
    timeout-minutes: 7
    runs-on: ${{ matrix.os }}

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') || contains(needs.detect_jobs_to_run.outputs.jobs, '-migrate-') }}

    strategy:
      fail-fast: false
      matrix:
        engine: ['napi', 'binary']
        os: [ubuntu-20.04] # macos-latest, windows-latest
        node: [12]

    steps:
      - uses: actions/checkout@v2

      - run: docker-compose -f src/docker/docker-compose.yml up --detach postgres mysql mssql
      
      - name: Set Engine Type
        if: ${{ matrix.engine == 'napi' }}
        run: |
          echo "PRISMA_FORCE_NAPI=true" >> $GITHUB_ENV

      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm i sqlite3@5.0.2 --unsafe-perm --reporter=silent
        working-directory: src/packages/cli

      - run: pnpm run test
        working-directory: src/packages/migrate
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}
          TEST_POSTGRES_URI: postgres://prisma:prisma@localhost:5432/tests
          TEST_POSTGRES_URI_MIGRATE: postgres://prisma:prisma@localhost:5432/tests-migrate
          TEST_POSTGRES_SHADOWDB_URI_MIGRATE: postgres://prisma:prisma@localhost:5432/tests-migrate-shadowdb
          TEST_MYSQL_URI: mysql://root:root@localhost:3306/tests
          TEST_MYSQL_URI_MIGRATE: mysql://root:root@localhost:3306/tests-migrate
          TEST_MYSQL_SHADOWDB_URI_MIGRATE: mysql://root:root@localhost:3306/tests-migrate-shadowdb
          TEST_MSSQL_URI: mssql://SA:Pr1sm4_Pr1sm4@localhost:1433/master
          TEST_MSSQL_JDBC_URI_MIGRATE: "sqlserver://localhost:1433;database=tests-migrate;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;encrypt=DANGER_PLAINTEXT"
          TEST_MSSQL_SHADOWDB_JDBC_URI_MIGRATE: "sqlserver://localhost:1433;database=tests-migrate-shadowdb;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;encrypt=DANGER_PLAINTEXT"

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/migrate/src/__tests__/coverage/clover.xml
          flags: migrate,${{ matrix.os }}
          name: migrate-${{ matrix.os }}

  #
  # CLI-COMMANDS
  #
  cli-commands:
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') || contains(needs.detect_jobs_to_run.outputs.jobs, '-cli-') }}

    strategy:
      fail-fast: false
      matrix:
        engine: ['napi', 'binary']
        os: [ubuntu-20.04] # macos-latest, windows-latest
        node: [12]

    steps:
      - uses: actions/checkout@v2
      
      - name: Set Engine Type
        if: ${{ matrix.engine == 'napi' }}
        run: |
          echo "PRISMA_FORCE_NAPI=true" >> $GITHUB_ENV

      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run test
        working-directory: src/packages/cli
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/cli/src/__tests__/coverage/clover.xml
          flags: cli,${{ matrix.os }}
          name: cli-${{ matrix.os }}

  #
  # All the other packages!
  #
  others:
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}

    needs: detect_jobs_to_run
    if: ${{ contains(needs.detect_jobs_to_run.outputs.jobs, '-all-') }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04] # macos-latest, windows-latest
        node: [12]

    steps:
      - uses: actions/checkout@v2

      - name: Cache .pnpm-store # From https://pnpm.io/continuous-integration
        uses: actions/cache@v1
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node${{ matrix.node }}-${{ hashFiles('**/pnpm-lock.yaml') }}

      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}

      - run: bash .github/workflows/setup.sh
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - run: pnpm run test
        name: 'debug'
        working-directory: src/packages/debug
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/debug/src/__tests__/coverage/clover.xml
          flags: debug,${{ matrix.os }}
          name: debug-${{ matrix.os }}

      - run: pnpm run test
        name: 'engine-core'
        working-directory: src/packages/engine-core
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/engine-core/src/__tests__/coverage/clover.xml
          flags: engine-core,${{ matrix.os }}
          name: engine-core-${{ matrix.os }}

      - run: pnpm run test
        name: 'generator-helper'
        working-directory: src/packages/generator-helper
        env:
          CI: true
          SKIP_GIT: true
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - uses: codecov/codecov-action@v1
        with:
          files: ./src/packages/generator-helper/src/__tests__/coverage/clover.xml
          flags: generator-helper,${{ matrix.os }}
          name: generator-helper-${{ matrix.os }}
