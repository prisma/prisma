
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `TrackingEvent` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model TrackingEvent
 * 
 */
export type TrackingEventModel = runtime.Types.Result.DefaultSelection<Prisma.$TrackingEventPayload>

export type AggregateTrackingEvent = {
  _count: TrackingEventCountAggregateOutputType | null
  _min: TrackingEventMinAggregateOutputType | null
  _max: TrackingEventMaxAggregateOutputType | null
}

export type TrackingEventMinAggregateOutputType = {
  id: string | null
  timestamp: Date | null
  userId: string | null
  type: string | null
  variant: string | null
}

export type TrackingEventMaxAggregateOutputType = {
  id: string | null
  timestamp: Date | null
  userId: string | null
  type: string | null
  variant: string | null
}

export type TrackingEventCountAggregateOutputType = {
  id: number
  timestamp: number
  userId: number
  type: number
  variant: number
  _all: number
}


export type TrackingEventMinAggregateInputType = {
  id?: true
  timestamp?: true
  userId?: true
  type?: true
  variant?: true
}

export type TrackingEventMaxAggregateInputType = {
  id?: true
  timestamp?: true
  userId?: true
  type?: true
  variant?: true
}

export type TrackingEventCountAggregateInputType = {
  id?: true
  timestamp?: true
  userId?: true
  type?: true
  variant?: true
  _all?: true
}

export type TrackingEventAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TrackingEvent to aggregate.
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TrackingEvents to fetch.
   */
  orderBy?: Prisma.TrackingEventOrderByWithRelationInput | Prisma.TrackingEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TrackingEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TrackingEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TrackingEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TrackingEvents
  **/
  _count?: true | TrackingEventCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TrackingEventMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TrackingEventMaxAggregateInputType
}

export type GetTrackingEventAggregateType<T extends TrackingEventAggregateArgs> = {
      [P in keyof T & keyof AggregateTrackingEvent]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTrackingEvent[P]>
    : Prisma.GetScalarType<T[P], AggregateTrackingEvent[P]>
}




export type TrackingEventGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TrackingEventWhereInput
  orderBy?: Prisma.TrackingEventOrderByWithAggregationInput | Prisma.TrackingEventOrderByWithAggregationInput[]
  by: Prisma.TrackingEventScalarFieldEnum[] | Prisma.TrackingEventScalarFieldEnum
  having?: Prisma.TrackingEventScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TrackingEventCountAggregateInputType | true
  _min?: TrackingEventMinAggregateInputType
  _max?: TrackingEventMaxAggregateInputType
}

export type TrackingEventGroupByOutputType = {
  id: string
  timestamp: Date
  userId: string
  type: string
  variant: string
  _count: TrackingEventCountAggregateOutputType | null
  _min: TrackingEventMinAggregateOutputType | null
  _max: TrackingEventMaxAggregateOutputType | null
}

type GetTrackingEventGroupByPayload<T extends TrackingEventGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TrackingEventGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TrackingEventGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TrackingEventGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TrackingEventGroupByOutputType[P]>
      }
    >
  >



export type TrackingEventWhereInput = {
  AND?: Prisma.TrackingEventWhereInput | Prisma.TrackingEventWhereInput[]
  OR?: Prisma.TrackingEventWhereInput[]
  NOT?: Prisma.TrackingEventWhereInput | Prisma.TrackingEventWhereInput[]
  id?: Prisma.StringFilter<"TrackingEvent"> | string
  timestamp?: Prisma.DateTimeFilter<"TrackingEvent"> | Date | string
  userId?: Prisma.StringFilter<"TrackingEvent"> | string
  type?: Prisma.StringFilter<"TrackingEvent"> | string
  variant?: Prisma.StringFilter<"TrackingEvent"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type TrackingEventOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  variant?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type TrackingEventWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.TrackingEventWhereInput | Prisma.TrackingEventWhereInput[]
  OR?: Prisma.TrackingEventWhereInput[]
  NOT?: Prisma.TrackingEventWhereInput | Prisma.TrackingEventWhereInput[]
  timestamp?: Prisma.DateTimeFilter<"TrackingEvent"> | Date | string
  userId?: Prisma.StringFilter<"TrackingEvent"> | string
  type?: Prisma.StringFilter<"TrackingEvent"> | string
  variant?: Prisma.StringFilter<"TrackingEvent"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type TrackingEventOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  variant?: Prisma.SortOrder
  _count?: Prisma.TrackingEventCountOrderByAggregateInput
  _max?: Prisma.TrackingEventMaxOrderByAggregateInput
  _min?: Prisma.TrackingEventMinOrderByAggregateInput
}

export type TrackingEventScalarWhereWithAggregatesInput = {
  AND?: Prisma.TrackingEventScalarWhereWithAggregatesInput | Prisma.TrackingEventScalarWhereWithAggregatesInput[]
  OR?: Prisma.TrackingEventScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TrackingEventScalarWhereWithAggregatesInput | Prisma.TrackingEventScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"TrackingEvent"> | string
  timestamp?: Prisma.DateTimeWithAggregatesFilter<"TrackingEvent"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"TrackingEvent"> | string
  type?: Prisma.StringWithAggregatesFilter<"TrackingEvent"> | string
  variant?: Prisma.StringWithAggregatesFilter<"TrackingEvent"> | string
}

export type TrackingEventCreateInput = {
  id?: string
  timestamp?: Date | string
  type: string
  variant: string
  user: Prisma.UserCreateNestedOneWithoutTrackingEventsInput
}

export type TrackingEventUncheckedCreateInput = {
  id?: string
  timestamp?: Date | string
  userId: string
  type: string
  variant: string
}

export type TrackingEventUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
  user?: Prisma.UserUpdateOneRequiredWithoutTrackingEventsNestedInput
}

export type TrackingEventUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TrackingEventCreateManyInput = {
  id?: string
  timestamp?: Date | string
  userId: string
  type: string
  variant: string
}

export type TrackingEventUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TrackingEventUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TrackingEventListRelationFilter = {
  every?: Prisma.TrackingEventWhereInput
  some?: Prisma.TrackingEventWhereInput
  none?: Prisma.TrackingEventWhereInput
}

export type TrackingEventOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TrackingEventCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  variant?: Prisma.SortOrder
}

export type TrackingEventMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  variant?: Prisma.SortOrder
}

export type TrackingEventMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  timestamp?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  variant?: Prisma.SortOrder
}

export type TrackingEventCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput> | Prisma.TrackingEventCreateWithoutUserInput[] | Prisma.TrackingEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TrackingEventCreateOrConnectWithoutUserInput | Prisma.TrackingEventCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TrackingEventCreateManyUserInputEnvelope
  connect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
}

export type TrackingEventUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput> | Prisma.TrackingEventCreateWithoutUserInput[] | Prisma.TrackingEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TrackingEventCreateOrConnectWithoutUserInput | Prisma.TrackingEventCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.TrackingEventCreateManyUserInputEnvelope
  connect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
}

export type TrackingEventUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput> | Prisma.TrackingEventCreateWithoutUserInput[] | Prisma.TrackingEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TrackingEventCreateOrConnectWithoutUserInput | Prisma.TrackingEventCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TrackingEventUpsertWithWhereUniqueWithoutUserInput | Prisma.TrackingEventUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TrackingEventCreateManyUserInputEnvelope
  set?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  disconnect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  delete?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  connect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  update?: Prisma.TrackingEventUpdateWithWhereUniqueWithoutUserInput | Prisma.TrackingEventUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TrackingEventUpdateManyWithWhereWithoutUserInput | Prisma.TrackingEventUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TrackingEventScalarWhereInput | Prisma.TrackingEventScalarWhereInput[]
}

export type TrackingEventUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput> | Prisma.TrackingEventCreateWithoutUserInput[] | Prisma.TrackingEventUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.TrackingEventCreateOrConnectWithoutUserInput | Prisma.TrackingEventCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.TrackingEventUpsertWithWhereUniqueWithoutUserInput | Prisma.TrackingEventUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.TrackingEventCreateManyUserInputEnvelope
  set?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  disconnect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  delete?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  connect?: Prisma.TrackingEventWhereUniqueInput | Prisma.TrackingEventWhereUniqueInput[]
  update?: Prisma.TrackingEventUpdateWithWhereUniqueWithoutUserInput | Prisma.TrackingEventUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.TrackingEventUpdateManyWithWhereWithoutUserInput | Prisma.TrackingEventUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.TrackingEventScalarWhereInput | Prisma.TrackingEventScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type TrackingEventCreateWithoutUserInput = {
  id?: string
  timestamp?: Date | string
  type: string
  variant: string
}

export type TrackingEventUncheckedCreateWithoutUserInput = {
  id?: string
  timestamp?: Date | string
  type: string
  variant: string
}

export type TrackingEventCreateOrConnectWithoutUserInput = {
  where: Prisma.TrackingEventWhereUniqueInput
  create: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput>
}

export type TrackingEventCreateManyUserInputEnvelope = {
  data: Prisma.TrackingEventCreateManyUserInput | Prisma.TrackingEventCreateManyUserInput[]
}

export type TrackingEventUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.TrackingEventWhereUniqueInput
  update: Prisma.XOR<Prisma.TrackingEventUpdateWithoutUserInput, Prisma.TrackingEventUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.TrackingEventCreateWithoutUserInput, Prisma.TrackingEventUncheckedCreateWithoutUserInput>
}

export type TrackingEventUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.TrackingEventWhereUniqueInput
  data: Prisma.XOR<Prisma.TrackingEventUpdateWithoutUserInput, Prisma.TrackingEventUncheckedUpdateWithoutUserInput>
}

export type TrackingEventUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.TrackingEventScalarWhereInput
  data: Prisma.XOR<Prisma.TrackingEventUpdateManyMutationInput, Prisma.TrackingEventUncheckedUpdateManyWithoutUserInput>
}

export type TrackingEventScalarWhereInput = {
  AND?: Prisma.TrackingEventScalarWhereInput | Prisma.TrackingEventScalarWhereInput[]
  OR?: Prisma.TrackingEventScalarWhereInput[]
  NOT?: Prisma.TrackingEventScalarWhereInput | Prisma.TrackingEventScalarWhereInput[]
  id?: Prisma.StringFilter<"TrackingEvent"> | string
  timestamp?: Prisma.DateTimeFilter<"TrackingEvent"> | Date | string
  userId?: Prisma.StringFilter<"TrackingEvent"> | string
  type?: Prisma.StringFilter<"TrackingEvent"> | string
  variant?: Prisma.StringFilter<"TrackingEvent"> | string
}

export type TrackingEventCreateManyUserInput = {
  id?: string
  timestamp?: Date | string
  type: string
  variant: string
}

export type TrackingEventUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TrackingEventUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}

export type TrackingEventUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  timestamp?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  variant?: Prisma.StringFieldUpdateOperationsInput | string
}



export type TrackingEventSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  userId?: boolean
  type?: boolean
  variant?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trackingEvent"]>

export type TrackingEventSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  userId?: boolean
  type?: boolean
  variant?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trackingEvent"]>

export type TrackingEventSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  timestamp?: boolean
  userId?: boolean
  type?: boolean
  variant?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["trackingEvent"]>

export type TrackingEventSelectScalar = {
  id?: boolean
  timestamp?: boolean
  userId?: boolean
  type?: boolean
  variant?: boolean
}

export type TrackingEventOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "timestamp" | "userId" | "type" | "variant", ExtArgs["result"]["trackingEvent"]>
export type TrackingEventInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TrackingEventIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type TrackingEventIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $TrackingEventPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TrackingEvent"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    timestamp: Date
    userId: string
    type: string
    variant: string
  }, ExtArgs["result"]["trackingEvent"]>
  composites: {}
}

export type TrackingEventGetPayload<S extends boolean | null | undefined | TrackingEventDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload, S>

export type TrackingEventCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TrackingEventFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TrackingEventCountAggregateInputType | true
  }

export interface TrackingEventDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TrackingEvent'], meta: { name: 'TrackingEvent' } }
  /**
   * Find zero or one TrackingEvent that matches the filter.
   * @param {TrackingEventFindUniqueArgs} args - Arguments to find a TrackingEvent
   * @example
   * // Get one TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TrackingEventFindUniqueArgs>(args: Prisma.SelectSubset<T, TrackingEventFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TrackingEvent that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TrackingEventFindUniqueOrThrowArgs} args - Arguments to find a TrackingEvent
   * @example
   * // Get one TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TrackingEventFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TrackingEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TrackingEvent that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventFindFirstArgs} args - Arguments to find a TrackingEvent
   * @example
   * // Get one TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TrackingEventFindFirstArgs>(args?: Prisma.SelectSubset<T, TrackingEventFindFirstArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TrackingEvent that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventFindFirstOrThrowArgs} args - Arguments to find a TrackingEvent
   * @example
   * // Get one TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TrackingEventFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TrackingEventFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TrackingEvents that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TrackingEvents
   * const trackingEvents = await prisma.trackingEvent.findMany()
   * 
   * // Get first 10 TrackingEvents
   * const trackingEvents = await prisma.trackingEvent.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const trackingEventWithIdOnly = await prisma.trackingEvent.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TrackingEventFindManyArgs>(args?: Prisma.SelectSubset<T, TrackingEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TrackingEvent.
   * @param {TrackingEventCreateArgs} args - Arguments to create a TrackingEvent.
   * @example
   * // Create one TrackingEvent
   * const TrackingEvent = await prisma.trackingEvent.create({
   *   data: {
   *     // ... data to create a TrackingEvent
   *   }
   * })
   * 
   */
  create<T extends TrackingEventCreateArgs>(args: Prisma.SelectSubset<T, TrackingEventCreateArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TrackingEvents.
   * @param {TrackingEventCreateManyArgs} args - Arguments to create many TrackingEvents.
   * @example
   * // Create many TrackingEvents
   * const trackingEvent = await prisma.trackingEvent.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TrackingEventCreateManyArgs>(args?: Prisma.SelectSubset<T, TrackingEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TrackingEvents and returns the data saved in the database.
   * @param {TrackingEventCreateManyAndReturnArgs} args - Arguments to create many TrackingEvents.
   * @example
   * // Create many TrackingEvents
   * const trackingEvent = await prisma.trackingEvent.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TrackingEvents and only return the `id`
   * const trackingEventWithIdOnly = await prisma.trackingEvent.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TrackingEventCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TrackingEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TrackingEvent.
   * @param {TrackingEventDeleteArgs} args - Arguments to delete one TrackingEvent.
   * @example
   * // Delete one TrackingEvent
   * const TrackingEvent = await prisma.trackingEvent.delete({
   *   where: {
   *     // ... filter to delete one TrackingEvent
   *   }
   * })
   * 
   */
  delete<T extends TrackingEventDeleteArgs>(args: Prisma.SelectSubset<T, TrackingEventDeleteArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TrackingEvent.
   * @param {TrackingEventUpdateArgs} args - Arguments to update one TrackingEvent.
   * @example
   * // Update one TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TrackingEventUpdateArgs>(args: Prisma.SelectSubset<T, TrackingEventUpdateArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TrackingEvents.
   * @param {TrackingEventDeleteManyArgs} args - Arguments to filter TrackingEvents to delete.
   * @example
   * // Delete a few TrackingEvents
   * const { count } = await prisma.trackingEvent.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TrackingEventDeleteManyArgs>(args?: Prisma.SelectSubset<T, TrackingEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TrackingEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TrackingEvents
   * const trackingEvent = await prisma.trackingEvent.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TrackingEventUpdateManyArgs>(args: Prisma.SelectSubset<T, TrackingEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TrackingEvents and returns the data updated in the database.
   * @param {TrackingEventUpdateManyAndReturnArgs} args - Arguments to update many TrackingEvents.
   * @example
   * // Update many TrackingEvents
   * const trackingEvent = await prisma.trackingEvent.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TrackingEvents and only return the `id`
   * const trackingEventWithIdOnly = await prisma.trackingEvent.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TrackingEventUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TrackingEventUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TrackingEvent.
   * @param {TrackingEventUpsertArgs} args - Arguments to update or create a TrackingEvent.
   * @example
   * // Update or create a TrackingEvent
   * const trackingEvent = await prisma.trackingEvent.upsert({
   *   create: {
   *     // ... data to create a TrackingEvent
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TrackingEvent we want to update
   *   }
   * })
   */
  upsert<T extends TrackingEventUpsertArgs>(args: Prisma.SelectSubset<T, TrackingEventUpsertArgs<ExtArgs>>): Prisma.Prisma__TrackingEventClient<runtime.Types.Result.GetResult<Prisma.$TrackingEventPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TrackingEvents.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventCountArgs} args - Arguments to filter TrackingEvents to count.
   * @example
   * // Count the number of TrackingEvents
   * const count = await prisma.trackingEvent.count({
   *   where: {
   *     // ... the filter for the TrackingEvents we want to count
   *   }
   * })
  **/
  count<T extends TrackingEventCountArgs>(
    args?: Prisma.Subset<T, TrackingEventCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TrackingEventCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TrackingEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TrackingEventAggregateArgs>(args: Prisma.Subset<T, TrackingEventAggregateArgs>): Prisma.PrismaPromise<GetTrackingEventAggregateType<T>>

  /**
   * Group by TrackingEvent.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrackingEventGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TrackingEventGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TrackingEventGroupByArgs['orderBy'] }
      : { orderBy?: TrackingEventGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TrackingEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrackingEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TrackingEvent model
 */
readonly fields: TrackingEventFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TrackingEvent.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TrackingEventClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TrackingEvent model
 */
export interface TrackingEventFieldRefs {
  readonly id: Prisma.FieldRef<"TrackingEvent", 'String'>
  readonly timestamp: Prisma.FieldRef<"TrackingEvent", 'DateTime'>
  readonly userId: Prisma.FieldRef<"TrackingEvent", 'String'>
  readonly type: Prisma.FieldRef<"TrackingEvent", 'String'>
  readonly variant: Prisma.FieldRef<"TrackingEvent", 'String'>
}
    

// Custom InputTypes
/**
 * TrackingEvent findUnique
 */
export type TrackingEventFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter, which TrackingEvent to fetch.
   */
  where: Prisma.TrackingEventWhereUniqueInput
}

/**
 * TrackingEvent findUniqueOrThrow
 */
export type TrackingEventFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter, which TrackingEvent to fetch.
   */
  where: Prisma.TrackingEventWhereUniqueInput
}

/**
 * TrackingEvent findFirst
 */
export type TrackingEventFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter, which TrackingEvent to fetch.
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TrackingEvents to fetch.
   */
  orderBy?: Prisma.TrackingEventOrderByWithRelationInput | Prisma.TrackingEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TrackingEvents.
   */
  cursor?: Prisma.TrackingEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TrackingEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TrackingEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TrackingEvents.
   */
  distinct?: Prisma.TrackingEventScalarFieldEnum | Prisma.TrackingEventScalarFieldEnum[]
}

/**
 * TrackingEvent findFirstOrThrow
 */
export type TrackingEventFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter, which TrackingEvent to fetch.
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TrackingEvents to fetch.
   */
  orderBy?: Prisma.TrackingEventOrderByWithRelationInput | Prisma.TrackingEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TrackingEvents.
   */
  cursor?: Prisma.TrackingEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TrackingEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TrackingEvents.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TrackingEvents.
   */
  distinct?: Prisma.TrackingEventScalarFieldEnum | Prisma.TrackingEventScalarFieldEnum[]
}

/**
 * TrackingEvent findMany
 */
export type TrackingEventFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter, which TrackingEvents to fetch.
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TrackingEvents to fetch.
   */
  orderBy?: Prisma.TrackingEventOrderByWithRelationInput | Prisma.TrackingEventOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TrackingEvents.
   */
  cursor?: Prisma.TrackingEventWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TrackingEvents from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TrackingEvents.
   */
  skip?: number
  distinct?: Prisma.TrackingEventScalarFieldEnum | Prisma.TrackingEventScalarFieldEnum[]
}

/**
 * TrackingEvent create
 */
export type TrackingEventCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * The data needed to create a TrackingEvent.
   */
  data: Prisma.XOR<Prisma.TrackingEventCreateInput, Prisma.TrackingEventUncheckedCreateInput>
}

/**
 * TrackingEvent createMany
 */
export type TrackingEventCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TrackingEvents.
   */
  data: Prisma.TrackingEventCreateManyInput | Prisma.TrackingEventCreateManyInput[]
}

/**
 * TrackingEvent createManyAndReturn
 */
export type TrackingEventCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * The data used to create many TrackingEvents.
   */
  data: Prisma.TrackingEventCreateManyInput | Prisma.TrackingEventCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TrackingEvent update
 */
export type TrackingEventUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * The data needed to update a TrackingEvent.
   */
  data: Prisma.XOR<Prisma.TrackingEventUpdateInput, Prisma.TrackingEventUncheckedUpdateInput>
  /**
   * Choose, which TrackingEvent to update.
   */
  where: Prisma.TrackingEventWhereUniqueInput
}

/**
 * TrackingEvent updateMany
 */
export type TrackingEventUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TrackingEvents.
   */
  data: Prisma.XOR<Prisma.TrackingEventUpdateManyMutationInput, Prisma.TrackingEventUncheckedUpdateManyInput>
  /**
   * Filter which TrackingEvents to update
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * Limit how many TrackingEvents to update.
   */
  limit?: number
}

/**
 * TrackingEvent updateManyAndReturn
 */
export type TrackingEventUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * The data used to update TrackingEvents.
   */
  data: Prisma.XOR<Prisma.TrackingEventUpdateManyMutationInput, Prisma.TrackingEventUncheckedUpdateManyInput>
  /**
   * Filter which TrackingEvents to update
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * Limit how many TrackingEvents to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TrackingEvent upsert
 */
export type TrackingEventUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * The filter to search for the TrackingEvent to update in case it exists.
   */
  where: Prisma.TrackingEventWhereUniqueInput
  /**
   * In case the TrackingEvent found by the `where` argument doesn't exist, create a new TrackingEvent with this data.
   */
  create: Prisma.XOR<Prisma.TrackingEventCreateInput, Prisma.TrackingEventUncheckedCreateInput>
  /**
   * In case the TrackingEvent was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TrackingEventUpdateInput, Prisma.TrackingEventUncheckedUpdateInput>
}

/**
 * TrackingEvent delete
 */
export type TrackingEventDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
  /**
   * Filter which TrackingEvent to delete.
   */
  where: Prisma.TrackingEventWhereUniqueInput
}

/**
 * TrackingEvent deleteMany
 */
export type TrackingEventDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TrackingEvents to delete
   */
  where?: Prisma.TrackingEventWhereInput
  /**
   * Limit how many TrackingEvents to delete.
   */
  limit?: number
}

/**
 * TrackingEvent without action
 */
export type TrackingEventDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrackingEvent
   */
  select?: Prisma.TrackingEventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TrackingEvent
   */
  omit?: Prisma.TrackingEventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrackingEventInclude<ExtArgs> | null
}
