0-legacy-ports.aggregations (provider=sqlite, js_libsql) max
0-legacy-ports.aggregations (provider=sqlite, js_libsql) multiple aggregations
0-legacy-ports.aggregations (provider=sqlite, js_libsql) multiple aggregations with where
0-legacy-ports.json (provider=sqlite, js_libsql) create required json
0-legacy-ports.json (provider=sqlite, js_libsql) update required json with where equals
_example (provider=sqlite, previewFeatures=referentialIntegrity, js_libsql) conditional @ts-test-if
_example (provider=sqlite, previewFeatures=relationJoins, js_libsql) conditional @ts-test-if
blog-update (provider=sqlite, js_libsql) should create a user and post and connect them together
blog-update (provider=sqlite, js_libsql) should create a user and post and disconnect them
create-default-date.test (provider=sqlite, js_libsql) correctly creates a field with default date
distinct (provider=sqlite, js_libsql) distinct on firstName
distinct (provider=sqlite, js_libsql) distinct on firstName and firstName
distinct (provider=sqlite, js_libsql) distinct on firstName and id
distinct (provider=sqlite, js_libsql) distinct on firstName and lastName
distinct (provider=sqlite, js_libsql) distinct on id
distinct (provider=sqlite, js_libsql) distinct on id and firstName
distinct (provider=sqlite, js_libsql) distinct on id and firstName and lastName
distinct (provider=sqlite, js_libsql) distinct on id and firstName shortcut
distinct (provider=sqlite, js_libsql) distinct on id and lastName
distinct (provider=sqlite, js_libsql) distinct on id shortcut
driver-adapters.team-orm-687-bytes (provider=sqlite, js_libsql) Bytes encoding is preserved
enums (provider=sqlite, js_libsql) fails at runtime when an invalid entry is entered manually in SQLite
extended-where.create (provider=sqlite, js_libsql) create with connect 1 unique (PK)
extended-where.create (provider=sqlite, js_libsql) create with connect 1 unique (non-PK)
extended-where.create (provider=sqlite, js_libsql) create with connect 2 uniques (PK & non-PK)
extended-where.findUnique (provider=sqlite, js_libsql) findUnique with nested where on optional 1:1 not found
extended-where.upsert (provider=sqlite, js_libsql) upsert with where 1 unique (PK)
extended-where.upsert (provider=sqlite, js_libsql) upsert with where 2 uniques (PK & non-PK)
extensions.query (provider=sqlite, js_libsql) hijacking a batch transaction into another one with a simple call
extensions.query (provider=sqlite, js_libsql) hijacking a batch transaction into another one with multiple calls
field-reference.numeric (provider=sqlite, fieldType=BigInt, js_libsql) relationship
field-reference.numeric (provider=sqlite, fieldType=Float, js_libsql) relationship
field-reference.numeric (provider=sqlite, fieldType=Int, js_libsql) relationship
fluent-api (provider=sqlite, js_libsql) extended client chaining and selecting twice
fluent-api (provider=sqlite, js_libsql) extended client lower-cased relations
fluent-api (provider=sqlite, js_libsql) extended client upper-cased relations
fluent-api (provider=sqlite, js_libsql) extended client upsert
fluent-api (provider=sqlite, js_libsql) regular client chaining and selecting twice
fluent-api (provider=sqlite, js_libsql) regular client lower-cased relations
fluent-api (provider=sqlite, js_libsql) regular client upper-cased relations
fluent-api (provider=sqlite, js_libsql) regular client upsert
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow with include
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow with select
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique with include
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique with select
fluent-api-null (provider=sqlite, js_libsql) extended client upsert
fluent-api-null (provider=sqlite, js_libsql) extended client upsert with include
fluent-api-null (provider=sqlite, js_libsql) extended client upsert with select
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow with include
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow with select
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique with include
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique with select
fluent-api-null (provider=sqlite, js_libsql) regular client upsert
fluent-api-null (provider=sqlite, js_libsql) regular client upsert with include
fluent-api-null (provider=sqlite, js_libsql) regular client upsert with select
globalOmit.test (provider=sqlite, js_libsql) createMany does not crash
globalOmit.test (provider=sqlite, js_libsql) deleteMany does not crash
globalOmit.test (provider=sqlite, js_libsql) groupBy does not crash
globalOmit.test (provider=sqlite, js_libsql) updateMany does not crash
invalid-sqlite-isolation-level (provider=sqlite, js_libsql) invalid level generates run- and compile- time error
issues.11789-timed-out (provider=sqlite, js_libsql) 100 concurrent creates should succeed
issues.11789-timed-out (provider=sqlite, js_libsql) 5 concurrent upsert should succeed
issues.11974 (provider=sqlite, js_libsql) should not throw an error when counting two relation fields using find
issues.13766.at-unique (provider=sqlite, js_libsql) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.at-unique (provider=sqlite, js_libsql) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.13766.primary-key (provider=sqlite, js_libsql) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.primary-key (provider=sqlite, js_libsql) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.15176 (provider=sqlite, js_libsql) should update both updatedAt fields on a model
issues.15204-conversion-error (provider=sqlite, fieldType=BigInt, js_libsql) should return a descriptive error
issues.15204-conversion-error (provider=sqlite, fieldType=Int, js_libsql) should return a descriptive error
issues.15644-middleware-arg-types (provider=sqlite, js_libsql) middleware with updateMany
issues.15644-middleware-arg-types (provider=sqlite, js_libsql) middleware with upsert
issues.17030-args-type-conflict (provider=sqlite, js_libsql) include works correctly
issues.18276-batch-order (provider=sqlite, js_libsql) executes batch in right order when using delayed middleware
issues.18276-batch-order (provider=sqlite, js_libsql) executes batch queries in the right order when using extensions + middleware
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with a scalar in "by"
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with a scalar in "by" and no other selection
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with extended client
issues.21369-select-null (provider=sqlite, js_libsql) SELECT NULL works
issues.21454-$type-in-json (provider=sqlite, js_libsql) preserves deeply nested json with $type key inside
issues.21454-$type-in-json (provider=sqlite, js_libsql) preserves json with $type key inside
issues.22947-sqlite-conccurrent-upsert (provider=sqlite, js_libsql) concurrent upserts should succeed
issues.23902 (provider=sqlite, js_libsql) should not throw error when updating fields on a many to many join table
json-fields (provider=sqlite, js_libsql) object with .toJSON method
json-fields (provider=sqlite, js_libsql) simple object
json-null-types (provider=sqlite, js_libsql) nullableJsonField JsonNull
json-null-types (provider=sqlite, js_libsql) requiredJsonField JsonNull
logging (provider=sqlite, js_libsql) should log batched queries inside a ITX
logging (provider=sqlite, js_libsql) should log queries inside a ITX
logging (provider=sqlite, js_libsql) should log transaction batched queries
methods.createMany (provider=sqlite, js_libsql) should create many records
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) should accept include on the post side
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) should accept include on the post side
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when update arguments do not have any nested queries
metrics.enabled (provider=sqlite, js_libsql) after a query includes global labels in json format
metrics.enabled (provider=sqlite, js_libsql) after a query includes global labels in prometheus format
metrics.enabled (provider=sqlite, js_libsql) after a query returns metrics in json format
metrics.enabled (provider=sqlite, js_libsql) after a query returns metrics in prometheus format
metrics.enabled (provider=sqlite, js_libsql) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=sqlite, js_libsql) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=sqlite, js_libsql) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=sqlite, js_libsql) multiple instances does not share metrics between 2 different instances of client
multiple-types (provider=sqlite, js_libsql) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=sqlite, js_libsql) Bool field: true or false should succeed
multiple-types (provider=sqlite, js_libsql) String field: true or false as string should succeed
multiple-types (provider=sqlite, js_libsql) a record with all fields set to null should succeed
multiple-types (provider=sqlite, js_libsql) all fields are null
multiple-types (provider=sqlite, js_libsql) shows differences between queryRaw and findMany
omit.test (provider=sqlite, js_libsql) upsert
optimistic-concurrency-control (provider=sqlite, js_libsql) update with upsert relation
query-error-logging (provider=sqlite, js_libsql) findFirstOrThrow when error thrown
query-error-logging (provider=sqlite, js_libsql) findUniqueOrThrown when error thrown
query-error-logging (provider=sqlite, js_libsql) middleware captures errors
raw-queries.typed-results (provider=sqlite, js_libsql) query model with multiple types
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) BigInt - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) BigInt - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) DateTime - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) DateTime - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) Decimal - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) Decimal - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) bytes - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) bytes - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) double - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) double - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) forced nullable column
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) forced nullable param
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) int - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) int - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) json - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) json - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) string - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) string - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) BigInt - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) BigInt - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) DateTime - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) DateTime - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) Decimal - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) Decimal - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) bytes - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) bytes - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) double - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) double - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) int - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) int - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) json - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) json - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) string - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) string - output
unsupported-action (provider=sqlite, js_libsql) unsupported method
upsert-relation-mode-prisma.test (provider=sqlite, js_libsql) calling upsert two times in a row does nothing
