0-legacy-ports.batch-find-unique (provider=postgresql, js_pg) findUnique batching
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join and Prisma.sql 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRawUnsafe 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via queryRawUnsafe with values 2
0-legacy-ports.json (provider=sqlite, js_libsql) create required json 1
0-legacy-ports.json (provider=sqlite, js_libsql) update required json with where equals 1
batch-transaction-isolation-level (provider=postgresql, js_pg) invalid level generates run- and compile- time error
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when raw query has MAX ids
driver-adapters.adapter-nullability (provider=postgresql, js_pg) does not throw if adapter is set to null
driver-adapters.team-orm-687-bytes (provider=postgresql, js_pg) Bytes encoding is preserved
extended-where.validation (provider=sqlite, js_libsql) where and missing unique keys 1
extended-where.validation (provider=sqlite, js_libsql) where and no keys provided 1
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods and query
extensions.model (provider=postgresql, js_pg) error in async PrismaPromise methods
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods 1
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods and query 1
extensions.model (provider=sqlite, js_libsql) error in async PrismaPromise methods 1
extensions.query (provider=sqlite, js_libsql) args mutation accumulation 1
extensions.query (provider=sqlite, js_libsql) args mutation isolation 1
extensions.query (provider=sqlite, js_libsql) extending a specific model query 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and $allOperations 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and $allOperations 2
extensions.query (provider=sqlite, js_libsql) extending with $allModels and a specific query 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and a specific query 2
extensions.query (provider=sqlite, js_libsql) extending with $allModels and another $allModels 1
extensions.query (provider=sqlite, js_libsql) extending with specific model and $allOperations 1
extensions.query (provider=sqlite, js_libsql) extending with top-level $allOperations 1
extensions.query (provider=sqlite, js_libsql) query result mutation with a simple call 1
extensions.query (provider=sqlite, js_libsql) query result mutation with multiple calls 1
extensions.query (provider=sqlite, js_libsql) query result mutations with batch transactions 1
extensions.query (provider=sqlite, js_libsql) top to bottom execution order 1
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via normal call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via normal call
extensions.tx (provider=postgresql, js_pg) isolation level is properly reflected in extended client
extensions.tx (provider=postgresql, js_pg) type inference allows for destructuring the array
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) wrong column numeric type
issues.14373-batch-tx-error (provider=postgresql, js_pg) correctly reports location of a batch error
issues.15177 (provider=postgresql, js_pg) should allow CRUD methods on a table column that has a space
issues.18846-empty-array (provider=postgresql, js_pg) correctly rejects empty arrays in places where empty objects are allowed
issues.21369-select-null (provider=postgresql, js_pg) SELECT NULL works
issues.21631-batching-in-transaction (provider=postgresql, js_pg) Transactions and batching (query compacting) shouldn't interfere with result sets 2 `findUnique`s in a $transaction
issues.23902 (provider=postgresql, js_pg) should not throw error when updating fields on a many to many join table
issues.6578 (provider=postgresql, js_pg) should assert Dates, DateTimes, Times and UUIDs are wrapped in quotes and are deserializable
methods.createManyAndReturn-supported (provider=postgresql, js_pg) distinct should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) include _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) orderBy should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) select _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should fail include on the user side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) take should fail
methods.findFirstOrThrow (provider=postgresql, js_pg) finds existing record
methods.findFirstOrThrow (provider=postgresql, js_pg) reports correct method name in case of validation error
methods.findFirstOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.findFirstOrThrow (provider=postgresql, js_pg) works with interactive transactions
methods.findFirstOrThrow (provider=postgresql, js_pg) works with transactions
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when update arguments do not have any nested queries
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with Prisma.sql instance
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with template string
prisma-promise (provider=sqlite, js_libsql) $queryRaw fluent promises should have promise properties
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .catch
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .finally
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .then
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe fluent promises should have promise properties
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .catch
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .finally
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .then
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated mixed calls to .then, .catch, .finally
raw-queries.typed-results-advanced-and-native-types (provider=postgresql, js_pg) query model with multiple fields
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
runtime-import (provider=postgresql, js_pg) imported files have the expected annotations
runtime-import (provider=postgresql, js_pg) imports correct runtime
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) xml - output
