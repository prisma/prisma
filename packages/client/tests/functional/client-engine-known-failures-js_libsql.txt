0-legacy-ports.aggregations (provider=sqlite, js_libsql) count inline boolean
0-legacy-ports.aggregations (provider=sqlite, js_libsql) count with _all
0-legacy-ports.aggregations (provider=sqlite, js_libsql) invalid avg
0-legacy-ports.aggregations (provider=sqlite, js_libsql) invalid count
0-legacy-ports.aggregations (provider=sqlite, js_libsql) invalid max
0-legacy-ports.aggregations (provider=sqlite, js_libsql) invalid min
0-legacy-ports.aggregations (provider=sqlite, js_libsql) invalid sum
0-legacy-ports.aggregations (provider=sqlite, js_libsql) max
0-legacy-ports.aggregations (provider=sqlite, js_libsql) min
0-legacy-ports.aggregations (provider=sqlite, js_libsql) multiple aggregations
0-legacy-ports.aggregations (provider=sqlite, js_libsql) multiple aggregations with where
0-legacy-ports.aggregations (provider=sqlite, js_libsql) sum
0-legacy-ports.atomic-increment-decrement (provider=sqlite, js_libsql) atomic decrement
0-legacy-ports.atomic-increment-decrement (provider=sqlite, js_libsql) atomic decrement with negative
0-legacy-ports.atomic-increment-decrement (provider=sqlite, js_libsql) atomic increment
0-legacy-ports.atomic-increment-decrement (provider=sqlite, js_libsql) atomic increment with negative value
0-legacy-ports.batch-find-unique (provider=postgresql, js_pg) findUnique batching
0-legacy-ports.batch-find-unique (provider=sqlite, js_libsql) findUnique batching
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join and Prisma.sql
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRaw using Prisma.join and Prisma.sql 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRawUnsafe
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via executeRawUnsafe 2
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via queryRawUnsafe with values
0-legacy-ports.execute-raw (provider=sqlite, js_libsql) update via queryRawUnsafe with values 2
0-legacy-ports.json (provider=sqlite, js_libsql) create required json
0-legacy-ports.json (provider=sqlite, js_libsql) create required json 1
0-legacy-ports.json (provider=sqlite, js_libsql) update required json with where equals
0-legacy-ports.json (provider=sqlite, js_libsql) update required json with where equals 1
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select * via queryRaw
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select * via queryRawUnsafe
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select * via queryRawUnsafe with values
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select 1 via queryRaw
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select 1 via queryRawUnsafe
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select fields via queryRaw using Prisma.join
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select fields via queryRaw using Prisma.join and Prisma.sql
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select values via queryRawUnsafe
0-legacy-ports.query-raw (provider=sqlite, js_libsql) select with alias via queryRaw
_example (provider=sqlite, previewFeatures=referentialIntegrity, js_libsql) conditional @ts-test-if
_example (provider=sqlite, previewFeatures=relationJoins, js_libsql) conditional @ts-test-if
batch-transaction-isolation-level (provider=postgresql, js_pg) invalid level generates run- and compile- time error
blog-update (provider=sqlite, js_libsql) should create a user and post and connect them together
blog-update (provider=sqlite, js_libsql) should create a user and post and disconnect them
blog-update (provider=sqlite, js_libsql) should create a user with posts and a profile and update itself and nested connections setting fields to null
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when raw query has MAX ids
chunking-query (provider=sqlite, js_libsql) issues #8832 / #9326 success cases should succeed when raw query has MAX ids
create-default-date.test (provider=sqlite, js_libsql) correctly creates a field with default date
decimal.scalar (provider=sqlite, js_libsql) possible inputs decimal as Decimal.js instance
decimal.scalar (provider=sqlite, js_libsql) possible inputs decimal as decimal.js-like object
decimal.scalar (provider=sqlite, js_libsql) possible inputs decimal as number
decimal.scalar (provider=sqlite, js_libsql) possible inputs decimal as string
default-selection (provider=sqlite, js_libsql) includes scalars
distinct (provider=sqlite, js_libsql) distinct on firstName
distinct (provider=sqlite, js_libsql) distinct on firstName and firstName
distinct (provider=sqlite, js_libsql) distinct on firstName and id
distinct (provider=sqlite, js_libsql) distinct on firstName and lastName
distinct (provider=sqlite, js_libsql) distinct on id
distinct (provider=sqlite, js_libsql) distinct on id and firstName
distinct (provider=sqlite, js_libsql) distinct on id and firstName and lastName
distinct (provider=sqlite, js_libsql) distinct on id and firstName shortcut
distinct (provider=sqlite, js_libsql) distinct on id and lastName
distinct (provider=sqlite, js_libsql) distinct on id shortcut
driver-adapters.adapter-nullability (provider=postgresql, js_pg) does not throw if adapter is set to null
driver-adapters.team-orm-687-bytes (provider=postgresql, js_pg) Bytes encoding is preserved
driver-adapters.team-orm-687-bytes (provider=sqlite, js_libsql) Bytes encoding is preserved
enums (provider=sqlite, js_libsql) can retrieve data with an enum value
enums (provider=sqlite, js_libsql) fails at runtime when an invalid entry is entered manually in SQLite
extended-where.aggregate (provider=sqlite, js_libsql) aggregate with cursor 1 unique (PK)
extended-where.aggregate (provider=sqlite, js_libsql) aggregate with cursor 2 uniques (PK & non-PK)
extended-where.aggregate (provider=sqlite, js_libsql) update with where 1 unique (non-PK)
extended-where.create (provider=sqlite, js_libsql) create with connect 1 unique (PK)
extended-where.create (provider=sqlite, js_libsql) create with connect 1 unique (non-PK)
extended-where.create (provider=sqlite, js_libsql) create with connect 2 uniques (PK & non-PK)
extended-where.findFirst (provider=sqlite, js_libsql) findFirst with cursor 1 unique (PK)
extended-where.findFirst (provider=sqlite, js_libsql) findFirst with cursor 1 unique (non-PK)
extended-where.findFirst (provider=sqlite, js_libsql) findFirst with cursor 2 uniques (PK & non-PK)
extended-where.findFirstOrThrow (provider=sqlite, js_libsql) findFirstOrThrow with cursor 1 unique (PK)
extended-where.findFirstOrThrow (provider=sqlite, js_libsql) findFirstOrThrow with cursor 1 unique (non-PK)
extended-where.findFirstOrThrow (provider=sqlite, js_libsql) findFirstOrThrow with cursor 2 uniques (PK & non-PK)
extended-where.findUnique (provider=sqlite, js_libsql) findUnique with nested where on optional 1:1 not found
extended-where.upsert (provider=sqlite, js_libsql) upsert with where 1 unique (PK)
extended-where.upsert (provider=sqlite, js_libsql) upsert with where 2 uniques (PK & non-PK)
extended-where.validation (provider=sqlite, js_libsql) where and missing unique keys
extended-where.validation (provider=sqlite, js_libsql) where and missing unique keys 1
extended-where.validation (provider=sqlite, js_libsql) where and no keys provided
extended-where.validation (provider=sqlite, js_libsql) where and no keys provided 1
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods and query
extensions.model (provider=postgresql, js_pg) error in async PrismaPromise methods
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods 1
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods and query
extensions.model (provider=sqlite, js_libsql) batching of PrismaPromise returning custom model methods and query 1
extensions.model (provider=sqlite, js_libsql) error in async PrismaPromise methods
extensions.model (provider=sqlite, js_libsql) error in async PrismaPromise methods 1
extensions.query (provider=sqlite, js_libsql) args mutation accumulation
extensions.query (provider=sqlite, js_libsql) args mutation accumulation 1
extensions.query (provider=sqlite, js_libsql) args mutation isolation
extensions.query (provider=sqlite, js_libsql) args mutation isolation 1
extensions.query (provider=sqlite, js_libsql) extending a specific model query
extensions.query (provider=sqlite, js_libsql) extending a specific model query 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and $allOperations
extensions.query (provider=sqlite, js_libsql) extending with $allModels and $allOperations 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and $allOperations 2
extensions.query (provider=sqlite, js_libsql) extending with $allModels and a specific query
extensions.query (provider=sqlite, js_libsql) extending with $allModels and a specific query 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels and a specific query 2
extensions.query (provider=sqlite, js_libsql) extending with $allModels and another $allModels
extensions.query (provider=sqlite, js_libsql) extending with $allModels and another $allModels 1
extensions.query (provider=sqlite, js_libsql) extending with $allModels.$allOperations and a top-level query
extensions.query (provider=sqlite, js_libsql) extending with specific model and $allOperations
extensions.query (provider=sqlite, js_libsql) extending with specific model and $allOperations 1
extensions.query (provider=sqlite, js_libsql) extending with top-level $allOperations
extensions.query (provider=sqlite, js_libsql) extending with top-level $allOperations 1
extensions.query (provider=sqlite, js_libsql) hijacking a batch transaction into another one with a simple call
extensions.query (provider=sqlite, js_libsql) hijacking a batch transaction into another one with multiple calls
extensions.query (provider=sqlite, js_libsql) query result mutation with a simple call
extensions.query (provider=sqlite, js_libsql) query result mutation with a simple call 1
extensions.query (provider=sqlite, js_libsql) query result mutation with multiple calls
extensions.query (provider=sqlite, js_libsql) query result mutation with multiple calls 1
extensions.query (provider=sqlite, js_libsql) query result mutations with batch transactions
extensions.query (provider=sqlite, js_libsql) query result mutations with batch transactions 1
extensions.query (provider=sqlite, js_libsql) top to bottom execution order
extensions.query (provider=sqlite, js_libsql) top to bottom execution order 1
extensions.query (provider=sqlite, js_libsql) transforming a simple query into a batch transaction
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via normal call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via normal call
extensions.tx (provider=postgresql, js_pg) isolation level is properly reflected in extended client
extensions.tx (provider=postgresql, js_pg) type inference allows for destructuring the array
field-reference.json (provider=sqlite, js_libsql) wrong field type
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) wrong column numeric type
field-reference.numeric (provider=sqlite, fieldType=BigInt, js_libsql) relationship
field-reference.numeric (provider=sqlite, fieldType=BigInt, js_libsql) wrong column numeric type
field-reference.numeric (provider=sqlite, fieldType=Float, js_libsql) relationship
field-reference.numeric (provider=sqlite, fieldType=Float, js_libsql) wrong column numeric type
field-reference.numeric (provider=sqlite, fieldType=Int, js_libsql) relationship
field-reference.numeric (provider=sqlite, fieldType=Int, js_libsql) wrong column numeric type
field-reference.string (provider=sqlite, js_libsql) wrong field type
field-reference.string (provider=sqlite, js_libsql) wrong identical model
field-reference.string (provider=sqlite, js_libsql) wrong model
fluent-api (provider=sqlite, js_libsql) extended client chaining and selecting
fluent-api (provider=sqlite, js_libsql) extended client chaining and selecting twice
fluent-api (provider=sqlite, js_libsql) extended client findFirst
fluent-api (provider=sqlite, js_libsql) extended client findFirstOrThrow
fluent-api (provider=sqlite, js_libsql) extended client findFirstOrThrow where nested entity is not found
fluent-api (provider=sqlite, js_libsql) extended client findUniqueOrThrow where nested entity is not found
fluent-api (provider=sqlite, js_libsql) extended client lower-cased relations
fluent-api (provider=sqlite, js_libsql) extended client upper-cased relations
fluent-api (provider=sqlite, js_libsql) extended client upsert
fluent-api (provider=sqlite, js_libsql) regular client chaining and selecting
fluent-api (provider=sqlite, js_libsql) regular client chaining and selecting twice
fluent-api (provider=sqlite, js_libsql) regular client findFirst
fluent-api (provider=sqlite, js_libsql) regular client findFirstOrThrow
fluent-api (provider=sqlite, js_libsql) regular client findFirstOrThrow where nested entity is not found
fluent-api (provider=sqlite, js_libsql) regular client findUniqueOrThrow where nested entity is not found
fluent-api (provider=sqlite, js_libsql) regular client lower-cased relations
fluent-api (provider=sqlite, js_libsql) regular client upper-cased relations
fluent-api (provider=sqlite, js_libsql) regular client upsert
fluent-api-null (provider=sqlite, js_libsql) extended client findFirst
fluent-api-null (provider=sqlite, js_libsql) extended client findFirst with include
fluent-api-null (provider=sqlite, js_libsql) extended client findFirst with select
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow with include
fluent-api-null (provider=sqlite, js_libsql) extended client findFirstOrThrow with select
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique with include
fluent-api-null (provider=sqlite, js_libsql) extended client findUnique with select
fluent-api-null (provider=sqlite, js_libsql) extended client upsert
fluent-api-null (provider=sqlite, js_libsql) extended client upsert with include
fluent-api-null (provider=sqlite, js_libsql) extended client upsert with select
fluent-api-null (provider=sqlite, js_libsql) regular client findFirst
fluent-api-null (provider=sqlite, js_libsql) regular client findFirst with include
fluent-api-null (provider=sqlite, js_libsql) regular client findFirst with select
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow with include
fluent-api-null (provider=sqlite, js_libsql) regular client findFirstOrThrow with select
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique with include
fluent-api-null (provider=sqlite, js_libsql) regular client findUnique with select
fluent-api-null (provider=sqlite, js_libsql) regular client upsert
fluent-api-null (provider=sqlite, js_libsql) regular client upsert with include
fluent-api-null (provider=sqlite, js_libsql) regular client upsert with select
globalOmit.test (provider=sqlite, js_libsql) aggregate does not crash
globalOmit.test (provider=sqlite, js_libsql) allows to include globally omitted field with omit: false
globalOmit.test (provider=sqlite, js_libsql) allows to include globally omitted field with select: true
globalOmit.test (provider=sqlite, js_libsql) count does not crash
globalOmit.test (provider=sqlite, js_libsql) createMany does not crash
globalOmit.test (provider=sqlite, js_libsql) deleteMany does not crash
globalOmit.test (provider=sqlite, js_libsql) excluding more than one field at a time
globalOmit.test (provider=sqlite, js_libsql) findFirst
globalOmit.test (provider=sqlite, js_libsql) findFirstOrThrow
globalOmit.test (provider=sqlite, js_libsql) groupBy does not crash
globalOmit.test (provider=sqlite, js_libsql) omitting every field
globalOmit.test (provider=sqlite, js_libsql) updateMany does not crash
globalOmit.test (provider=sqlite, js_libsql) works after extending the client
globalOmit.test (provider=sqlite, js_libsql) works for fluent api
globalOmit.test (provider=sqlite, js_libsql) works for nested relations (include)
globalOmit.test (provider=sqlite, js_libsql) works for nested relations (select)
globalOmit.test (provider=sqlite, js_libsql) works with fluent api after extending the client
handle-int-overflow (provider=sqlite, js_libsql) big float in exponent notation
handle-int-overflow (provider=sqlite, js_libsql) integer overflow
invalid-sqlite-isolation-level (provider=sqlite, js_libsql) invalid level generates run- and compile- time error
issues.11789-timed-out (provider=sqlite, js_libsql) 100 concurrent creates should succeed
issues.11789-timed-out (provider=sqlite, js_libsql) 5 concurrent upsert should succeed
issues.11974 (provider=sqlite, js_libsql) should not throw an error when aggregating two relation fields using aggregate
issues.11974 (provider=sqlite, js_libsql) should not throw an error when counting two relation fields using find
issues.13766.at-unique (provider=sqlite, js_libsql) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.at-unique (provider=sqlite, js_libsql) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.13766.primary-key (provider=sqlite, js_libsql) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.primary-key (provider=sqlite, js_libsql) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.14373-batch-tx-error (provider=postgresql, js_pg) correctly reports location of a batch error
issues.14373-batch-tx-error (provider=sqlite, js_libsql) correctly reports location of a batch error
issues.14954-date-batch (provider=sqlite, js_libsql) findFirst date with $transaction([...])
issues.14954-date-batch (provider=sqlite, js_libsql) findFirst date with Promise.all
issues.14954-date-batch (provider=sqlite, js_libsql) findUnique date with $transaction([...])
issues.14954-date-batch (provider=sqlite, js_libsql) findUnique date with Promise.all
issues.15176 (provider=sqlite, js_libsql) should update both updatedAt fields on a model
issues.15177 (provider=postgresql, js_pg) should allow CRUD methods on a table column that has a space
issues.15177 (provider=sqlite, js_libsql) should allow CRUD methods on a table column that has a space
issues.15204-conversion-error (provider=sqlite, fieldType=BigInt, js_libsql) should return a descriptive error
issues.15204-conversion-error (provider=sqlite, fieldType=Int, js_libsql) should return a descriptive error
issues.15644-middleware-arg-types (provider=sqlite, js_libsql) middleware with updateMany
issues.15644-middleware-arg-types (provider=sqlite, js_libsql) middleware with upsert
issues.17030-args-type-conflict (provider=sqlite, js_libsql) include works correctly
issues.18276-batch-order (provider=sqlite, js_libsql) executes batch in right order when using delayed middleware
issues.18276-batch-order (provider=sqlite, js_libsql) executes batch queries in the right order when using extensions + middleware
issues.18292-inspect-loop.test (provider=sqlite, js_libsql) depth option is respected
issues.18292-inspect-loop.test (provider=sqlite, js_libsql) result extensions are still logged/inspected correctly
issues.18846-empty-array (provider=postgresql, js_pg) correctly rejects empty arrays in places where empty objects are allowed
issues.18846-empty-array (provider=sqlite, js_libsql) correctly rejects empty arrays in places where empty objects are allowed
issues.19997-select-include-undefined (provider=sqlite, js_libsql) correctly infers selection when passing include: undefined
issues.19997-select-include-undefined (provider=sqlite, js_libsql) correctly infers selection when passing select: undefined
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with a scalar in "by"
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with a scalar in "by" and no other selection
issues.20261-group-by-shortcut (provider=sqlite, js_libsql) works with extended client
issues.20499-result-ext-count (provider=sqlite, js_libsql) result extensions do not break .count
issues.21369-select-null (provider=postgresql, js_pg) SELECT NULL works
issues.21369-select-null (provider=sqlite, js_libsql) SELECT NULL works
issues.21454-$type-in-json (provider=sqlite, js_libsql) preserves deeply nested json with $type key inside
issues.21454-$type-in-json (provider=sqlite, js_libsql) preserves json with $type key inside
issues.21631-batching-in-transaction (provider=postgresql, js_pg) Transactions and batching (query compacting) shouldn't interfere with result sets 2 `findUnique`s in a $transaction
issues.22947-sqlite-conccurrent-upsert (provider=sqlite, js_libsql) concurrent upserts should succeed
issues.23902 (provider=postgresql, js_pg) should not throw error when updating fields on a many to many join table
issues.23902 (provider=sqlite, js_libsql) should not throw error when updating fields on a many to many join table
issues.24835-omit-error.test (provider=sqlite, js_libsql) have omitted field as never
issues.5952-decimal-batch (provider=sqlite, js_libsql) findFirst decimal with $transaction([...])
issues.5952-decimal-batch (provider=sqlite, js_libsql) findFirst decimal with Promise.all
issues.5952-decimal-batch (provider=sqlite, js_libsql) findUnique decimal with $transaction([...])
issues.5952-decimal-batch (provider=sqlite, js_libsql) findUnique decimal with Promise.all
issues.6578 (provider=postgresql, js_pg) should assert Dates, DateTimes, Times and UUIDs are wrapped in quotes and are deserializable
json-fields (provider=sqlite, js_libsql) object with .toJSON method
json-fields (provider=sqlite, js_libsql) simple object
json-null-types (provider=sqlite, js_libsql) nullableJsonField JsonNull
json-null-types (provider=sqlite, js_libsql) requiredJsonField DbNull
json-null-types (provider=sqlite, js_libsql) requiredJsonField JsonNull
logging (provider=sqlite, js_libsql) should log batched queries inside a ITX
logging (provider=sqlite, js_libsql) should log queries inside a ITX
logging (provider=sqlite, js_libsql) should log transaction batched queries
methods.count (provider=sqlite, js_libsql) bad prop
methods.count (provider=sqlite, js_libsql) select all false
methods.count (provider=sqlite, js_libsql) select all true
methods.count (provider=sqlite, js_libsql) select mixed
methods.count (provider=sqlite, js_libsql) select mixed where
methods.count (provider=sqlite, js_libsql) select where
methods.count (provider=sqlite, js_libsql) simple
methods.count (provider=sqlite, js_libsql) take
methods.count (provider=sqlite, js_libsql) where
methods.createMany (provider=sqlite, js_libsql) should create many records
methods.createManyAndReturn-supported (provider=postgresql, js_pg) distinct should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) include _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) orderBy should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) select _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should fail include on the user side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) take should fail
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) distinct should fail
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) include _count should fail
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) orderBy should fail
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) select _count should fail
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) should accept include on the post side
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) should fail include on the user side
methods.createManyAndReturn-supported (provider=sqlite, js_libsql) take should fail
methods.findFirstOrThrow (provider=postgresql, js_pg) finds existing record
methods.findFirstOrThrow (provider=postgresql, js_pg) reports correct method name in case of validation error
methods.findFirstOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) distinct should fail
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) include _count should fail
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) orderBy should fail
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) select _count should fail
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) should accept include on the post side
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) should fail include on the user side
methods.updateManyAndReturn-supported (provider=sqlite, js_libsql) take should fail
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when update arguments do not have any nested queries
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=sqlite, js_libsql) should only use ON CONFLICT when update arguments do not have any nested queries
methods.upsert.native-atomic (provider=sqlite, js_libsql) should perform an upsert using ON CONFLICT with compound id
methods.upsert.native-atomic (provider=sqlite, js_libsql) should perform an upsert using ON CONFLICT with compound uniques
methods.upsert.simple (provider=sqlite, js_libsql) should create a record using upsert
methods.upsert.simple (provider=sqlite, js_libsql) should update a record using upsert
metrics.enabled (provider=sqlite, js_libsql) after a query includes global labels in json format
metrics.enabled (provider=sqlite, js_libsql) after a query includes global labels in prometheus format
metrics.enabled (provider=sqlite, js_libsql) after a query returns metrics in json format
metrics.enabled (provider=sqlite, js_libsql) after a query returns metrics in prometheus format
metrics.enabled (provider=sqlite, js_libsql) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=sqlite, js_libsql) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=sqlite, js_libsql) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=sqlite, js_libsql) multiple instances does not share metrics between 2 different instances of client
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with Prisma.sql instance
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with template string
middleware-raw-args (provider=sqlite, js_libsql) $queryRaw with Prisma.sql instance
middleware-raw-args (provider=sqlite, js_libsql) $queryRaw with template string
multiple-types (provider=sqlite, js_libsql) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=sqlite, js_libsql) Bool field: true or false should succeed
multiple-types (provider=sqlite, js_libsql) String field: true or false as string should succeed
multiple-types (provider=sqlite, js_libsql) a record with all fields set to null should succeed
multiple-types (provider=sqlite, js_libsql) all fields are null
multiple-types (provider=sqlite, js_libsql) shows differences between queryRaw and findMany
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Args, js_libsql) allows to use Args name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Args, js_libsql) allows to use Args name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=At, js_libsql) allows to use At name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=At, js_libsql) allows to use At name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtBasic, js_libsql) allows to use AtBasic name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtBasic, js_libsql) allows to use AtBasic name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtLoose, js_libsql) allows to use AtLoose name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtLoose, js_libsql) allows to use AtLoose name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtStrict, js_libsql) allows to use AtStrict name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=AtStrict, js_libsql) allows to use AtStrict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Batch, js_libsql) allows to use Batch name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Batch, js_libsql) allows to use Batch name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=BatchPayload, js_libsql) allows to use BatchPayload name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=BatchPayload, js_libsql) allows to use BatchPayload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Check, js_libsql) allows to use Check name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Check, js_libsql) allows to use Check name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ComputeRaw, js_libsql) allows to use ComputeRaw name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ComputeRaw, js_libsql) allows to use ComputeRaw name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Datasources, js_libsql) allows to use Datasources name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Datasources, js_libsql) allows to use Datasources name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Enumerable, js_libsql) allows to use Enumerable name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Enumerable, js_libsql) allows to use Enumerable name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ErrorFormat, js_libsql) allows to use ErrorFormat name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ErrorFormat, js_libsql) allows to use ErrorFormat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Exact, js_libsql) allows to use Exact name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Exact, js_libsql) allows to use Exact name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Extends, js_libsql) allows to use Extends name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Extends, js_libsql) allows to use Extends name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Extension, js_libsql) allows to use Extension name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Extension, js_libsql) allows to use Extension name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=False, js_libsql) allows to use False name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=False, js_libsql) allows to use False name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Fetcher, js_libsql) allows to use Fetcher name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Fetcher, js_libsql) allows to use Fetcher name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetEvents, js_libsql) allows to use GetEvents name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetEvents, js_libsql) allows to use GetEvents name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetLogType, js_libsql) allows to use GetLogType name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetLogType, js_libsql) allows to use GetLogType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetScalarType, js_libsql) allows to use GetScalarType name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=GetScalarType, js_libsql) allows to use GetScalarType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Has, js_libsql) allows to use Has name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Has, js_libsql) allows to use Has name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonArray, js_libsql) allows to use InputJsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonArray, js_libsql) allows to use InputJsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonObject, js_libsql) allows to use InputJsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonObject, js_libsql) allows to use InputJsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonValue, js_libsql) allows to use InputJsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=InputJsonValue, js_libsql) allows to use InputJsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=IntFilter, js_libsql) allows to use IntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=IntFilter, js_libsql) allows to use IntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=IntersectOf, js_libsql) allows to use IntersectOf name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=IntersectOf, js_libsql) allows to use IntersectOf name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonArray, js_libsql) allows to use JsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonArray, js_libsql) allows to use JsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonObject, js_libsql) allows to use JsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonObject, js_libsql) allows to use JsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonValue, js_libsql) allows to use JsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=JsonValue, js_libsql) allows to use JsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Key, js_libsql) allows to use Key name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Key, js_libsql) allows to use Key name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Keys, js_libsql) allows to use Keys name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Keys, js_libsql) allows to use Keys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogDefinition, js_libsql) allows to use LogDefinition name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogDefinition, js_libsql) allows to use LogDefinition name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogEvent, js_libsql) allows to use LogEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogEvent, js_libsql) allows to use LogEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogLevel, js_libsql) allows to use LogLevel name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=LogLevel, js_libsql) allows to use LogLevel name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Merge, js_libsql) allows to use Merge name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Merge, js_libsql) allows to use Merge name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Metric, js_libsql) allows to use Metric name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Metric, js_libsql) allows to use Metric name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Middleware, js_libsql) allows to use Middleware name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Middleware, js_libsql) allows to use Middleware name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=MiddlewareParams, js_libsql) allows to use MiddlewareParams name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=MiddlewareParams, js_libsql) allows to use MiddlewareParams name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ModelName, js_libsql) allows to use ModelName name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=ModelName, js_libsql) allows to use ModelName name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Mutation, js_libsql) allows to use Mutation name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Mutation, js_libsql) allows to use Mutation name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=NestedIntFilter, js_libsql) allows to use NestedIntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=NestedIntFilter, js_libsql) allows to use NestedIntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Not, js_libsql) allows to use Not name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Not, js_libsql) allows to use Not name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=OptionalFlat, js_libsql) allows to use OptionalFlat name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=OptionalFlat, js_libsql) allows to use OptionalFlat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Or, js_libsql) allows to use Or name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Or, js_libsql) allows to use Or name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Overwrite, js_libsql) allows to use Overwrite name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Overwrite, js_libsql) allows to use Overwrite name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Payload, js_libsql) allows to use Payload name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Payload, js_libsql) allows to use Payload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PrismaAction, js_libsql) allows to use PrismaAction name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PrismaAction, js_libsql) allows to use PrismaAction name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Promise, js_libsql) allows to use Promise name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Promise, js_libsql) allows to use Promise name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PromiseReturnType, js_libsql) allows to use PromiseReturnType name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PromiseReturnType, js_libsql) allows to use PromiseReturnType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PromiseType, js_libsql) allows to use PromiseType name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=PromiseType, js_libsql) allows to use PromiseType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Query, js_libsql) allows to use Query name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Query, js_libsql) allows to use Query name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=QueryEvent, js_libsql) allows to use QueryEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=QueryEvent, js_libsql) allows to use QueryEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=RequiredKeys, js_libsql) allows to use RequiredKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=RequiredKeys, js_libsql) allows to use RequiredKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Result, js_libsql) allows to use Result name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Result, js_libsql) allows to use Result name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SelectSubset, js_libsql) allows to use SelectSubset name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SelectSubset, js_libsql) allows to use SelectSubset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SortOrder, js_libsql) allows to use SortOrder name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SortOrder, js_libsql) allows to use SortOrder name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Strict, js_libsql) allows to use Strict name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Strict, js_libsql) allows to use Strict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Subset, js_libsql) allows to use Subset name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Subset, js_libsql) allows to use Subset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SubsetIntersection, js_libsql) allows to use SubsetIntersection name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=SubsetIntersection, js_libsql) allows to use SubsetIntersection name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TransactionClient, js_libsql) allows to use TransactionClient name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TransactionClient, js_libsql) allows to use TransactionClient name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=True, js_libsql) allows to use True name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=True, js_libsql) allows to use True name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TrueKeys, js_libsql) allows to use TrueKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TrueKeys, js_libsql) allows to use TrueKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TruthyKeys, js_libsql) allows to use TruthyKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TruthyKeys, js_libsql) allows to use TruthyKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TypeMap, js_libsql) allows to use TypeMap name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TypeMap, js_libsql) allows to use TypeMap name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TypeMapCb, js_libsql) allows to use TypeMapCb name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=TypeMapCb, js_libsql) allows to use TypeMapCb name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=UnEnumerate, js_libsql) allows to use UnEnumerate name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=UnEnumerate, js_libsql) allows to use UnEnumerate name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Union, js_libsql) allows to use Union name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Union, js_libsql) allows to use Union name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Without, js_libsql) allows to use Without name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=Without, js_libsql) allows to use Without name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=constructor, js_libsql) allows to use constructor name for a model name
naming-conflict.built-in-types-vs-model (provider=sqlite, typeName=constructor, js_libsql) allows to use constructor name for a model name (relation)
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelAggregate, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelCount, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelDefault, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelDelete, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelFieldRefs, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelGroupBy, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelInclude, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelPayload, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelResult, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelSelect, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelUpdate, js_libsql) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=sqlite, conflictingModel=ModelUpsert, js_libsql) allows to use models of conflicting names
omit.test (provider=sqlite, js_libsql) excluding all fields of a model throws validation error
omit.test (provider=sqlite, js_libsql) excluding dependency of a computed field
omit.test (provider=sqlite, js_libsql) false value
omit.test (provider=sqlite, js_libsql) findFirst
omit.test (provider=sqlite, js_libsql) findFirstOrThrow
omit.test (provider=sqlite, js_libsql) non-existing false field in omit throw validation error
omit.test (provider=sqlite, js_libsql) non-existing true field in omit throw validation error
omit.test (provider=sqlite, js_libsql) omit combined with include
omit.test (provider=sqlite, js_libsql) omit nested in include
omit.test (provider=sqlite, js_libsql) omit nested in select
omit.test (provider=sqlite, js_libsql) upsert
optimistic-concurrency-control (provider=sqlite, js_libsql) update
optimistic-concurrency-control (provider=sqlite, js_libsql) update with upsert relation
optimistic-concurrency-control (provider=sqlite, js_libsql) updateMany
optimistic-concurrency-control (provider=sqlite, js_libsql) upsert
prisma-promise (provider=sqlite, js_libsql) $queryRaw fluent promises should have promise properties
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .catch
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .finally
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated calls to .then
prisma-promise (provider=sqlite, js_libsql) $queryRaw repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe fluent promises should have promise properties
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .catch
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .finally
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated calls to .then
prisma-promise (provider=sqlite, js_libsql) $queryRawUnsafe repeated mixed calls to .then, .catch, .finally
query-error-logging (provider=sqlite, js_libsql) findFirstOrThrow when error thrown
query-error-logging (provider=sqlite, js_libsql) findUniqueOrThrown when error thrown
query-error-logging (provider=sqlite, js_libsql) middleware captures errors
query-validation (provider=sqlite, previewFeatures=, js_libsql) empty selection
query-validation (provider=sqlite, previewFeatures=, js_libsql) invalid argument type
query-validation (provider=sqlite, previewFeatures=, js_libsql) invalid argument value
query-validation (provider=sqlite, previewFeatures=, js_libsql) invalid field ref
query-validation (provider=sqlite, previewFeatures=, js_libsql) missing one of the specific required fields
query-validation (provider=sqlite, previewFeatures=, js_libsql) missing required argument: nested
query-validation (provider=sqlite, previewFeatures=, js_libsql) union error
query-validation (provider=sqlite, previewFeatures=, js_libsql) union error: different paths
query-validation (provider=sqlite, previewFeatures=, js_libsql) union error: invalid argument type vs required argument missing
query-validation (provider=sqlite, previewFeatures=, js_libsql) unknown argument
query-validation (provider=sqlite, previewFeatures=, js_libsql) unknown object field
query-validation (provider=sqlite, previewFeatures=, js_libsql) unknown selection field
raw-queries.send-type-hints (provider=sqlite, js_libsql) Uint8Array ($executeRaw + Prisma.sql)
raw-queries.send-type-hints (provider=sqlite, js_libsql) Uint8Array ($executeRaw)
raw-queries.send-type-hints (provider=sqlite, js_libsql) Uint8Array ($queryRaw + Prisma.sql)
raw-queries.send-type-hints (provider=sqlite, js_libsql) Uint8Array ($queryRaw)
raw-queries.typed-results (provider=sqlite, js_libsql) query model with a BigInt = -2147483647 (-i32)
raw-queries.typed-results (provider=sqlite, js_libsql) query model with a BigInt = -MAX_SAFE_INTEGER
raw-queries.typed-results (provider=sqlite, js_libsql) query model with a BigInt = 2147483647 (i32)
raw-queries.typed-results (provider=sqlite, js_libsql) query model with a BigInt = MAX_SAFE_INTEGER
raw-queries.typed-results (provider=sqlite, js_libsql) query model with multiple types
raw-queries.typed-results (provider=sqlite, js_libsql) simple expression
raw-queries.typed-results (provider=sqlite, js_libsql) when BigInt value is not a safe integer query model with a BigInt = MAX_SAFE_INTEGER + MAX_SAFE_INTEGER BigInt is natively supported
raw-queries.typed-results-advanced-and-native-types (provider=postgresql, js_pg) query model with multiple fields
referentialActions-setDefault.tests_1-to-1 (provider=sqlite, js_libsql) 1:n mandatory (explicit) [create] [create] creating a table with SetDefault is accepted
referentialActions-setDefault.tests_1-to-1 (provider=sqlite, js_libsql) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in profile, which throws
referentialActions-setDefault.tests_1-to-1 (provider=sqlite, js_libsql) 1:n mandatory (explicit) [delete] without mysql [delete] deleting existing user one triggers SetDefault
referentialActions-setDefault.tests_1-to-1 (provider=sqlite, js_libsql) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in profile, which throws
referentialActions-setDefault.tests_1-to-1 (provider=sqlite, js_libsql) 1:n mandatory (explicit) [update] without mysql [update] changing existing user id to a new one triggers SetDefault
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=sqlite, js_libsql) 1:n mandatory (explicit) [create] [create] creating a table with SetDefault is accepted
referentialActions-setDefault.tests_1-to-n (provider=sqlite, js_libsql) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=sqlite, js_libsql) 1:n mandatory (explicit) [delete] without mysql [delete] deleting existing user one triggers SetDefault
referentialActions-setDefault.tests_1-to-n (provider=sqlite, js_libsql) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=sqlite, js_libsql) 1:n mandatory (explicit) [update] without mysql [update] changing existing user id to a new one triggers SetDefault
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature aggregate
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature count
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature create
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature delete
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature deleteMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature findFirst
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature findFirstOrThrow
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature findMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature findUnique
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature findUniqueOrThrow
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature groupBy
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature update
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature updateMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=sqlite, js_libsql) relationLoadStrategy with no relationJoins preview feature upsert
runtime-import (provider=postgresql, js_pg) imported files have the expected annotations
runtime-import (provider=postgresql, js_pg) imports correct runtime
skip.test (provider=sqlite, js_libsql) after extension skips fields in omit
skip.test (provider=sqlite, js_libsql) skips fields in omit
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) xml - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) BigInt - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) BigInt - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) DateTime - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) DateTime - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) Decimal - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) Decimal - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) bytes - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) bytes - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) double - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) double - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) forced nullable column
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) forced nullable param
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) int - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) int - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) json - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) json - output
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) string - input
typed-sql.sqlite-scalars-nullable.test (provider=sqlite, js_libsql) string - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) BigInt - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) BigInt - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) DateTime - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) DateTime - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) Decimal - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) Decimal - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) bytes - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) bytes - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) double - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) double - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) int - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) int - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) json - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) json - output
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) string - input
typed-sql.sqlite-scalars.test (provider=sqlite, js_libsql) string - output
unsupported-action (provider=sqlite, js_libsql) unsupported method
upsert-relation-mode-prisma.test (provider=sqlite, js_libsql) calling upsert two times in a row does nothing
views (provider=sqlite, js_libsql) should query views with a related column
views (provider=sqlite, js_libsql) should simple query a view
