// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;
