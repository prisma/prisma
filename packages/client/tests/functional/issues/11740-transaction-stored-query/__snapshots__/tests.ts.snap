// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`issues.11740-transaction-stored-query (provider=mysql,providerFlavor=js_planetscale) stored query trigger .requestTransaction twice should fail 1`] = `target: tests.0.primary: vttablet: rpc error: code = AlreadyExists desc = Duplicate entry 'john@prisma.io' for key 'Resource.Resource_email_key' (errno 1062) (sqlstate 23000) (CallerID: userData1): Sql: "insert into Resource(id, email) values (:vtg1 /* VARCHAR */, :vtg2 /* VARCHAR */)", BindVars: {vtg1: "type:VARCHAR value:\\"clm0kb3xt00034phf74f9qk3j\\""vtg2: "type:VARCHAR value:\\"john@prisma.io\\""} (errno 1062) (sqlstate 23000) during query: INSERT INTO \`tests\`.\`Resource\` (\`id\`,\`email\`) VALUES ('clm0kb3xt00034phf74f9qk3j','john@prisma.io')`;

exports[`issues.11740-transaction-stored-query (provider=mysql,providerFlavor=js_planetscale) stored query triggered twice should fail but not exit process 1`] = `target: tests.0.primary: vttablet: rpc error: code = AlreadyExists desc = Duplicate entry 'john@prisma.io' for key 'Resource.Resource_email_key' (errno 1062) (sqlstate 23000) (CallerID: userData1): Sql: "insert into Resource(id, email) values (:vtg1 /* VARCHAR */, :vtg2 /* VARCHAR */)", BindVars: {vtg1: "type:VARCHAR value:\\"clm0kb3ut00014phf7v3029z0\\""vtg2: "type:VARCHAR value:\\"john@prisma.io\\""} (errno 1062) (sqlstate 23000) during query: INSERT INTO \`tests\`.\`Resource\` (\`id\`,\`email\`) VALUES ('clm0kb3ut00014phf7v3029z0','john@prisma.io')`;

exports[`issues.11740-transaction-stored-query (provider=mysql,providerFlavor=vitess_8) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the (not available)
`;

exports[`issues.11740-transaction-stored-query (provider=mysql,providerFlavor=vitess_8) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the (not available)
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query trigger .requestTransaction twice should fail',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testIf(process.env.PRISMA_CLIENT_ENGINE_TYPE !== 'binary')(
  XX   'stored query triggered twice should fail but not exit process',
  XX   async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;
