// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=cockroachdb) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`"
`;

exports[`issues.11740-transaction-stored-query (provider=mongodb) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`"
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`"
`;

exports[`issues.11740-transaction-stored-query (provider=mysql) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`"
`;

exports[`issues.11740-transaction-stored-query (provider=mysql, js_planetscale) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the (not available)"
`;

exports[`issues.11740-transaction-stored-query (provider=mysql, js_planetscale) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the (not available)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql, js_neon) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql, js_neon) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql, js_pg) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=postgresql, js_pg) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite, js_d1) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`UNIQUE constraint failed\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite, js_d1) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`UNIQUE constraint failed\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite, js_libsql) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlite, js_libsql) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query trigger .requestTransaction twice should fail 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX testIf(engineType !== 'binary')('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`"
`;

exports[`issues.11740-transaction-stored-query (provider=sqlserver) stored query triggered twice should fail but not exit process 1`] = `
"
Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/issues/11740-transaction-stored-query/tests.ts:0:0

  XX testMatrix.setupTestSuite(
  XX   ({ engineType }) => {
  XX     testIf(engineType !== 'binary')('stored query triggered twice should fail but not exit process', async () => {
→ XX       const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`"
`;
