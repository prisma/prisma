_example (provider=mysql, previewFeatures=relationJoins, js_planetscale) findMany
0-legacy-ports.aggregations (provider=mysql, js_planetscale) avg
0-legacy-ports.aggregations (provider=mysql, js_planetscale) count inline boolean
0-legacy-ports.aggregations (provider=mysql, js_planetscale) count with _all
0-legacy-ports.aggregations (provider=mysql, js_planetscale) invalid avg
0-legacy-ports.aggregations (provider=mysql, js_planetscale) invalid count
0-legacy-ports.aggregations (provider=mysql, js_planetscale) invalid max
0-legacy-ports.aggregations (provider=mysql, js_planetscale) invalid min
0-legacy-ports.aggregations (provider=mysql, js_planetscale) invalid sum
0-legacy-ports.aggregations (provider=mysql, js_planetscale) max
0-legacy-ports.aggregations (provider=mysql, js_planetscale) min
0-legacy-ports.aggregations (provider=mysql, js_planetscale) multiple aggregations
0-legacy-ports.aggregations (provider=mysql, js_planetscale) multiple aggregations with where
0-legacy-ports.aggregations (provider=mysql, js_planetscale) sum
0-legacy-ports.atomic-increment-decrement (provider=mysql, js_planetscale) atomic decrement
0-legacy-ports.atomic-increment-decrement (provider=mysql, js_planetscale) atomic decrement with negative
0-legacy-ports.atomic-increment-decrement (provider=mysql, js_planetscale) atomic increment
0-legacy-ports.atomic-increment-decrement (provider=mysql, js_planetscale) atomic increment with negative value
0-legacy-ports.batch-find-unique (provider=mysql, js_planetscale) findUnique batching
0-legacy-ports.execute-raw (provider=mysql, js_planetscale) update via executeRaw
0-legacy-ports.execute-raw (provider=mysql, js_planetscale) update via executeRaw using Prisma.join
0-legacy-ports.execute-raw (provider=mysql, js_planetscale) update via executeRaw using Prisma.join and Prisma.sql
0-legacy-ports.execute-raw (provider=mysql, js_planetscale) update via executeRawUnsafe
0-legacy-ports.execute-raw (provider=mysql, js_planetscale) update via queryRawUnsafe with values
0-legacy-ports.json (provider=mysql, js_planetscale) create required json
0-legacy-ports.json (provider=mysql, js_planetscale) select required json
0-legacy-ports.json (provider=mysql, js_planetscale) select required json with where equals
0-legacy-ports.json (provider=mysql, js_planetscale) select required json with where path
0-legacy-ports.json (provider=mysql, js_planetscale) update required json with where equals
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter empty optional relation
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter empty optional relation with 
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter empty optional relation with `null`
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter existing optional relation with `isNot: null`
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter existing optional relation with empty field
0-legacy-ports.optional-relation-filters (provider=mysql, js_planetscale) filter existing optional relation with existing field
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select * via queryRaw
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select * via queryRawUnsafe
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select * via queryRawUnsafe with values
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select 1 via queryRaw
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select 1 via queryRawUnsafe
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select fields via queryRaw using Prisma.join
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select fields via queryRaw using Prisma.join and Prisma.sql
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select values via queryRawUnsafe
0-legacy-ports.query-raw (provider=mysql, js_planetscale) select with alias via queryRaw
batching (provider=mysql, js_planetscale) batches findUnique
batching (provider=mysql, js_planetscale) batches findUnique with re-ordered selection
batching (provider=mysql, js_planetscale) batches findUniqueOrThrow
batching (provider=mysql, js_planetscale) batches findUniqueOrThrow with an error
batching (provider=mysql, js_planetscale) batches repeated findUnique for the same row correctly
batching (provider=mysql, js_planetscale) does not batch different models
batching (provider=mysql, js_planetscale) does not batch different select
batching (provider=mysql, js_planetscale) does not batch different where
batching-bigint (provider=mysql, js_planetscale) findFirst bigint with $transaction([...])
batching-relation (provider=mysql, js_planetscale) batches findUnique that includes a relation
batching-relation (provider=mysql, js_planetscale) batches findUniqueOrThrow that includes a relation with an error
batching-relation (provider=mysql, js_planetscale) does not batch findFirst that includes a relation
blog-update (provider=mysql, js_planetscale) should create a user and post and connect them together
blog-update (provider=mysql, js_planetscale) should create a user and post and disconnect them
blog-update (provider=mysql, js_planetscale) should create a user and update that field on that user
blog-update (provider=mysql, js_planetscale) should create a user with posts and a profile and update itself and nested connections setting fields to null
create-default-date.test (provider=mysql, js_planetscale) correctly creates a field with default date
decimal.precision (provider=mysql, precision=10, js_planetscale) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=mysql, precision=20, js_planetscale) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=mysql, precision=38, js_planetscale) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=mysql, precision=65, js_planetscale) decimals should not lose precision when written to db (with seed=XXXX)
decimal.scalar (provider=mysql, js_planetscale) possible inputs decimal as Decimal.js instance
decimal.scalar (provider=mysql, js_planetscale) possible inputs decimal as decimal.js-like object
decimal.scalar (provider=mysql, js_planetscale) possible inputs decimal as number
decimal.scalar (provider=mysql, js_planetscale) possible inputs decimal as string
default-selection (provider=mysql, js_planetscale) does not include relations
default-selection (provider=mysql, js_planetscale) includes enums
default-selection (provider=mysql, js_planetscale) includes scalars
distinct (provider=mysql, js_planetscale) distinct on firstName
distinct (provider=mysql, js_planetscale) distinct on firstName and firstName
distinct (provider=mysql, js_planetscale) distinct on firstName and id
distinct (provider=mysql, js_planetscale) distinct on firstName and lastName
distinct (provider=mysql, js_planetscale) distinct on id
distinct (provider=mysql, js_planetscale) distinct on id and firstName
distinct (provider=mysql, js_planetscale) distinct on id and firstName and lastName
distinct (provider=mysql, js_planetscale) distinct on id and firstName shortcut
distinct (provider=mysql, js_planetscale) distinct on id and lastName
distinct (provider=mysql, js_planetscale) distinct on id shortcut
driver-adapters.team-orm-687-bytes (provider=mysql, js_planetscale) Bytes encoding is preserved
enums (provider=mysql, js_planetscale) can create data with an enum value
enums (provider=mysql, js_planetscale) can retrieve data with an enum value
extended-where.aggregate (provider=mysql, js_planetscale) aggregate with cursor 1 unique (PK)
extended-where.aggregate (provider=mysql, js_planetscale) aggregate with cursor 2 uniques (PK & non-PK)
extended-where.aggregate (provider=mysql, js_planetscale) update with where 1 unique (non-PK)
extended-where.create (provider=mysql, js_planetscale) create with connect 1 unique (non-PK)
extended-where.create (provider=mysql, js_planetscale) create with connect 1 unique (PK)
extended-where.create (provider=mysql, js_planetscale) create with connect 2 uniques (PK & non-PK)
extended-where.delete (provider=mysql, js_planetscale) delete with where 1 unique (non-PK)
extended-where.delete (provider=mysql, js_planetscale) delete with where 1 unique (PK)
extended-where.delete (provider=mysql, js_planetscale) delete with where 2 uniques (PK & non-PK)
extended-where.findFirst (provider=mysql, js_planetscale) findFirst with cursor 1 unique (non-PK)
extended-where.findFirst (provider=mysql, js_planetscale) findFirst with cursor 1 unique (PK)
extended-where.findFirst (provider=mysql, js_planetscale) findFirst with cursor 2 uniques (PK & non-PK)
extended-where.findFirstOrThrow (provider=mysql, js_planetscale) findFirstOrThrow with cursor 1 unique (non-PK)
extended-where.findFirstOrThrow (provider=mysql, js_planetscale) findFirstOrThrow with cursor 1 unique (PK)
extended-where.findFirstOrThrow (provider=mysql, js_planetscale) findFirstOrThrow with cursor 2 uniques (PK & non-PK)
extended-where.findMany (provider=mysql, js_planetscale) findMany with cursor 1 unique (non-PK)
extended-where.findMany (provider=mysql, js_planetscale) findMany with cursor 1 unique (PK)
extended-where.findMany (provider=mysql, js_planetscale) findMany with cursor 2 uniques (PK & non-PK)
extended-where.findUnique (provider=mysql, js_planetscale) findUnique with nested where on optional 1:1 found
extended-where.findUnique (provider=mysql, js_planetscale) findUnique with nested where on optional 1:1 not found
extended-where.findUnique (provider=mysql, js_planetscale) findUnique with where 1 unique (non-PK)
extended-where.findUnique (provider=mysql, js_planetscale) findUnique with where 1 unique (PK)
extended-where.findUnique (provider=mysql, js_planetscale) findUnique with where 2 uniques (PK & non-PK)
extended-where.findUniqueOrThrow (provider=mysql, js_planetscale) findUniqueOrThrow with where 1 unique (PK)
extended-where.findUniqueOrThrow (provider=mysql, js_planetscale) findUniqueOrThrow with where 2 uniques (PK & non-PK)
extended-where.findUniqueOrThrow (provider=mysql, js_planetscale) finUniqueOrThrow with where 1 unique (non-PK)
extended-where.update (provider=mysql, js_planetscale) update with where 1 unique (non-PK)
extended-where.update (provider=mysql, js_planetscale) update with where 1 unique (PK)
extended-where.update (provider=mysql, js_planetscale) update with where 2 uniques (PK & non-PK)
extended-where.upsert (provider=mysql, js_planetscale) upsert with where 1 unique (non-PK)
extended-where.upsert (provider=mysql, js_planetscale) upsert with where 1 unique (PK)
extended-where.upsert (provider=mysql, js_planetscale) upsert with where 2 uniques (PK & non-PK)
extensions.itx (provider=mysql, js_planetscale) client component is available within itx callback
extensions.itx (provider=mysql, js_planetscale) client is extended in itx
extensions.itx (provider=mysql, js_planetscale) extended client in itx can rollback via custom call
extensions.itx (provider=mysql, js_planetscale) extended client in itx can rollback via normal call
extensions.itx (provider=mysql, js_planetscale) extended client in itx works via custom call
extensions.itx (provider=mysql, js_planetscale) extended client in itx works via normal call
extensions.itx (provider=mysql, js_planetscale) isolation level is properly reflected in extended client
extensions.itx (provider=mysql, js_planetscale) itx works with extended client + queryRawUnsafe
extensions.itx (provider=mysql, js_planetscale) methods from itx client denylist are optional within client extensions
extensions.itx (provider=mysql, js_planetscale) middleware exclude from transaction also works with extended client
extensions.model (provider=mysql, js_planetscale) batching of PrismaPromise returning custom model methods
extensions.model (provider=mysql, js_planetscale) batching of PrismaPromise returning custom model methods and query
extensions.pdp (provider=mysql, js_planetscale) _runtimeDataModel is available on the client instance and provides model info
extensions.query (provider=mysql, js_planetscale) arg types and return types are correct
extensions.query (provider=mysql, js_planetscale) args mutation accumulation
extensions.query (provider=mysql, js_planetscale) args mutation isolation
extensions.query (provider=mysql, js_planetscale) empty args becomes an empty object
extensions.query (provider=mysql, js_planetscale) errors in callback
extensions.query (provider=mysql, js_planetscale) errors in with no extension name
extensions.query (provider=mysql, js_planetscale) extending a specific model query
extensions.query (provider=mysql, js_planetscale) extending with $allModels and $allOperations
extensions.query (provider=mysql, js_planetscale) extending with $allModels and a specific query
extensions.query (provider=mysql, js_planetscale) extending with $allModels and another $allModels
extensions.query (provider=mysql, js_planetscale) extending with $allModels.$allOperations and a top-level query
extensions.query (provider=mysql, js_planetscale) extending with specific model and $allOperations
extensions.query (provider=mysql, js_planetscale) extending with top-level $allOperations
extensions.query (provider=mysql, js_planetscale) passing incorrect argument errors
extensions.query (provider=mysql, js_planetscale) query result mutation with a simple call
extensions.query (provider=mysql, js_planetscale) query result mutation with multiple calls
extensions.query (provider=mysql, js_planetscale) query result mutations with batch transactions
extensions.query (provider=mysql, js_planetscale) query result override with a simple call
extensions.query (provider=mysql, js_planetscale) query result override with extra extension after
extensions.query (provider=mysql, js_planetscale) query result override with extra extension before
extensions.query (provider=mysql, js_planetscale) result extensions are applied after query extension
extensions.query (provider=mysql, js_planetscale) top to bottom execution order
extensions.query (provider=mysql, js_planetscale) top-level raw queries interception
extensions.query (provider=mysql, js_planetscale) transforming a simple query into a batch transaction
extensions.query (provider=mysql, js_planetscale) unions can be properly discriminated
extensions.result (provider=mysql, js_planetscale) create
extensions.result (provider=mysql, js_planetscale) dependencies between computed fields
extensions.result (provider=mysql, js_planetscale) empty extension does nothing
extensions.result (provider=mysql, js_planetscale) error in computed field
extensions.result (provider=mysql, js_planetscale) error in computed field with no name
extensions.result (provider=mysql, js_planetscale) findFirst
extensions.result (provider=mysql, js_planetscale) findFirst using $allModels
extensions.result (provider=mysql, js_planetscale) findMany
extensions.result (provider=mysql, js_planetscale) findUnique
extensions.result (provider=mysql, js_planetscale) nested includes should include scalars and relations
extensions.result (provider=mysql, js_planetscale) relationships: mixed include and select
extensions.result (provider=mysql, js_planetscale) relationships: with deep select
extensions.result (provider=mysql, js_planetscale) relationships: with include
extensions.result (provider=mysql, js_planetscale) relationships: with select
extensions.result (provider=mysql, js_planetscale) shadowing dependency
extensions.result (provider=mysql, js_planetscale) shadowing dependency multiple times
extensions.result (provider=mysql, js_planetscale) update
extensions.result (provider=mysql, js_planetscale) upsert - create
extensions.result (provider=mysql, js_planetscale) upsert - update
extensions.result (provider=mysql, js_planetscale) when any type is passed as an input default selection type is returned
extensions.result (provider=mysql, js_planetscale) when args have both include and select and one of them is optional, result includes both
extensions.result (provider=mysql, js_planetscale) when using select
extensions.result (provider=mysql, js_planetscale) when using select and $allModels
extensions.result (provider=mysql, js_planetscale) with null result
extensions.tx (provider=mysql, js_planetscale) extended client in tx can rollback via custom call
extensions.tx (provider=mysql, js_planetscale) extended client in tx can rollback via normal call
extensions.tx (provider=mysql, js_planetscale) extended client in tx works via custom call
extensions.tx (provider=mysql, js_planetscale) extended client in tx works via normal call
extensions.tx (provider=mysql, js_planetscale) isolation level is properly reflected in extended client
extensions.tx (provider=mysql, js_planetscale) type inference allows for destructuring the array
field-reference.enum (provider=mysql, js_planetscale) simple enum equality
field-reference.enum (provider=mysql, js_planetscale) via extended client
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) aggregate
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) multiple condition
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) relationship
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) single condition
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) via extended client
field-reference.numeric (provider=mysql, fieldType=BigInt, js_planetscale) wrong column numeric type
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) aggregate
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) multiple condition
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) relationship
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) single condition
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) via extended client
field-reference.numeric (provider=mysql, fieldType=Float, js_planetscale) wrong column numeric type
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) aggregate
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) multiple condition
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) relationship
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) single condition
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) via extended client
field-reference.numeric (provider=mysql, fieldType=Int, js_planetscale) wrong column numeric type
field-reference.string (provider=mysql, js_planetscale) advanced filter
field-reference.string (provider=mysql, js_planetscale) simple equality
field-reference.string (provider=mysql, js_planetscale) wrong field type
field-reference.string (provider=mysql, js_planetscale) wrong identical model
field-reference.string (provider=mysql, js_planetscale) wrong model
filter-count-relations (provider=mysql, js_planetscale) many-to-many with > condition
filter-count-relations (provider=mysql, js_planetscale) many-to-many with multiple conditions
filter-count-relations (provider=mysql, js_planetscale) many-to-many with simple equality condition
filter-count-relations (provider=mysql, js_planetscale) nested relation
filter-count-relations (provider=mysql, js_planetscale) one-to-many with > condition
filter-count-relations (provider=mysql, js_planetscale) one-to-many with multiple conditions
filter-count-relations (provider=mysql, js_planetscale) one-to-many with simple equality condition
filter-count-relations (provider=mysql, js_planetscale) without condition
find-unique-or-throw-batching (provider=mysql, js_planetscale) batched errors are when all objects in batch are found
find-unique-or-throw-batching (provider=mysql, js_planetscale) batched errors when some of the objects not found
fluent-api (provider=mysql, js_planetscale) extended client chaining and selecting
fluent-api (provider=mysql, js_planetscale) extended client chaining and selecting twice
fluent-api (provider=mysql, js_planetscale) extended client create
fluent-api (provider=mysql, js_planetscale) extended client delete
fluent-api (provider=mysql, js_planetscale) extended client findFirst
fluent-api (provider=mysql, js_planetscale) extended client findFirstOrThrow
fluent-api (provider=mysql, js_planetscale) extended client findFirstOrThrow where nested entity is not found
fluent-api (provider=mysql, js_planetscale) extended client findFirstOrThrow with required to-one relation
fluent-api (provider=mysql, js_planetscale) extended client findFirstOrThrow with required to-one relation circling back to optional relation
fluent-api (provider=mysql, js_planetscale) extended client findUniqueOrThrow
fluent-api (provider=mysql, js_planetscale) extended client findUniqueOrThrow where nested entity is not found
fluent-api (provider=mysql, js_planetscale) extended client findUniqueOrThrow with required to-one relation
fluent-api (provider=mysql, js_planetscale) extended client findUniqueOrThrow with required to-one relation circling back to optional relation
fluent-api (provider=mysql, js_planetscale) extended client lower-cased relations
fluent-api (provider=mysql, js_planetscale) extended client update
fluent-api (provider=mysql, js_planetscale) extended client upper-cased relations
fluent-api (provider=mysql, js_planetscale) extended client upsert
fluent-api (provider=mysql, js_planetscale) regular client chaining and selecting
fluent-api (provider=mysql, js_planetscale) regular client chaining and selecting twice
fluent-api (provider=mysql, js_planetscale) regular client create
fluent-api (provider=mysql, js_planetscale) regular client delete
fluent-api (provider=mysql, js_planetscale) regular client findFirst
fluent-api (provider=mysql, js_planetscale) regular client findFirstOrThrow
fluent-api (provider=mysql, js_planetscale) regular client findFirstOrThrow where nested entity is not found
fluent-api (provider=mysql, js_planetscale) regular client findUniqueOrThrow
fluent-api (provider=mysql, js_planetscale) regular client findUniqueOrThrow where nested entity is not found
fluent-api (provider=mysql, js_planetscale) regular client lower-cased relations
fluent-api (provider=mysql, js_planetscale) regular client update
fluent-api (provider=mysql, js_planetscale) regular client upper-cased relations
fluent-api (provider=mysql, js_planetscale) regular client upsert
fluent-api-null (provider=mysql, js_planetscale) extended client create
fluent-api-null (provider=mysql, js_planetscale) extended client create with include
fluent-api-null (provider=mysql, js_planetscale) extended client create with select
fluent-api-null (provider=mysql, js_planetscale) extended client update
fluent-api-null (provider=mysql, js_planetscale) extended client update with include
fluent-api-null (provider=mysql, js_planetscale) extended client update with select
fluent-api-null (provider=mysql, js_planetscale) extended client upsert
fluent-api-null (provider=mysql, js_planetscale) extended client upsert with include
fluent-api-null (provider=mysql, js_planetscale) extended client upsert with select
fluent-api-null (provider=mysql, js_planetscale) regular client create
fluent-api-null (provider=mysql, js_planetscale) regular client create with include
fluent-api-null (provider=mysql, js_planetscale) regular client create with select
fluent-api-null (provider=mysql, js_planetscale) regular client update
fluent-api-null (provider=mysql, js_planetscale) regular client update with include
fluent-api-null (provider=mysql, js_planetscale) regular client update with select
fluent-api-null (provider=mysql, js_planetscale) regular client upsert
fluent-api-null (provider=mysql, js_planetscale) regular client upsert with include
fluent-api-null (provider=mysql, js_planetscale) regular client upsert with select
fulltext-search (provider=mysql, js_planetscale) bad query
globalOmit.test (provider=mysql, js_planetscale) aggregate does not crash
globalOmit.test (provider=mysql, js_planetscale) allows to include globally omitted field with omit: false
globalOmit.test (provider=mysql, js_planetscale) allows to include globally omitted field with select: true
globalOmit.test (provider=mysql, js_planetscale) count does not crash
globalOmit.test (provider=mysql, js_planetscale) create
globalOmit.test (provider=mysql, js_planetscale) createMany does not crash
globalOmit.test (provider=mysql, js_planetscale) delete
globalOmit.test (provider=mysql, js_planetscale) deleteMany does not crash
globalOmit.test (provider=mysql, js_planetscale) excluding more than one field at a time
globalOmit.test (provider=mysql, js_planetscale) findFirst
globalOmit.test (provider=mysql, js_planetscale) findFirstOrThrow
globalOmit.test (provider=mysql, js_planetscale) findMany
globalOmit.test (provider=mysql, js_planetscale) findUnique
globalOmit.test (provider=mysql, js_planetscale) findUniqueOrThrow
globalOmit.test (provider=mysql, js_planetscale) groupBy does not crash
globalOmit.test (provider=mysql, js_planetscale) omitting every field
globalOmit.test (provider=mysql, js_planetscale) throws if non boolean field is used in omit
globalOmit.test (provider=mysql, js_planetscale) throws if omit is not an object
globalOmit.test (provider=mysql, js_planetscale) throws if omit is null
globalOmit.test (provider=mysql, js_planetscale) throws if relation field is used in omit
globalOmit.test (provider=mysql, js_planetscale) throws if unknown field is mentioned in omit
globalOmit.test (provider=mysql, js_planetscale) throws if unknown model is mentioned in omit
globalOmit.test (provider=mysql, js_planetscale) update
globalOmit.test (provider=mysql, js_planetscale) updateMany does not crash
globalOmit.test (provider=mysql, js_planetscale) upsert
globalOmit.test (provider=mysql, js_planetscale) works after extending the client
globalOmit.test (provider=mysql, js_planetscale) works for fluent api
globalOmit.test (provider=mysql, js_planetscale) works for nested relations (include)
globalOmit.test (provider=mysql, js_planetscale) works for nested relations (select)
globalOmit.test (provider=mysql, js_planetscale) works with fluent api after extending the client
globalOmit.test (provider=mysql, js_planetscale) works with result extension, depending on explicitly omitted field
interactive-transactions (provider=mysql, js_planetscale) basic
interactive-transactions (provider=mysql, js_planetscale) batching
interactive-transactions (provider=mysql, js_planetscale) batching raw rollback
interactive-transactions (provider=mysql, js_planetscale) batching rollback
interactive-transactions (provider=mysql, js_planetscale) batching rollback within callback
interactive-transactions (provider=mysql, js_planetscale) concurrent
interactive-transactions (provider=mysql, js_planetscale) high concurrency with no conflicts
interactive-transactions (provider=mysql, js_planetscale) isolation levels read committed
interactive-transactions (provider=mysql, js_planetscale) isolation levels read uncommitted
interactive-transactions (provider=mysql, js_planetscale) isolation levels repeatable read
interactive-transactions (provider=mysql, js_planetscale) isolation levels serializable
interactive-transactions (provider=mysql, js_planetscale) middlewares middleware basic
interactive-transactions (provider=mysql, js_planetscale) middlewares middleware exclude from transaction
interactive-transactions (provider=mysql, js_planetscale) middlewares middlewares batching
interactive-transactions (provider=mysql, js_planetscale) rollback query
interactive-transactions (provider=mysql, js_planetscale) rollback throw
interactive-transactions (provider=mysql, js_planetscale) rollback throw value
interactive-transactions (provider=mysql, js_planetscale) rollback with catch calls
interactive-transactions (provider=mysql, js_planetscale) rollback with finally calls
interactive-transactions (provider=mysql, js_planetscale) rollback with then calls
interactive-transactions (provider=mysql, js_planetscale) timeout default
interactive-transactions (provider=mysql, js_planetscale) timeout override
interactive-transactions (provider=mysql, js_planetscale) timeout override by PrismaClient
issues.11233 (provider=mysql, js_planetscale) should not throw when using Prisma.empty inside $executeRaw
issues.11233 (provider=mysql, js_planetscale) should not throw when using Prisma.empty inside $queryRaw
issues.11322 (provider=mysql, js_planetscale) example
issues.11740-transaction-stored-query (provider=mysql, js_planetscale) stored query trigger .requestTransaction twice should fail
issues.11740-transaction-stored-query (provider=mysql, js_planetscale) stored query triggered twice should fail but not exit process
issues.11974 (provider=mysql, js_planetscale) should not throw an error when aggregating two relation fields using aggregate
issues.11974 (provider=mysql, js_planetscale) should not throw an error when counting two relation fields using find
issues.12572 (provider=mysql, js_planetscale) should have equal dates on record creation for @default(now) and @updatedAt
issues.13097-group-by-enum (provider=mysql, js_planetscale) groupBy on enumValue field
issues.13766.at-unique (provider=mysql, js_planetscale) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.at-unique (provider=mysql, js_planetscale) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.13766.primary-key (provider=mysql, js_planetscale) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.primary-key (provider=mysql, js_planetscale) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.14373-batch-tx-error (provider=mysql, js_planetscale) correctly reports location of a batch error
issues.14954-date-batch (provider=mysql, js_planetscale) findFirst date with $transaction([...])
issues.14954-date-batch (provider=mysql, js_planetscale) findFirst date with Promise.all
issues.14954-date-batch (provider=mysql, js_planetscale) findUnique date with $transaction([...])
issues.14954-date-batch (provider=mysql, js_planetscale) findUnique date with Promise.all
issues.15044 (provider=mysql, js_planetscale) should not throw error when using connect inside transaction
issues.15176 (provider=mysql, js_planetscale) should update both updatedAt fields on a model
issues.15177 (provider=mysql, js_planetscale) should allow CRUD methods on a table column that has a space
issues.15264-uint-id-overflow (provider=mysql, js_planetscale) upsert should not fail
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=mysql,onUpdate=undefined,onDelete=undefined,id=undefined, js_planetscale) issue 16390 when deleting an item, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=mysql,onUpdate=undefined,onDelete=undefined,id=undefined, js_planetscale) when deleting a category, the corresponding entry in the implicit pivot table should be deleted
issues.16535-select-enum (provider=mysql, js_planetscale) allows to select enum field
issues.17948-tx-client-extensions (provider=mysql, js_planetscale) extension method is bound to transaction client within itx
issues.18276-batch-order (provider=mysql, js_planetscale) executes batch in right order when using delayed middleware
issues.18276-batch-order (provider=mysql, js_planetscale) executes batch queries in the right order when using extensions + middleware
issues.18292-inspect-loop.test (provider=mysql, js_planetscale) depth option is respected
issues.18292-inspect-loop.test (provider=mysql, js_planetscale) it is possible to inspect/log prisma client
issues.18292-inspect-loop.test (provider=mysql, js_planetscale) result extensions are still logged/inspected correctly
issues.18598-select-count-true (provider=mysql, js_planetscale) works with _count shorthand
issues.18854-extensions-db-null (provider=mysql, js_planetscale) allows to use DbNull together with query extensions
issues.19997-select-include-undefined (provider=mysql, js_planetscale) correctly infers selection when passing include: undefined
issues.19997-select-include-undefined (provider=mysql, js_planetscale) correctly infers selection when passing select: undefined
issues.20261-group-by-shortcut (provider=mysql, js_planetscale) works with a scalar in "by"
issues.20261-group-by-shortcut (provider=mysql, js_planetscale) works with a scalar in "by" and no other selection
issues.20261-group-by-shortcut (provider=mysql, js_planetscale) works with extended client
issues.20499-result-ext-count (provider=mysql, js_planetscale) result extensions do not break .count
issues.20724 (provider=mysql, js_planetscale) unique constraint violation modelName is not returned on error.meta should not return modelName when performing executeRaw
issues.20724 (provider=mysql, js_planetscale) unique constraint violation modelName is not returned on error.meta should not return modelName when performing queryRaw
issues.20724 (provider=mysql, js_planetscale) unique constraint violation modelName is not returned on error.meta should not return modelName when performing transactions with raw queries
issues.20724 (provider=mysql, js_planetscale) unique constraint violation modelName is returned on error.meta should return modelName on error.meta when performing prisma.model.create
issues.20724 (provider=mysql, js_planetscale) unique constraint violation modelName is returned on error.meta should return modelName on error.meta when performing prisma$transaction with the client
issues.21454-$type-in-json (provider=mysql, js_planetscale) preserves deeply nested json with $type key inside
issues.21454-$type-in-json (provider=mysql, js_planetscale) preserves json with $type key inside
issues.21592-char-truncation (provider=mysql, js_planetscale) does not truncate the input
issues.21592-char-truncation (provider=mysql, js_planetscale) upsert
issues.21631-batching-in-transaction (provider=mysql, js_planetscale) Transactions and batching (query compacting) shouldn't interfere with result sets 2 `findUnique`s in a $transaction
issues.21631-batching-in-transaction (provider=mysql, js_planetscale) Transactions and batching (query compacting) shouldn't interfere with result sets 2 concurrent `findUnique`s
issues.21631-batching-in-transaction (provider=mysql, js_planetscale) Transactions and batching (query compacting) shouldn't interfere with result sets 2 independent `findUnique`s
issues.22610-parallel-batch (provider=mysql, js_planetscale) batch does not times out
issues.22947-sqlite-conccurrent-upsert (provider=mysql, js_planetscale) concurrent upserts should succeed
issues.23902 (provider=mysql, js_planetscale) should not throw error when updating fields on a many to many join table
issues.25404.test (provider=mysql, js_planetscale) should not throw error when using d1 adapter and creating with string field that contains date string
issues.4004 (provider=mysql, js_planetscale) should not throw error when updating fields on a many to many join table
issues.5952-decimal-batch (provider=mysql, js_planetscale) findFirst decimal with $transaction([...])
issues.5952-decimal-batch (provider=mysql, js_planetscale) findFirst decimal with Promise.all
issues.5952-decimal-batch (provider=mysql, js_planetscale) findUnique decimal with $transaction([...])
issues.5952-decimal-batch (provider=mysql, js_planetscale) findUnique decimal with Promise.all
issues.6578 (provider=mysql, js_planetscale) should assert Dates, DateTimes, Times and UUIDs are wrapped in quotes and are deserializable
json-fields (provider=mysql, js_planetscale) empty object
json-fields (provider=mysql, js_planetscale) object with .toJSON method
json-fields (provider=mysql, js_planetscale) object with no prototype
json-fields (provider=mysql, js_planetscale) simple object
json-null-types (provider=mysql, js_planetscale) nullableJsonField DbNull
json-null-types (provider=mysql, js_planetscale) nullableJsonField JsonNull
json-null-types (provider=mysql, js_planetscale) requiredJsonField JsonNull
large-floats (provider=mysql, js_planetscale) floats
logging (provider=mysql, js_planetscale) should log queries inside a ITX
logging (provider=mysql, js_planetscale) should log transaction batched queries
max_bind_value (provider=mysql, js_planetscale) create user with nested connect with more than 98 posts should succeed
max_bind_value (provider=mysql, js_planetscale) findMany() with more than 98 users with nested include should succeed
methods.count (provider=mysql, js_planetscale) bad prop
methods.count (provider=mysql, js_planetscale) select all false
methods.count (provider=mysql, js_planetscale) select all true
methods.count (provider=mysql, js_planetscale) select mixed
methods.count (provider=mysql, js_planetscale) select mixed where
methods.count (provider=mysql, js_planetscale) select where
methods.count (provider=mysql, js_planetscale) simple
methods.count (provider=mysql, js_planetscale) take
methods.count (provider=mysql, js_planetscale) where
methods.createMany (provider=mysql, js_planetscale) should create a single record with a single nested create
methods.createMany (provider=mysql, js_planetscale) should create a single record with many nested create
methods.createMany (provider=mysql, js_planetscale) should create many records
methods.findFirstOrThrow (provider=mysql, js_planetscale) finds existing record
methods.findFirstOrThrow (provider=mysql, js_planetscale) reports correct method name in case of validation error
methods.findFirstOrThrow (provider=mysql, js_planetscale) throws if record was not found
methods.findFirstOrThrow (provider=mysql, js_planetscale) works with interactive transactions
methods.findFirstOrThrow (provider=mysql, js_planetscale) works with transactions
methods.findUniqueOrThrow (provider=mysql, js_planetscale) finds existing record
methods.findUniqueOrThrow (provider=mysql, js_planetscale) reports correct method name in case of validation error
methods.findUniqueOrThrow (provider=mysql, js_planetscale) throws if record was not found
methods.findUniqueOrThrow (provider=mysql, js_planetscale) works with interactive transactions
methods.findUniqueOrThrow (provider=mysql, js_planetscale) works with transactions
methods.upsert.simple (provider=mysql, js_planetscale) should create a record using upsert
methods.upsert.simple (provider=mysql, js_planetscale) should update a record using upsert
metrics.enabled (provider=mysql, js_planetscale) after a query includes global labels in json format
metrics.enabled (provider=mysql, js_planetscale) after a query includes global labels in prometheus format
metrics.enabled (provider=mysql, js_planetscale) after a query returns metrics in json format
metrics.enabled (provider=mysql, js_planetscale) after a query returns metrics in prometheus format
metrics.enabled (provider=mysql, js_planetscale) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=mysql, js_planetscale) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=mysql, js_planetscale) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=mysql, js_planetscale) multiple instances does not share metrics between 2 different instances of client
multiple-types (provider=mysql, js_planetscale) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=mysql, js_planetscale) a record with all fields set to null should succeed
multiple-types (provider=mysql, js_planetscale) all fields are null
multiple-types (provider=mysql, js_planetscale) shows differences between queryRaw and findMany
multiple-types (provider=mysql, js_planetscale) String field: true or false as string should succeed
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Args, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=At, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=AtBasic, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=AtLoose, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=AtStrict, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Batch, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=BatchPayload, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Check, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=ComputeRaw, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=constructor, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Datasources, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Enumerable, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=ErrorFormat, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Exact, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Extends, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Extension, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=False, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Fetcher, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=GetEvents, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=GetLogType, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=GetScalarType, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Has, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=InputJsonArray, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=InputJsonObject, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=InputJsonValue, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=IntersectOf, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=IntFilter, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=JsonArray, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=JsonObject, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=JsonValue, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Key, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Keys, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=LogDefinition, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=LogEvent, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=LogLevel, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Merge, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Metric, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Middleware, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=MiddlewareParams, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=ModelName, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Mutation, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=NestedIntFilter, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Not, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=OptionalFlat, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Or, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Overwrite, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Payload, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=PrismaAction, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Promise, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=PromiseReturnType, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=PromiseType, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Query, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=QueryEvent, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=RequiredKeys, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Result, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=SelectSubset, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=SortOrder, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Strict, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Subset, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=SubsetIntersection, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=TransactionClient, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=True, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=TrueKeys, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=TruthyKeys, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=TypeMap, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=TypeMapCb, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=UnEnumerate, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Union, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=mysql, enumName=Without, js_planetscale) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Args, js_planetscale) allows to use Args name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Args, js_planetscale) allows to use Args name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=At, js_planetscale) allows to use At name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=At, js_planetscale) allows to use At name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtBasic, js_planetscale) allows to use AtBasic name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtBasic, js_planetscale) allows to use AtBasic name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtLoose, js_planetscale) allows to use AtLoose name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtLoose, js_planetscale) allows to use AtLoose name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtStrict, js_planetscale) allows to use AtStrict name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=AtStrict, js_planetscale) allows to use AtStrict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Batch, js_planetscale) allows to use Batch name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Batch, js_planetscale) allows to use Batch name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=BatchPayload, js_planetscale) allows to use BatchPayload name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=BatchPayload, js_planetscale) allows to use BatchPayload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Check, js_planetscale) allows to use Check name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Check, js_planetscale) allows to use Check name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ComputeRaw, js_planetscale) allows to use ComputeRaw name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ComputeRaw, js_planetscale) allows to use ComputeRaw name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=constructor, js_planetscale) allows to use constructor name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=constructor, js_planetscale) allows to use constructor name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Datasources, js_planetscale) allows to use Datasources name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Datasources, js_planetscale) allows to use Datasources name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Enumerable, js_planetscale) allows to use Enumerable name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Enumerable, js_planetscale) allows to use Enumerable name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ErrorFormat, js_planetscale) allows to use ErrorFormat name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ErrorFormat, js_planetscale) allows to use ErrorFormat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Exact, js_planetscale) allows to use Exact name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Exact, js_planetscale) allows to use Exact name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Extends, js_planetscale) allows to use Extends name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Extends, js_planetscale) allows to use Extends name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Extension, js_planetscale) allows to use Extension name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Extension, js_planetscale) allows to use Extension name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=False, js_planetscale) allows to use False name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=False, js_planetscale) allows to use False name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Fetcher, js_planetscale) allows to use Fetcher name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Fetcher, js_planetscale) allows to use Fetcher name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetEvents, js_planetscale) allows to use GetEvents name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetEvents, js_planetscale) allows to use GetEvents name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetLogType, js_planetscale) allows to use GetLogType name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetLogType, js_planetscale) allows to use GetLogType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetScalarType, js_planetscale) allows to use GetScalarType name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=GetScalarType, js_planetscale) allows to use GetScalarType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Has, js_planetscale) allows to use Has name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Has, js_planetscale) allows to use Has name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonArray, js_planetscale) allows to use InputJsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonArray, js_planetscale) allows to use InputJsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonObject, js_planetscale) allows to use InputJsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonObject, js_planetscale) allows to use InputJsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonValue, js_planetscale) allows to use InputJsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=InputJsonValue, js_planetscale) allows to use InputJsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=IntersectOf, js_planetscale) allows to use IntersectOf name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=IntersectOf, js_planetscale) allows to use IntersectOf name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=IntFilter, js_planetscale) allows to use IntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=IntFilter, js_planetscale) allows to use IntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonArray, js_planetscale) allows to use JsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonArray, js_planetscale) allows to use JsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonObject, js_planetscale) allows to use JsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonObject, js_planetscale) allows to use JsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonValue, js_planetscale) allows to use JsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=JsonValue, js_planetscale) allows to use JsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Key, js_planetscale) allows to use Key name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Key, js_planetscale) allows to use Key name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Keys, js_planetscale) allows to use Keys name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Keys, js_planetscale) allows to use Keys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogDefinition, js_planetscale) allows to use LogDefinition name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogDefinition, js_planetscale) allows to use LogDefinition name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogEvent, js_planetscale) allows to use LogEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogEvent, js_planetscale) allows to use LogEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogLevel, js_planetscale) allows to use LogLevel name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=LogLevel, js_planetscale) allows to use LogLevel name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Merge, js_planetscale) allows to use Merge name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Merge, js_planetscale) allows to use Merge name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Metric, js_planetscale) allows to use Metric name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Metric, js_planetscale) allows to use Metric name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Middleware, js_planetscale) allows to use Middleware name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Middleware, js_planetscale) allows to use Middleware name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=MiddlewareParams, js_planetscale) allows to use MiddlewareParams name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=MiddlewareParams, js_planetscale) allows to use MiddlewareParams name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ModelName, js_planetscale) allows to use ModelName name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=ModelName, js_planetscale) allows to use ModelName name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Mutation, js_planetscale) allows to use Mutation name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Mutation, js_planetscale) allows to use Mutation name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=NestedIntFilter, js_planetscale) allows to use NestedIntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=NestedIntFilter, js_planetscale) allows to use NestedIntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Not, js_planetscale) allows to use Not name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Not, js_planetscale) allows to use Not name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=OptionalFlat, js_planetscale) allows to use OptionalFlat name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=OptionalFlat, js_planetscale) allows to use OptionalFlat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Or, js_planetscale) allows to use Or name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Or, js_planetscale) allows to use Or name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Overwrite, js_planetscale) allows to use Overwrite name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Overwrite, js_planetscale) allows to use Overwrite name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Payload, js_planetscale) allows to use Payload name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Payload, js_planetscale) allows to use Payload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PrismaAction, js_planetscale) allows to use PrismaAction name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PrismaAction, js_planetscale) allows to use PrismaAction name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Promise, js_planetscale) allows to use Promise name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Promise, js_planetscale) allows to use Promise name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PromiseReturnType, js_planetscale) allows to use PromiseReturnType name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PromiseReturnType, js_planetscale) allows to use PromiseReturnType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PromiseType, js_planetscale) allows to use PromiseType name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=PromiseType, js_planetscale) allows to use PromiseType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Query, js_planetscale) allows to use Query name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Query, js_planetscale) allows to use Query name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=QueryEvent, js_planetscale) allows to use QueryEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=QueryEvent, js_planetscale) allows to use QueryEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=RequiredKeys, js_planetscale) allows to use RequiredKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=RequiredKeys, js_planetscale) allows to use RequiredKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Result, js_planetscale) allows to use Result name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Result, js_planetscale) allows to use Result name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SelectSubset, js_planetscale) allows to use SelectSubset name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SelectSubset, js_planetscale) allows to use SelectSubset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SortOrder, js_planetscale) allows to use SortOrder name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SortOrder, js_planetscale) allows to use SortOrder name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Strict, js_planetscale) allows to use Strict name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Strict, js_planetscale) allows to use Strict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Subset, js_planetscale) allows to use Subset name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Subset, js_planetscale) allows to use Subset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SubsetIntersection, js_planetscale) allows to use SubsetIntersection name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=SubsetIntersection, js_planetscale) allows to use SubsetIntersection name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TransactionClient, js_planetscale) allows to use TransactionClient name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TransactionClient, js_planetscale) allows to use TransactionClient name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=True, js_planetscale) allows to use True name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=True, js_planetscale) allows to use True name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TrueKeys, js_planetscale) allows to use TrueKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TrueKeys, js_planetscale) allows to use TrueKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TruthyKeys, js_planetscale) allows to use TruthyKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TruthyKeys, js_planetscale) allows to use TruthyKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TypeMap, js_planetscale) allows to use TypeMap name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TypeMap, js_planetscale) allows to use TypeMap name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TypeMapCb, js_planetscale) allows to use TypeMapCb name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=TypeMapCb, js_planetscale) allows to use TypeMapCb name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=UnEnumerate, js_planetscale) allows to use UnEnumerate name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=UnEnumerate, js_planetscale) allows to use UnEnumerate name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Union, js_planetscale) allows to use Union name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Union, js_planetscale) allows to use Union name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Without, js_planetscale) allows to use Without name for a model name
naming-conflict.built-in-types-vs-model (provider=mysql, typeName=Without, js_planetscale) allows to use Without name for a model name (relation)
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelAggregate, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelCount, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelDefault, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelDelete, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelFieldRefs, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelGroupBy, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelInclude, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelPayload, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelResult, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelSelect, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelUpdate, js_planetscale) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=mysql, conflictingModel=ModelUpsert, js_planetscale) allows to use models of conflicting names
omit.test (provider=mysql, js_planetscale) create
omit.test (provider=mysql, js_planetscale) excluding computed fields
omit.test (provider=mysql, js_planetscale) excluding dependency of a computed field
omit.test (provider=mysql, js_planetscale) false value
omit.test (provider=mysql, js_planetscale) findFirst
omit.test (provider=mysql, js_planetscale) findFirstOrThrow
omit.test (provider=mysql, js_planetscale) findUnique
omit.test (provider=mysql, js_planetscale) findUniqueOrThrow
omit.test (provider=mysql, js_planetscale) omit combined with include
omit.test (provider=mysql, js_planetscale) omit nested in include
omit.test (provider=mysql, js_planetscale) omit nested in select
omit.test (provider=mysql, js_planetscale) update
omit.test (provider=mysql, js_planetscale) upsert
optimistic-concurrency-control (provider=mysql, js_planetscale) deleteMany
optimistic-concurrency-control (provider=mysql, js_planetscale) update with upsert relation
order-by-null (provider=mysql, js_planetscale) should return records sorted by name asc and null first
order-by-null (provider=mysql, js_planetscale) should return records sorted by name asc and null last
order-by-null (provider=mysql, js_planetscale) should return records sorted by name desc and null first
order-by-null (provider=mysql, js_planetscale) should return records sorted by name desc and null last
prisma-promise (provider=mysql, js_planetscale) create fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) create repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) create repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) create repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) create repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) delete fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) delete repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) delete repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) delete repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) delete repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) deleteMany fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) deleteMany repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) deleteMany repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) deleteMany repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) deleteMany repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) findFirstOrThrow fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) findFirstOrThrow repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) findFirstOrThrow repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) findFirstOrThrow repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) findFirstOrThrow repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) findUniqueOrThrow fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) findUniqueOrThrow repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) findUniqueOrThrow repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) findUniqueOrThrow repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) findUniqueOrThrow repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) update fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) update repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) update repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) update repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) update repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=mysql, js_planetscale) updateMany fluent promises should have promise properties
prisma-promise (provider=mysql, js_planetscale) updateMany repeated calls to .catch
prisma-promise (provider=mysql, js_planetscale) updateMany repeated calls to .finally
prisma-promise (provider=mysql, js_planetscale) updateMany repeated calls to .then
prisma-promise (provider=mysql, js_planetscale) updateMany repeated mixed calls to .then, .catch, .finally
raw-queries.typed-results (provider=mysql, js_planetscale) query model with a BigInt = -2147483647 (-i32)
raw-queries.typed-results (provider=mysql, js_planetscale) query model with a BigInt = -MAX_SAFE_INTEGER
raw-queries.typed-results (provider=mysql, js_planetscale) query model with a BigInt = 2147483647 (i32)
raw-queries.typed-results (provider=mysql, js_planetscale) query model with a BigInt = MAX_SAFE_INTEGER
raw-queries.typed-results (provider=mysql, js_planetscale) query model with multiple types
raw-queries.typed-results (provider=mysql, js_planetscale) when BigInt value is not a safe integer query model with a BigInt = MAX_SAFE_INTEGER + MAX_SAFE_INTEGER BigInt is natively supported
relationMode-17255-mixed-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) original [update] main with nested delete alice should succeed
relationMode-17255-mixed-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) original [update] main with nested disconnect alice should succeed
relationMode-17255-mixed-actions (relationMode=prisma,provider=mysql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) original [update] main with nested delete alice should succeed
relationMode-17255-mixed-actions (relationMode=prisma,provider=mysql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) original [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) not-original onDelete: Cascade [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) not-original onDelete: Cascade [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=DEFAULT,onDelete=DEFAULT,id=String @id, js_planetscale) not-original onDelete: DEFAULT [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=NoAction,onDelete=NoAction,id=String @id, js_planetscale) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,driverAdapter=vitess_8,onUpdate=Restrict,onDelete=Restrict,id=String @id, js_planetscale) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) not-original onDelete: Cascade [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_planetscale) not-original onDelete: Cascade [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,onUpdate=DEFAULT,onDelete=DEFAULT,id=String @id, js_planetscale) not-original onDelete: DEFAULT [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,onUpdate=NoAction,onDelete=NoAction,id=String @id, js_planetscale) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
relationMode-17255-same-actions (relationMode=prisma,provider=mysql,onUpdate=Restrict,onDelete=Restrict,id=String @id, js_planetscale) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
tracing (provider=mysql, js_planetscale) tracing connect should trace the implicit $connect call
tracing (provider=mysql, js_planetscale) tracing on crud methods create
tracing (provider=mysql, js_planetscale) tracing on crud methods delete
tracing (provider=mysql, js_planetscale) tracing on crud methods deleteMany()
tracing (provider=mysql, js_planetscale) tracing on crud methods update
tracing (provider=mysql, js_planetscale) tracing on transactions $transaction
tracing (provider=mysql, js_planetscale) tracing on transactions interactive transaction commit
tracing (provider=mysql, js_planetscale) tracing on transactions interactive transaction rollback
tracing (provider=mysql, js_planetscale) tracing with custom span
tracing (provider=mysql, js_planetscale) tracing with middleware should succeed
unsupported-action (provider=mysql, js_planetscale) unsupported method
upsert-relation-mode-prisma.test (provider=mysql, js_planetscale) calling upsert two times in a row does nothing
views (provider=mysql, js_planetscale) should query a view with where
views (provider=mysql, js_planetscale) should query views with a related column
views (provider=mysql, js_planetscale) should simple query a view
