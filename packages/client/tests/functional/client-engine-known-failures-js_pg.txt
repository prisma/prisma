0-legacy-ports.aggregations (provider=postgresql, js_pg) max
0-legacy-ports.aggregations (provider=postgresql, js_pg) multiple aggregations
0-legacy-ports.aggregations (provider=postgresql, js_pg) multiple aggregations with where
0-legacy-ports.json (provider=postgresql, js_pg) create required json
0-legacy-ports.json (provider=postgresql, js_pg) update required json with where equals
_example (provider=postgresql, previewFeatures=referentialIntegrity, js_pg) conditional @ts-test-if
_example (provider=postgresql, previewFeatures=relationJoins, js_pg) conditional @ts-test-if
blog-update (provider=postgresql, js_pg) should create a user and post and connect them together
blog-update (provider=postgresql, js_pg) should create a user and post and disconnect them
create-default-date.test (provider=postgresql, js_pg) correctly creates a field with default date
decimal.precision (provider=postgresql, precision=1000, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=20, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=38, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=65, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
driver-adapters.team-orm-687-bytes (provider=postgresql, js_pg) Bytes encoding is preserved
extended-where.create (provider=postgresql, js_pg) create with connect 1 unique (PK)
extended-where.create (provider=postgresql, js_pg) create with connect 1 unique (non-PK)
extended-where.create (provider=postgresql, js_pg) create with connect 2 uniques (PK & non-PK)
extended-where.findUnique (provider=postgresql, js_pg) findUnique with nested where on optional 1:1 not found
extended-where.upsert (provider=postgresql, js_pg) upsert with where 1 unique (PK)
extended-where.upsert (provider=postgresql, js_pg) upsert with where 2 uniques (PK & non-PK)
extensions.query (provider=postgresql, js_pg) hijacking a batch transaction into another one with a simple call
extensions.query (provider=postgresql, js_pg) hijacking a batch transaction into another one with multiple calls
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via normal call
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) relationship
filter-count-relations (provider=postgresql, js_pg) many-to-many with > condition
filter-count-relations (provider=postgresql, js_pg) many-to-many with multiple conditions
filter-count-relations (provider=postgresql, js_pg) many-to-many with simple equality condition
filter-count-relations (provider=postgresql, js_pg) nested relation
filter-count-relations (provider=postgresql, js_pg) one-to-many with > condition
filter-count-relations (provider=postgresql, js_pg) one-to-many with multiple conditions
filter-count-relations (provider=postgresql, js_pg) one-to-many with simple equality condition
filter-count-relations (provider=postgresql, js_pg) without condition
fluent-api (provider=postgresql, js_pg) extended client chaining and selecting twice
fluent-api (provider=postgresql, js_pg) extended client lower-cased relations
fluent-api (provider=postgresql, js_pg) extended client upper-cased relations
fluent-api (provider=postgresql, js_pg) extended client upsert
fluent-api (provider=postgresql, js_pg) regular client chaining and selecting twice
fluent-api (provider=postgresql, js_pg) regular client lower-cased relations
fluent-api (provider=postgresql, js_pg) regular client upper-cased relations
fluent-api (provider=postgresql, js_pg) regular client upsert
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow with include
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow with select
fluent-api-null (provider=postgresql, js_pg) extended client findUnique
fluent-api-null (provider=postgresql, js_pg) extended client findUnique with include
fluent-api-null (provider=postgresql, js_pg) extended client findUnique with select
fluent-api-null (provider=postgresql, js_pg) extended client upsert
fluent-api-null (provider=postgresql, js_pg) extended client upsert with include
fluent-api-null (provider=postgresql, js_pg) extended client upsert with select
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow with include
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow with select
fluent-api-null (provider=postgresql, js_pg) regular client findUnique
fluent-api-null (provider=postgresql, js_pg) regular client findUnique with include
fluent-api-null (provider=postgresql, js_pg) regular client findUnique with select
fluent-api-null (provider=postgresql, js_pg) regular client upsert
fluent-api-null (provider=postgresql, js_pg) regular client upsert with include
fluent-api-null (provider=postgresql, js_pg) regular client upsert with select
fulltext-search (provider=postgresql, js_pg) bad query
globalOmit.test (provider=postgresql, js_pg) createMany does not crash
globalOmit.test (provider=postgresql, js_pg) deleteMany does not crash
globalOmit.test (provider=postgresql, js_pg) groupBy does not crash
globalOmit.test (provider=postgresql, js_pg) updateMany does not crash
interactive-transactions (provider=postgresql, js_pg) already committed
interactive-transactions (provider=postgresql, js_pg) batching raw rollback
interactive-transactions (provider=postgresql, js_pg) high concurrency with SET FOR UPDATE
interactive-transactions (provider=postgresql, js_pg) timeout default
interactive-transactions (provider=postgresql, js_pg) timeout override
interactive-transactions (provider=postgresql, js_pg) timeout override by PrismaClient
issues.11974 (provider=postgresql, js_pg) should not throw an error when counting two relation fields using find
issues.12557 (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 12557 issue 12557
issues.13097-group-by-enum (provider=postgresql, js_pg) groupBy on enumArray field
issues.13097-group-by-enum (provider=postgresql, js_pg) groupBy on enumValue field
issues.13766.at-unique (provider=postgresql, js_pg) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.at-unique (provider=postgresql, js_pg) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.13766.primary-key (provider=postgresql, js_pg) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.primary-key (provider=postgresql, js_pg) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.15176 (provider=postgresql, js_pg) should update both updatedAt fields on a model
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 16390 when deleting an item, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) when deleting a category, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 16390 when deleting an item, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) when deleting a category, the corresponding entry in the implicit pivot table should be deleted
issues.17030-args-type-conflict (provider=postgresql, js_pg) include works correctly
issues.18276-batch-order (provider=postgresql, js_pg) executes batch in right order when using delayed middleware
issues.18276-batch-order (provider=postgresql, js_pg) executes batch queries in the right order when using extensions + middleware
issues.18598-select-count-true (provider=postgresql, js_pg) works with _count shorthand
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with a scalar in "by"
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with a scalar in "by" and no other selection
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with extended client
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing executeRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing queryRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing transactions with raw queries
issues.21369-select-null (provider=postgresql, js_pg) SELECT NULL works
issues.21454-$type-in-json (provider=postgresql, js_pg) preserves deeply nested json with $type key inside
issues.21454-$type-in-json (provider=postgresql, js_pg) preserves json with $type key inside
issues.21807-citext-neon (provider=postgresql, js_pg) writing and reading a citext field works
issues.22947-sqlite-conccurrent-upsert (provider=postgresql, js_pg) concurrent upserts should succeed
issues.23902 (provider=postgresql, js_pg) should not throw error when updating fields on a many to many join table
issues.25163-typed-sql-enum.test (provider=postgresql, js_pg) returns enums that are mapped to invalid JS identifier correctly
issues.25481-typedsql-query-extension.test (provider=postgresql, js_pg) TypedSQL should work when a client extension of type query extension is used
issues.6578 (provider=postgresql, js_pg) should assert Dates, DateTimes, Times and UUIDs are wrapped in quotes and are deserializable
json-fields (provider=postgresql, js_pg) object with .toJSON method
json-fields (provider=postgresql, js_pg) simple object
json-null-types (provider=postgresql, js_pg) nullableJsonField JsonNull
json-null-types (provider=postgresql, js_pg) requiredJsonField JsonNull
logging (provider=postgresql, js_pg) should log batched queries inside a ITX
logging (provider=postgresql, js_pg) should log queries inside a ITX
logging (provider=postgresql, js_pg) should log transaction batched queries
methods.createMany (provider=postgresql, js_pg) should create many records
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.findFirstOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.findFirstOrThrow (provider=postgresql, js_pg) works with interactive transactions
methods.findFirstOrThrow (provider=postgresql, js_pg) works with transactions
methods.findUniqueOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.findUniqueOrThrow (provider=postgresql, js_pg) works with interactive transactions
methods.findUniqueOrThrow (provider=postgresql, js_pg) works with transactions
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when update arguments do not have any nested queries
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in json format
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in prometheus format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in json format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in prometheus format
metrics.enabled (provider=postgresql, js_pg) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=postgresql, js_pg) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) multiple instances does not share metrics between 2 different instances of client
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create a string that looks like a uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a date and uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string and a string that looks like a date
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string and a string that looks like a uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string that looks like a date
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string, date and uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with two strings
multiple-types (provider=postgresql, js_pg) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=postgresql, js_pg) Bool field: true or false should succeed
multiple-types (provider=postgresql, js_pg) String field: true or false as string should succeed
multiple-types (provider=postgresql, js_pg) a record with all fields set to null should succeed
multiple-types (provider=postgresql, js_pg) all fields are null
multiple-types (provider=postgresql, js_pg) shows differences between queryRaw and findMany
omit.test (provider=postgresql, js_pg) upsert
optimistic-concurrency-control (provider=postgresql, js_pg) deleteMany
optimistic-concurrency-control (provider=postgresql, js_pg) update with upsert relation
query-error-logging (provider=postgresql, js_pg) findFirstOrThrow when error thrown
query-error-logging (provider=postgresql, js_pg) findUniqueOrThrown when error thrown
query-error-logging (provider=postgresql, js_pg) middleware captures errors
raw-queries.typed-results-advanced-and-native-types (provider=postgresql, js_pg) query model with multiple fields
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) not-original onDelete: Cascade [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=Restrict,onDelete=Restrict,id=String @id, js_pg) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
tracing (provider=postgresql, js_pg) tracing connect should trace the implicit $connect call
tracing (provider=postgresql, js_pg) tracing on crud methods aggregate
tracing (provider=postgresql, js_pg) tracing on transactions $transaction
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) xml - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) enum - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) enum - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) xml - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) xml - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) enum - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) enum - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) xml - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) xml - output
unsupported-action (provider=postgresql, js_pg) unsupported method
upsert-relation-mode-prisma.test (provider=postgresql, js_pg) calling upsert two times in a row does nothing
json-list-push (provider=postgresql, js_pg) push with array value
json-list-push (provider=postgresql, js_pg) push with single element
decimal.list (provider=postgresql, js_pg) create with strings
decimal.list (provider=postgresql, js_pg) with decimal instances
decimal.list (provider=postgresql, js_pg) with numbers
