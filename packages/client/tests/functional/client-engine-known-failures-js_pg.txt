0-legacy-ports.aggregations (provider=postgresql, js_pg) avg
0-legacy-ports.aggregations (provider=postgresql, js_pg) count inline boolean
0-legacy-ports.aggregations (provider=postgresql, js_pg) count with _all
0-legacy-ports.aggregations (provider=postgresql, js_pg) invalid avg
0-legacy-ports.aggregations (provider=postgresql, js_pg) invalid count
0-legacy-ports.aggregations (provider=postgresql, js_pg) invalid max
0-legacy-ports.aggregations (provider=postgresql, js_pg) invalid min
0-legacy-ports.aggregations (provider=postgresql, js_pg) invalid sum
0-legacy-ports.aggregations (provider=postgresql, js_pg) max
0-legacy-ports.aggregations (provider=postgresql, js_pg) min
0-legacy-ports.aggregations (provider=postgresql, js_pg) multiple aggregations
0-legacy-ports.aggregations (provider=postgresql, js_pg) multiple aggregations with where
0-legacy-ports.aggregations (provider=postgresql, js_pg) sum
0-legacy-ports.atomic-increment-decrement (provider=postgresql, js_pg) atomic decrement
0-legacy-ports.atomic-increment-decrement (provider=postgresql, js_pg) atomic decrement with negative
0-legacy-ports.atomic-increment-decrement (provider=postgresql, js_pg) atomic increment
0-legacy-ports.atomic-increment-decrement (provider=postgresql, js_pg) atomic increment with negative value
0-legacy-ports.batch-find-unique (provider=postgresql, js_pg) findUnique batching
0-legacy-ports.execute-raw (provider=postgresql, js_pg) update via executeRaw
0-legacy-ports.execute-raw (provider=postgresql, js_pg) update via executeRaw using Prisma.join
0-legacy-ports.execute-raw (provider=postgresql, js_pg) update via executeRaw using Prisma.join and Prisma.sql
0-legacy-ports.execute-raw (provider=postgresql, js_pg) update via executeRawUnsafe
0-legacy-ports.execute-raw (provider=postgresql, js_pg) update via queryRawUnsafe with values
0-legacy-ports.json (provider=postgresql, js_pg) create required json
0-legacy-ports.json (provider=postgresql, js_pg) select required json
0-legacy-ports.json (provider=postgresql, js_pg) select required json with where equals
0-legacy-ports.json (provider=postgresql, js_pg) select required json with where not equals
0-legacy-ports.json (provider=postgresql, js_pg) select required json with where path
0-legacy-ports.json (provider=postgresql, js_pg) update required json with where equals
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter empty optional relation
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter empty optional relation with 
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter empty optional relation with `null`
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter existing optional relation with `isNot: null`
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter existing optional relation with empty field
0-legacy-ports.optional-relation-filters (provider=postgresql, js_pg) filter existing optional relation with existing field
0-legacy-ports.query-raw (provider=postgresql, js_pg) select * via queryRaw
0-legacy-ports.query-raw (provider=postgresql, js_pg) select * via queryRawUnsafe
0-legacy-ports.query-raw (provider=postgresql, js_pg) select * via queryRawUnsafe with values
0-legacy-ports.query-raw (provider=postgresql, js_pg) select 1 via queryRaw
0-legacy-ports.query-raw (provider=postgresql, js_pg) select 1 via queryRawUnsafe
0-legacy-ports.query-raw (provider=postgresql, js_pg) select fields via queryRaw using Prisma.join
0-legacy-ports.query-raw (provider=postgresql, js_pg) select fields via queryRaw using Prisma.join and Prisma.sql
0-legacy-ports.query-raw (provider=postgresql, js_pg) select values via queryRawUnsafe
0-legacy-ports.query-raw (provider=postgresql, js_pg) select with alias via queryRaw
24835-omit-error.test (provider=postgresql, js_pg) have omitted field as never
_example (provider=postgresql, previewFeatures=referentialIntegrity, js_pg) conditional @ts-test-if
_example (provider=postgresql, previewFeatures=relationJoins, js_pg) conditional @ts-test-if
batch-transaction-isolation-level (provider=postgresql, js_pg) ReadCommitted
batch-transaction-isolation-level (provider=postgresql, js_pg) ReadUncommitted
batch-transaction-isolation-level (provider=postgresql, js_pg) RepeatableRead
batch-transaction-isolation-level (provider=postgresql, js_pg) Serializable
batch-transaction-isolation-level (provider=postgresql, js_pg) invalid level generates run- and compile- time error
batching (provider=postgresql, js_pg) batches findUnique
batching (provider=postgresql, js_pg) batches findUniqueOrThrow
batching (provider=postgresql, js_pg) does not batch different models
batching (provider=postgresql, js_pg) does not batch different select
batching (provider=postgresql, js_pg) does not batch different where
blog-update (provider=postgresql, js_pg) should create a user and post and connect them together
blog-update (provider=postgresql, js_pg) should create a user and post and disconnect them
blog-update (provider=postgresql, js_pg) should create a user and update that field on that user
blog-update (provider=postgresql, js_pg) should create a user with posts and a profile and update itself and nested connections setting fields to null
chunking-query (provider=postgresql, js_pg) chunking logic does not trigger with 2 IN filters Selecting MAX ids at once in two inclusive disjunct filters results in error
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when "in" has EXCESS ids
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when "in" has MAX ids
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when "include" involves EXCESS records
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when "include" involves MAX records
chunking-query (provider=postgresql, js_pg) issues #8832 / #9326 success cases should succeed when raw query has MAX ids
create-default-date.test (provider=postgresql, js_pg) correctly creates a field with default date
decimal.list (provider=postgresql, js_pg) create with strings
decimal.list (provider=postgresql, js_pg) with decimal instances
decimal.list (provider=postgresql, js_pg) with numbers
decimal.precision (provider=postgresql, precision=10, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=1000, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=20, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=38, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.precision (provider=postgresql, precision=65, js_pg) decimals should not lose precision when written to db (with seed=XXXX)
decimal.scalar (provider=postgresql, js_pg) possible inputs decimal as Decimal.js instance
decimal.scalar (provider=postgresql, js_pg) possible inputs decimal as decimal.js-like object
decimal.scalar (provider=postgresql, js_pg) possible inputs decimal as number
decimal.scalar (provider=postgresql, js_pg) possible inputs decimal as string
default-selection (provider=postgresql, js_pg) does not include relations
default-selection (provider=postgresql, js_pg) includes enum lists
default-selection (provider=postgresql, js_pg) includes enums
default-selection (provider=postgresql, js_pg) includes lists
default-selection (provider=postgresql, js_pg) includes scalars
driver-adapters.adapter-nullability (provider=postgresql, js_pg) does not throw if adapter is set to null
driver-adapters.error-forwarding (provider=postgresql, js_pg) correctly forwards error for batch transactions
driver-adapters.error-forwarding (provider=postgresql, js_pg) correctly forwards error for executeRaw
driver-adapters.error-forwarding (provider=postgresql, js_pg) correctly forwards error for implicit transactions
driver-adapters.error-forwarding (provider=postgresql, js_pg) correctly forwards error for itx
driver-adapters.error-forwarding (provider=postgresql, js_pg) correctly forwards error for queryRaw
driver-adapters.team-orm-687-bytes (provider=postgresql, js_pg) Bytes encoding is preserved
enums (provider=postgresql, js_pg) can retrieve data with an enum value
extended-where.aggregate (provider=postgresql, js_pg) aggregate with cursor 1 unique (PK)
extended-where.aggregate (provider=postgresql, js_pg) aggregate with cursor 2 uniques (PK & non-PK)
extended-where.aggregate (provider=postgresql, js_pg) update with where 1 unique (non-PK)
extended-where.create (provider=postgresql, js_pg) create with connect 1 unique (PK)
extended-where.create (provider=postgresql, js_pg) create with connect 1 unique (non-PK)
extended-where.create (provider=postgresql, js_pg) create with connect 2 uniques (PK & non-PK)
extended-where.delete (provider=postgresql, js_pg) delete with where 1 unique (PK)
extended-where.delete (provider=postgresql, js_pg) delete with where 1 unique (non-PK)
extended-where.delete (provider=postgresql, js_pg) delete with where 2 uniques (PK & non-PK)
extended-where.findFirst (provider=postgresql, js_pg) findFirst with cursor 1 unique (PK)
extended-where.findFirst (provider=postgresql, js_pg) findFirst with cursor 1 unique (non-PK)
extended-where.findFirst (provider=postgresql, js_pg) findFirst with cursor 2 uniques (PK & non-PK)
extended-where.findFirstOrThrow (provider=postgresql, js_pg) findFirstOrThrow with cursor 1 unique (PK)
extended-where.findFirstOrThrow (provider=postgresql, js_pg) findFirstOrThrow with cursor 1 unique (non-PK)
extended-where.findFirstOrThrow (provider=postgresql, js_pg) findFirstOrThrow with cursor 2 uniques (PK & non-PK)
extended-where.findUnique (provider=postgresql, js_pg) findUnique with nested where on optional 1:1 not found
extended-where.update (provider=postgresql, js_pg) update with where 1 unique (PK)
extended-where.update (provider=postgresql, js_pg) update with where 1 unique (non-PK)
extended-where.update (provider=postgresql, js_pg) update with where 2 uniques (PK & non-PK)
extended-where.upsert (provider=postgresql, js_pg) upsert with where 1 unique (PK)
extended-where.upsert (provider=postgresql, js_pg) upsert with where 1 unique (non-PK)
extended-where.upsert (provider=postgresql, js_pg) upsert with where 2 uniques (PK & non-PK)
extended-where.validation (provider=postgresql, js_pg) where and missing unique keys
extended-where.validation (provider=postgresql, js_pg) where and no keys provided
extensions.itx (provider=postgresql, js_pg) client component is available within itx callback
extensions.itx (provider=postgresql, js_pg) client is extended in itx
extensions.itx (provider=postgresql, js_pg) extended client in itx can rollback via custom call
extensions.itx (provider=postgresql, js_pg) extended client in itx can rollback via normal call
extensions.itx (provider=postgresql, js_pg) extended client in itx works via custom call
extensions.itx (provider=postgresql, js_pg) extended client in itx works via normal call
extensions.itx (provider=postgresql, js_pg) isolation level is properly reflected in extended client
extensions.itx (provider=postgresql, js_pg) itx works with extended client + queryRawUnsafe
extensions.itx (provider=postgresql, js_pg) methods from itx client denylist are optional within client extensions
extensions.itx (provider=postgresql, js_pg) middleware exclude from transaction also works with extended client
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods
extensions.model (provider=postgresql, js_pg) batching of PrismaPromise returning custom model methods and query
extensions.model (provider=postgresql, js_pg) error in async PrismaPromise methods
extensions.query (provider=postgresql, js_pg) args mutation accumulation
extensions.query (provider=postgresql, js_pg) args mutation isolation
extensions.query (provider=postgresql, js_pg) extending a specific model query
extensions.query (provider=postgresql, js_pg) extending with $allModels and $allOperations
extensions.query (provider=postgresql, js_pg) extending with $allModels and a specific query
extensions.query (provider=postgresql, js_pg) extending with $allModels and another $allModels
extensions.query (provider=postgresql, js_pg) extending with $allModels.$allOperations and a top-level query
extensions.query (provider=postgresql, js_pg) extending with specific model and $allOperations
extensions.query (provider=postgresql, js_pg) extending with top-level $allOperations
extensions.query (provider=postgresql, js_pg) hijacking a batch transaction into another one with a simple call
extensions.query (provider=postgresql, js_pg) hijacking a batch transaction into another one with multiple calls
extensions.query (provider=postgresql, js_pg) query result mutation with a simple call
extensions.query (provider=postgresql, js_pg) query result mutation with multiple calls
extensions.query (provider=postgresql, js_pg) query result mutations with batch transactions
extensions.query (provider=postgresql, js_pg) top to bottom execution order
extensions.query (provider=postgresql, js_pg) top-level raw queries interception
extensions.query (provider=postgresql, js_pg) transforming a simple query into a batch transaction
extensions.result (provider=postgresql, js_pg) create
extensions.result (provider=postgresql, js_pg) dependencies between computed fields
extensions.result (provider=postgresql, js_pg) empty extension does nothing
extensions.result (provider=postgresql, js_pg) error in computed field
extensions.result (provider=postgresql, js_pg) error in computed field with no name
extensions.result (provider=postgresql, js_pg) findFirst
extensions.result (provider=postgresql, js_pg) findFirst using $allModels
extensions.result (provider=postgresql, js_pg) findMany
extensions.result (provider=postgresql, js_pg) findUnique
extensions.result (provider=postgresql, js_pg) nested includes should include scalars and relations
extensions.result (provider=postgresql, js_pg) relationships: mixed include and select
extensions.result (provider=postgresql, js_pg) relationships: with deep select
extensions.result (provider=postgresql, js_pg) relationships: with include
extensions.result (provider=postgresql, js_pg) relationships: with select
extensions.result (provider=postgresql, js_pg) shadowing dependency
extensions.result (provider=postgresql, js_pg) shadowing dependency multiple times
extensions.result (provider=postgresql, js_pg) update
extensions.result (provider=postgresql, js_pg) upsert - create
extensions.result (provider=postgresql, js_pg) upsert - update
extensions.result (provider=postgresql, js_pg) when any type is passed as an input default selection type is returned
extensions.result (provider=postgresql, js_pg) when args have both include and select and one of them is optional, result includes both
extensions.result (provider=postgresql, js_pg) when using select
extensions.result (provider=postgresql, js_pg) when using select and $allModels
extensions.result (provider=postgresql, js_pg) with null result
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx can rollback via normal call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via custom call
extensions.tx (provider=postgresql, js_pg) extended client in tx works via normal call
extensions.tx (provider=postgresql, js_pg) isolation level is properly reflected in extended client
extensions.tx (provider=postgresql, js_pg) type inference allows for destructuring the array
field-reference.json (provider=postgresql, js_pg) array filter
field-reference.json (provider=postgresql, js_pg) does not conflict with {_ref: "something"} json value
field-reference.json (provider=postgresql, js_pg) simple equality
field-reference.json (provider=postgresql, js_pg) string filter
field-reference.json (provider=postgresql, js_pg) via extended client
field-reference.json (provider=postgresql, js_pg) wrong field type
field-reference.list (provider=postgresql, js_pg) in
field-reference.list (provider=postgresql, js_pg) notIn
field-reference.list (provider=postgresql, js_pg) via extended client
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) aggregate
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=BigInt, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) aggregate
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Float, js_pg) wrong column numeric type
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) aggregate
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) relationship
field-reference.numeric (provider=postgresql, fieldType=Int, js_pg) wrong column numeric type
field-reference.string (provider=postgresql, js_pg) wrong field type
field-reference.string (provider=postgresql, js_pg) wrong identical model
field-reference.string (provider=postgresql, js_pg) wrong model
filter-count-relations (provider=postgresql, js_pg) many-to-many with > condition
filter-count-relations (provider=postgresql, js_pg) many-to-many with multiple conditions
filter-count-relations (provider=postgresql, js_pg) many-to-many with simple equality condition
filter-count-relations (provider=postgresql, js_pg) nested relation
filter-count-relations (provider=postgresql, js_pg) one-to-many with > condition
filter-count-relations (provider=postgresql, js_pg) one-to-many with multiple conditions
filter-count-relations (provider=postgresql, js_pg) one-to-many with simple equality condition
filter-count-relations (provider=postgresql, js_pg) without condition
find-unique-or-throw-batching (provider=postgresql, js_pg) batched errors are when all objects in batch are found
find-unique-or-throw-batching (provider=postgresql, js_pg) batched errors when some of the objects not found
fluent-api (provider=postgresql, js_pg) extended client chaining and selecting
fluent-api (provider=postgresql, js_pg) extended client chaining and selecting twice
fluent-api (provider=postgresql, js_pg) extended client create
fluent-api (provider=postgresql, js_pg) extended client delete
fluent-api (provider=postgresql, js_pg) extended client findFirst
fluent-api (provider=postgresql, js_pg) extended client findFirstOrThrow
fluent-api (provider=postgresql, js_pg) extended client findFirstOrThrow where nested entity is not found
fluent-api (provider=postgresql, js_pg) extended client findFirstOrThrow with required to-one relation
fluent-api (provider=postgresql, js_pg) extended client findFirstOrThrow with required to-one relation circling back to optional relation
fluent-api (provider=postgresql, js_pg) extended client findUniqueOrThrow
fluent-api (provider=postgresql, js_pg) extended client findUniqueOrThrow where nested entity is not found
fluent-api (provider=postgresql, js_pg) extended client findUniqueOrThrow with required to-one relation
fluent-api (provider=postgresql, js_pg) extended client findUniqueOrThrow with required to-one relation circling back to optional relation
fluent-api (provider=postgresql, js_pg) extended client lower-cased relations
fluent-api (provider=postgresql, js_pg) extended client update
fluent-api (provider=postgresql, js_pg) extended client upper-cased relations
fluent-api (provider=postgresql, js_pg) extended client upsert
fluent-api (provider=postgresql, js_pg) regular client chaining and selecting
fluent-api (provider=postgresql, js_pg) regular client chaining and selecting twice
fluent-api (provider=postgresql, js_pg) regular client create
fluent-api (provider=postgresql, js_pg) regular client delete
fluent-api (provider=postgresql, js_pg) regular client findFirst
fluent-api (provider=postgresql, js_pg) regular client findFirstOrThrow
fluent-api (provider=postgresql, js_pg) regular client findFirstOrThrow where nested entity is not found
fluent-api (provider=postgresql, js_pg) regular client findUniqueOrThrow
fluent-api (provider=postgresql, js_pg) regular client findUniqueOrThrow where nested entity is not found
fluent-api (provider=postgresql, js_pg) regular client lower-cased relations
fluent-api (provider=postgresql, js_pg) regular client update
fluent-api (provider=postgresql, js_pg) regular client upper-cased relations
fluent-api (provider=postgresql, js_pg) regular client upsert
fluent-api-null (provider=postgresql, js_pg) extended client create
fluent-api-null (provider=postgresql, js_pg) extended client create with include
fluent-api-null (provider=postgresql, js_pg) extended client create with select
fluent-api-null (provider=postgresql, js_pg) extended client findFirst
fluent-api-null (provider=postgresql, js_pg) extended client findFirst with include
fluent-api-null (provider=postgresql, js_pg) extended client findFirst with select
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow with include
fluent-api-null (provider=postgresql, js_pg) extended client findFirstOrThrow with select
fluent-api-null (provider=postgresql, js_pg) extended client findUnique
fluent-api-null (provider=postgresql, js_pg) extended client findUnique with include
fluent-api-null (provider=postgresql, js_pg) extended client findUnique with select
fluent-api-null (provider=postgresql, js_pg) extended client upsert
fluent-api-null (provider=postgresql, js_pg) extended client upsert with include
fluent-api-null (provider=postgresql, js_pg) extended client upsert with select
fluent-api-null (provider=postgresql, js_pg) regular client create
fluent-api-null (provider=postgresql, js_pg) regular client create with include
fluent-api-null (provider=postgresql, js_pg) regular client create with select
fluent-api-null (provider=postgresql, js_pg) regular client findFirst
fluent-api-null (provider=postgresql, js_pg) regular client findFirst with include
fluent-api-null (provider=postgresql, js_pg) regular client findFirst with select
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow with include
fluent-api-null (provider=postgresql, js_pg) regular client findFirstOrThrow with select
fluent-api-null (provider=postgresql, js_pg) regular client findUnique
fluent-api-null (provider=postgresql, js_pg) regular client findUnique with include
fluent-api-null (provider=postgresql, js_pg) regular client findUnique with select
fluent-api-null (provider=postgresql, js_pg) regular client upsert
fluent-api-null (provider=postgresql, js_pg) regular client upsert with include
fluent-api-null (provider=postgresql, js_pg) regular client upsert with select
fulltext-search (provider=postgresql, js_pg) bad query
globalOmit.test (provider=postgresql, js_pg) aggregate does not crash
globalOmit.test (provider=postgresql, js_pg) allows to include globally omitted field with omit: false
globalOmit.test (provider=postgresql, js_pg) allows to include globally omitted field with select: true
globalOmit.test (provider=postgresql, js_pg) count does not crash
globalOmit.test (provider=postgresql, js_pg) create
globalOmit.test (provider=postgresql, js_pg) createMany does not crash
globalOmit.test (provider=postgresql, js_pg) createManyAndReturn
globalOmit.test (provider=postgresql, js_pg) delete
globalOmit.test (provider=postgresql, js_pg) deleteMany does not crash
globalOmit.test (provider=postgresql, js_pg) excluding more than one field at a time
globalOmit.test (provider=postgresql, js_pg) findFirst
globalOmit.test (provider=postgresql, js_pg) findFirstOrThrow
globalOmit.test (provider=postgresql, js_pg) findMany
globalOmit.test (provider=postgresql, js_pg) findUnique
globalOmit.test (provider=postgresql, js_pg) findUniqueOrThrow
globalOmit.test (provider=postgresql, js_pg) groupBy does not crash
globalOmit.test (provider=postgresql, js_pg) omitting every field
globalOmit.test (provider=postgresql, js_pg) throws if non boolean field is used in omit
globalOmit.test (provider=postgresql, js_pg) throws if omit is not an object
globalOmit.test (provider=postgresql, js_pg) throws if omit is null
globalOmit.test (provider=postgresql, js_pg) throws if relation field is used in omit
globalOmit.test (provider=postgresql, js_pg) throws if unknown field is mentioned in omit
globalOmit.test (provider=postgresql, js_pg) throws if unknown model is mentioned in omit
globalOmit.test (provider=postgresql, js_pg) update
globalOmit.test (provider=postgresql, js_pg) updateMany does not crash
globalOmit.test (provider=postgresql, js_pg) upsert
globalOmit.test (provider=postgresql, js_pg) works after extending the client
globalOmit.test (provider=postgresql, js_pg) works for fluent api
globalOmit.test (provider=postgresql, js_pg) works for nested relations (include)
globalOmit.test (provider=postgresql, js_pg) works for nested relations (select)
globalOmit.test (provider=postgresql, js_pg) works with fluent api after extending the client
globalOmit.test (provider=postgresql, js_pg) works with result extension, depending on explicitly omitted field
handle-int-overflow (provider=postgresql, js_pg) big float in exponent notation
handle-int-overflow (provider=postgresql, js_pg) integer overflow
interactive-transactions (provider=postgresql, js_pg) already committed
interactive-transactions (provider=postgresql, js_pg) basic
interactive-transactions (provider=postgresql, js_pg) batching
interactive-transactions (provider=postgresql, js_pg) batching raw rollback
interactive-transactions (provider=postgresql, js_pg) batching rollback
interactive-transactions (provider=postgresql, js_pg) batching rollback within callback
interactive-transactions (provider=postgresql, js_pg) concurrent
interactive-transactions (provider=postgresql, js_pg) forbidden
interactive-transactions (provider=postgresql, js_pg) high concurrency with SET FOR UPDATE
interactive-transactions (provider=postgresql, js_pg) high concurrency with no conflicts
interactive-transactions (provider=postgresql, js_pg) high concurrency with write conflicts
interactive-transactions (provider=postgresql, js_pg) isolation levels invalid value
interactive-transactions (provider=postgresql, js_pg) isolation levels read committed
interactive-transactions (provider=postgresql, js_pg) isolation levels read uncommitted
interactive-transactions (provider=postgresql, js_pg) isolation levels repeatable read
interactive-transactions (provider=postgresql, js_pg) isolation levels serializable
interactive-transactions (provider=postgresql, js_pg) issue #19137
interactive-transactions (provider=postgresql, js_pg) middlewares middleware basic
interactive-transactions (provider=postgresql, js_pg) middlewares middleware exclude from transaction
interactive-transactions (provider=postgresql, js_pg) middlewares middlewares batching
interactive-transactions (provider=postgresql, js_pg) postgresql: nested create
interactive-transactions (provider=postgresql, js_pg) rollback query
interactive-transactions (provider=postgresql, js_pg) rollback throw
interactive-transactions (provider=postgresql, js_pg) rollback throw value
interactive-transactions (provider=postgresql, js_pg) rollback with catch calls
interactive-transactions (provider=postgresql, js_pg) rollback with finally calls
interactive-transactions (provider=postgresql, js_pg) rollback with then calls
interactive-transactions (provider=postgresql, js_pg) timeout default
interactive-transactions (provider=postgresql, js_pg) timeout override
interactive-transactions (provider=postgresql, js_pg) timeout override by PrismaClient
issues.11233 (provider=postgresql, js_pg) should not throw when using Prisma.empty inside $queryRaw
issues.11740-transaction-stored-query (provider=postgresql, js_pg) stored query trigger .requestTransaction twice should fail
issues.11740-transaction-stored-query (provider=postgresql, js_pg) stored query triggered twice should fail but not exit process
issues.11974 (provider=postgresql, js_pg) should not throw an error when aggregating two relation fields using aggregate
issues.11974 (provider=postgresql, js_pg) should not throw an error when counting two relation fields using find
issues.12003-order-by-self (provider=postgresql, js_pg) aggregate
issues.12378 (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 12378 issue 12378
issues.12557 (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 12557 issue 12557
issues.13097-group-by-enum (provider=postgresql, js_pg) groupBy on enumArray field
issues.13097-group-by-enum (provider=postgresql, js_pg) groupBy on enumValue field
issues.13766.at-unique (provider=postgresql, js_pg) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.at-unique (provider=postgresql, js_pg) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.13766.primary-key (provider=postgresql, js_pg) relationMode=prisma should not prevent any updates on a model when updating a field which is not referenced in a relation
issues.13766.primary-key (provider=postgresql, js_pg) relationMode=prisma should prevent updates on a model if any other relation references a field
issues.14271 (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=String @id, js_pg) issue 14271 issue 14271
issues.14373-batch-tx-error (provider=postgresql, js_pg) correctly reports location of a batch error
issues.14954-date-batch (provider=postgresql, js_pg) findFirst date with $transaction([...])
issues.14954-date-batch (provider=postgresql, js_pg) findFirst date with Promise.all
issues.14954-date-batch (provider=postgresql, js_pg) findUnique date with $transaction([...])
issues.14954-date-batch (provider=postgresql, js_pg) findUnique date with Promise.all
issues.15044 (provider=postgresql, js_pg) should not throw error when using connect inside transaction
issues.15176 (provider=postgresql, js_pg) should update both updatedAt fields on a model
issues.15177 (provider=postgresql, js_pg) should allow CRUD methods on a table column that has a space
issues.16195-index-out-of-bounds (provider=postgresql, js_pg) transaction
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 16390 when deleting an item, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) when deleting a category, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) issue 16390 when deleting an item, the corresponding entry in the implicit pivot table should be deleted
issues.16390-relation-mode-m-n-dangling-pivot (relationMode=prisma,provider=postgresql,onUpdate=undefined,onDelete=undefined,id=undefined, js_pg) when deleting a category, the corresponding entry in the implicit pivot table should be deleted
issues.16535-select-enum (provider=postgresql, js_pg) allows to select enum field
issues.17030-args-type-conflict (provider=postgresql, js_pg) include works correctly
issues.18276-batch-order (provider=postgresql, js_pg) executes batch in right order when using delayed middleware
issues.18276-batch-order (provider=postgresql, js_pg) executes batch queries in the right order when using extensions + middleware
issues.18292-inspect-loop.test (provider=postgresql, js_pg) depth option is respected
issues.18292-inspect-loop.test (provider=postgresql, js_pg) result extensions are still logged/inspected correctly
issues.18598-select-count-true (provider=postgresql, js_pg) works with _count shorthand
issues.18846-empty-array (provider=postgresql, js_pg) correctly rejects empty arrays in places where empty objects are allowed
issues.19997-select-include-undefined (provider=postgresql, js_pg) correctly infers selection when passing include: undefined
issues.19997-select-include-undefined (provider=postgresql, js_pg) correctly infers selection when passing select: undefined
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with a scalar in "by"
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with a scalar in "by" and no other selection
issues.20261-group-by-shortcut (provider=postgresql, js_pg) works with extended client
issues.20499-result-ext-count (provider=postgresql, js_pg) result extensions do not break .count
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing executeRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing queryRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing transactions with raw queries
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is returned on error.meta should return modelName on error.meta when performing prisma$transaction with the client
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is returned on error.meta should return modelName on error.meta when performing prisma.model.create
issues.21369-select-null (provider=postgresql, js_pg) SELECT NULL works
issues.21454-$type-in-json (provider=postgresql, js_pg) preserves deeply nested json with $type key inside
issues.21454-$type-in-json (provider=postgresql, js_pg) preserves json with $type key inside
issues.21592-char-truncation (provider=postgresql, js_pg) does not truncate the input
issues.21592-char-truncation (provider=postgresql, js_pg) upsert
issues.21631-batching-in-transaction (provider=postgresql, js_pg) Transactions and batching (query compacting) shouldn't interfere with result sets 2 `findUnique`s in a $transaction
issues.21631-batching-in-transaction (provider=postgresql, js_pg) Transactions and batching (query compacting) shouldn't interfere with result sets 2 concurrent `findUnique`s
issues.21631-batching-in-transaction (provider=postgresql, js_pg) Transactions and batching (query compacting) shouldn't interfere with result sets 2 independent `findUnique`s
issues.21807-citext-neon (provider=postgresql, js_pg) writing and reading a citext field works
issues.22610-parallel-batch (provider=postgresql, js_pg) batch does not times out
issues.22947-sqlite-conccurrent-upsert (provider=postgresql, js_pg) concurrent upserts should succeed
issues.23902 (provider=postgresql, js_pg) should not throw error when updating fields on a many to many join table
issues.25163-typed-sql-enum.test (provider=postgresql, js_pg) returns enums that are mapped to invalid JS identifier correctly
issues.4004 (provider=postgresql, js_pg) should not throw error when updating fields on a many to many join table
issues.5952-decimal-batch (provider=postgresql, js_pg) findFirst decimal with $transaction([...])
issues.5952-decimal-batch (provider=postgresql, js_pg) findFirst decimal with Promise.all
issues.5952-decimal-batch (provider=postgresql, js_pg) findUnique decimal with $transaction([...])
issues.5952-decimal-batch (provider=postgresql, js_pg) findUnique decimal with Promise.all
issues.6578 (provider=postgresql, js_pg) should assert Dates, DateTimes, Times and UUIDs are wrapped in quotes and are deserializable
issues.9678 (provider=postgresql, js_pg) concurrent deleteMany/createMany
json-fields (provider=postgresql, js_pg) empty object
json-fields (provider=postgresql, js_pg) object with .toJSON method
json-fields (provider=postgresql, js_pg) object with no prototype
json-fields (provider=postgresql, js_pg) simple object
json-list-push (provider=postgresql, js_pg) push with array value
json-list-push (provider=postgresql, js_pg) push with single element
json-null-types (provider=postgresql, js_pg) nullableJsonField JsonNull
json-null-types (provider=postgresql, js_pg) requiredJsonField DbNull
json-null-types (provider=postgresql, js_pg) requiredJsonField JsonNull
logging (provider=postgresql, js_pg) should log batched queries inside a ITX
logging (provider=postgresql, js_pg) should log queries inside a ITX
logging (provider=postgresql, js_pg) should log transaction batched queries
methods.count (provider=postgresql, js_pg) bad prop
methods.count (provider=postgresql, js_pg) select all false
methods.count (provider=postgresql, js_pg) select all true
methods.count (provider=postgresql, js_pg) select mixed
methods.count (provider=postgresql, js_pg) select mixed where
methods.count (provider=postgresql, js_pg) select where
methods.count (provider=postgresql, js_pg) simple
methods.count (provider=postgresql, js_pg) take
methods.count (provider=postgresql, js_pg) where
methods.createMany (provider=postgresql, js_pg) should create many records
methods.createMany (provider=postgresql, js_pg) should create a single record with many nested create
methods.createManyAndReturn-supported (provider=postgresql, js_pg) distinct should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) include _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) orderBy should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) select _count should fail
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) should fail include on the user side
methods.createManyAndReturn-supported (provider=postgresql, js_pg) take should fail
methods.findFirstOrThrow (provider=postgresql, js_pg) finds existing record
methods.findFirstOrThrow (provider=postgresql, js_pg) reports correct method name in case of validation error
methods.findFirstOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.findFirstOrThrow (provider=postgresql, js_pg) works with interactive transactions
methods.findFirstOrThrow (provider=postgresql, js_pg) works with transactions
methods.findUniqueOrThrow (provider=postgresql, js_pg) reports correct method name in case of validation error
methods.findUniqueOrThrow (provider=postgresql, js_pg) throws if record was not found
methods.findUniqueOrThrow (provider=postgresql, js_pg) works with interactive transactions
methods.findUniqueOrThrow (provider=postgresql, js_pg) works with transactions
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) distinct should fail
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) include _count should fail
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) orderBy should fail
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) select _count should fail
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) should accept include on the post side
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) should fail include on the user side
methods.updateManyAndReturn-supported (provider=postgresql, js_pg) take should fail
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when the unique field defined in where clause has the same value as defined in the create arguments
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when there is only 1 unique field in the where clause
methods.upsert.native-atomic (provider=postgresql, js_pg) should only use ON CONFLICT when update arguments do not have any nested queries
methods.upsert.native-atomic (provider=postgresql, js_pg) should perform an upsert using ON CONFLICT
methods.upsert.native-atomic (provider=postgresql, js_pg) should perform an upsert using ON CONFLICT with compound id
methods.upsert.native-atomic (provider=postgresql, js_pg) should perform an upsert using ON CONFLICT with compound uniques
methods.upsert.native-atomic (provider=postgresql, js_pg) should perform an upsert using ON CONFLICT with id
methods.upsert.simple (provider=postgresql, js_pg) should create a record using upsert
methods.upsert.simple (provider=postgresql, js_pg) should update a record using upsert
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in json format
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in prometheus format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in json format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in prometheus format
metrics.enabled (provider=postgresql, js_pg) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=postgresql, js_pg) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) multiple instances does not share metrics between 2 different instances of client
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with Prisma.sql instance
middleware-raw-args (provider=postgresql, js_pg) $queryRaw with template string
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create a string that looks like a uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a date and uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string and a string that looks like a date
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string and a string that looks like a uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string that looks like a date
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with a string, date and uuid
mixed-string-uuid-datetime-list-inputs (provider=postgresql, js_pg) create with two strings
multi-schema (provider=postgresql, mapTable=DIFFERENT_NAMES, js_pg) multischema delete
multi-schema (provider=postgresql, mapTable=IDENTICAL_NAMES, js_pg) multischema delete
multi-schema (provider=postgresql, mapTable=false, js_pg) multischema delete
multiple-types (provider=postgresql, js_pg) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=postgresql, js_pg) Bool field: true or false should succeed
multiple-types (provider=postgresql, js_pg) String field: true or false as string should succeed
multiple-types (provider=postgresql, js_pg) a record with all fields set to null should succeed
multiple-types (provider=postgresql, js_pg) all fields are null
multiple-types (provider=postgresql, js_pg) shows differences between queryRaw and findMany
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Args, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=At, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=AtBasic, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=AtLoose, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=AtStrict, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Batch, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=BatchPayload, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Check, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=ComputeRaw, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Datasources, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Enumerable, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=ErrorFormat, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Exact, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Extends, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Extension, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=False, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Fetcher, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=GetEvents, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=GetLogType, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=GetScalarType, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Has, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=InputJsonArray, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=InputJsonObject, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=InputJsonValue, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=IntFilter, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=IntersectOf, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=JsonArray, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=JsonObject, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=JsonValue, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Key, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Keys, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=LogDefinition, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=LogEvent, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=LogLevel, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Merge, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Metric, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Middleware, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=MiddlewareParams, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=ModelName, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Mutation, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=NestedIntFilter, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Not, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=OptionalFlat, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Or, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Overwrite, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Payload, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=PrismaAction, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Promise, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=PromiseReturnType, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=PromiseType, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Query, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=QueryEvent, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=RequiredKeys, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Result, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=SelectSubset, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=SortOrder, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Strict, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Subset, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=SubsetIntersection, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=TransactionClient, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=True, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=TrueKeys, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=TruthyKeys, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=TypeMap, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=TypeMapCb, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=UnEnumerate, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Union, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=Without, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-enum (provider=postgresql, enumName=constructor, js_pg) allows to create enum with conflicting name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Args, js_pg) allows to use Args name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Args, js_pg) allows to use Args name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=At, js_pg) allows to use At name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=At, js_pg) allows to use At name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtBasic, js_pg) allows to use AtBasic name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtBasic, js_pg) allows to use AtBasic name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtLoose, js_pg) allows to use AtLoose name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtLoose, js_pg) allows to use AtLoose name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtStrict, js_pg) allows to use AtStrict name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=AtStrict, js_pg) allows to use AtStrict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Batch, js_pg) allows to use Batch name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Batch, js_pg) allows to use Batch name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=BatchPayload, js_pg) allows to use BatchPayload name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=BatchPayload, js_pg) allows to use BatchPayload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Check, js_pg) allows to use Check name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Check, js_pg) allows to use Check name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ComputeRaw, js_pg) allows to use ComputeRaw name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ComputeRaw, js_pg) allows to use ComputeRaw name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Datasources, js_pg) allows to use Datasources name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Datasources, js_pg) allows to use Datasources name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Enumerable, js_pg) allows to use Enumerable name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Enumerable, js_pg) allows to use Enumerable name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ErrorFormat, js_pg) allows to use ErrorFormat name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ErrorFormat, js_pg) allows to use ErrorFormat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Exact, js_pg) allows to use Exact name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Exact, js_pg) allows to use Exact name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Extends, js_pg) allows to use Extends name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Extends, js_pg) allows to use Extends name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Extension, js_pg) allows to use Extension name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Extension, js_pg) allows to use Extension name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=False, js_pg) allows to use False name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=False, js_pg) allows to use False name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Fetcher, js_pg) allows to use Fetcher name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Fetcher, js_pg) allows to use Fetcher name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetEvents, js_pg) allows to use GetEvents name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetEvents, js_pg) allows to use GetEvents name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetLogType, js_pg) allows to use GetLogType name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetLogType, js_pg) allows to use GetLogType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetScalarType, js_pg) allows to use GetScalarType name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=GetScalarType, js_pg) allows to use GetScalarType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Has, js_pg) allows to use Has name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Has, js_pg) allows to use Has name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonArray, js_pg) allows to use InputJsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonArray, js_pg) allows to use InputJsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonObject, js_pg) allows to use InputJsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonObject, js_pg) allows to use InputJsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonValue, js_pg) allows to use InputJsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=InputJsonValue, js_pg) allows to use InputJsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=IntFilter, js_pg) allows to use IntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=IntFilter, js_pg) allows to use IntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=IntersectOf, js_pg) allows to use IntersectOf name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=IntersectOf, js_pg) allows to use IntersectOf name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonArray, js_pg) allows to use JsonArray name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonArray, js_pg) allows to use JsonArray name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonObject, js_pg) allows to use JsonObject name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonObject, js_pg) allows to use JsonObject name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonValue, js_pg) allows to use JsonValue name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=JsonValue, js_pg) allows to use JsonValue name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Key, js_pg) allows to use Key name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Key, js_pg) allows to use Key name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Keys, js_pg) allows to use Keys name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Keys, js_pg) allows to use Keys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogDefinition, js_pg) allows to use LogDefinition name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogDefinition, js_pg) allows to use LogDefinition name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogEvent, js_pg) allows to use LogEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogEvent, js_pg) allows to use LogEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogLevel, js_pg) allows to use LogLevel name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=LogLevel, js_pg) allows to use LogLevel name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Merge, js_pg) allows to use Merge name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Merge, js_pg) allows to use Merge name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Metric, js_pg) allows to use Metric name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Metric, js_pg) allows to use Metric name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Middleware, js_pg) allows to use Middleware name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Middleware, js_pg) allows to use Middleware name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=MiddlewareParams, js_pg) allows to use MiddlewareParams name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=MiddlewareParams, js_pg) allows to use MiddlewareParams name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ModelName, js_pg) allows to use ModelName name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=ModelName, js_pg) allows to use ModelName name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Mutation, js_pg) allows to use Mutation name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Mutation, js_pg) allows to use Mutation name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=NestedIntFilter, js_pg) allows to use NestedIntFilter name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=NestedIntFilter, js_pg) allows to use NestedIntFilter name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Not, js_pg) allows to use Not name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Not, js_pg) allows to use Not name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=OptionalFlat, js_pg) allows to use OptionalFlat name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=OptionalFlat, js_pg) allows to use OptionalFlat name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Or, js_pg) allows to use Or name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Or, js_pg) allows to use Or name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Overwrite, js_pg) allows to use Overwrite name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Overwrite, js_pg) allows to use Overwrite name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Payload, js_pg) allows to use Payload name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Payload, js_pg) allows to use Payload name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PrismaAction, js_pg) allows to use PrismaAction name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PrismaAction, js_pg) allows to use PrismaAction name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Promise, js_pg) allows to use Promise name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Promise, js_pg) allows to use Promise name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PromiseReturnType, js_pg) allows to use PromiseReturnType name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PromiseReturnType, js_pg) allows to use PromiseReturnType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PromiseType, js_pg) allows to use PromiseType name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=PromiseType, js_pg) allows to use PromiseType name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Query, js_pg) allows to use Query name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Query, js_pg) allows to use Query name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=QueryEvent, js_pg) allows to use QueryEvent name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=QueryEvent, js_pg) allows to use QueryEvent name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=RequiredKeys, js_pg) allows to use RequiredKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=RequiredKeys, js_pg) allows to use RequiredKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Result, js_pg) allows to use Result name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Result, js_pg) allows to use Result name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SelectSubset, js_pg) allows to use SelectSubset name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SelectSubset, js_pg) allows to use SelectSubset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SortOrder, js_pg) allows to use SortOrder name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SortOrder, js_pg) allows to use SortOrder name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Strict, js_pg) allows to use Strict name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Strict, js_pg) allows to use Strict name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Subset, js_pg) allows to use Subset name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Subset, js_pg) allows to use Subset name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SubsetIntersection, js_pg) allows to use SubsetIntersection name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=SubsetIntersection, js_pg) allows to use SubsetIntersection name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TransactionClient, js_pg) allows to use TransactionClient name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TransactionClient, js_pg) allows to use TransactionClient name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=True, js_pg) allows to use True name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=True, js_pg) allows to use True name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TrueKeys, js_pg) allows to use TrueKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TrueKeys, js_pg) allows to use TrueKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TruthyKeys, js_pg) allows to use TruthyKeys name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TruthyKeys, js_pg) allows to use TruthyKeys name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TypeMap, js_pg) allows to use TypeMap name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TypeMap, js_pg) allows to use TypeMap name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TypeMapCb, js_pg) allows to use TypeMapCb name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=TypeMapCb, js_pg) allows to use TypeMapCb name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=UnEnumerate, js_pg) allows to use UnEnumerate name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=UnEnumerate, js_pg) allows to use UnEnumerate name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Union, js_pg) allows to use Union name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Union, js_pg) allows to use Union name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Without, js_pg) allows to use Without name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=Without, js_pg) allows to use Without name for a model name (relation)
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=constructor, js_pg) allows to use constructor name for a model name
naming-conflict.built-in-types-vs-model (provider=postgresql, typeName=constructor, js_pg) allows to use constructor name for a model name (relation)
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelAggregate, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelCount, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelDefault, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelDelete, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelFieldRefs, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelGroupBy, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelInclude, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelPayload, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelResult, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelSelect, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelUpdate, js_pg) allows to use models of conflicting names
naming-conflict.model-vs-model (provider=postgresql, conflictingModel=ModelUpsert, js_pg) allows to use models of conflicting names
omit.test (provider=postgresql, js_pg) createManyAndReturn
omit.test (provider=postgresql, js_pg) excluding all fields of a model throws validation error
omit.test (provider=postgresql, js_pg) excluding dependency of a computed field
omit.test (provider=postgresql, js_pg) false value
omit.test (provider=postgresql, js_pg) findFirst
omit.test (provider=postgresql, js_pg) findFirstOrThrow
omit.test (provider=postgresql, js_pg) non-existing false field in omit throw validation error
omit.test (provider=postgresql, js_pg) non-existing true field in omit throw validation error
omit.test (provider=postgresql, js_pg) omit combined with include
omit.test (provider=postgresql, js_pg) omit nested in include
omit.test (provider=postgresql, js_pg) omit nested in select
omit.test (provider=postgresql, js_pg) update
omit.test (provider=postgresql, js_pg) upsert
optimistic-concurrency-control (provider=postgresql, js_pg) deleteMany
optimistic-concurrency-control (provider=postgresql, js_pg) update
optimistic-concurrency-control (provider=postgresql, js_pg) update with upsert relation
optimistic-concurrency-control (provider=postgresql, js_pg) updateMany
optimistic-concurrency-control (provider=postgresql, js_pg) upsert
prisma-dot-dmmf (provider=postgresql, js_pg) exports Prisma.dmmf (default)
prisma-promise (provider=postgresql, js_pg) $queryRaw fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) $queryRaw repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) $queryRaw repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) $queryRaw repeated calls to .then
prisma-promise (provider=postgresql, js_pg) $queryRaw repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) $queryRawUnsafe fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) $queryRawUnsafe repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) $queryRawUnsafe repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) $queryRawUnsafe repeated calls to .then
prisma-promise (provider=postgresql, js_pg) $queryRawUnsafe repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) aggregate fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) aggregate repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) aggregate repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) aggregate repeated calls to .then
prisma-promise (provider=postgresql, js_pg) aggregate repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) count fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) count repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) count repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) count repeated calls to .then
prisma-promise (provider=postgresql, js_pg) count repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) create fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) create repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) create repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) create repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) createMany fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) createMany repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) createMany repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) createMany repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) delete fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) delete repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) delete repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) delete repeated calls to .then
prisma-promise (provider=postgresql, js_pg) delete repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) deleteMany fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) deleteMany repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) deleteMany repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) deleteMany repeated calls to .then
prisma-promise (provider=postgresql, js_pg) deleteMany repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) findFirstOrThrow fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) findFirstOrThrow repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) findFirstOrThrow repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) findFirstOrThrow repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) findUnique fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) findUnique repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) findUnique repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) findUnique repeated calls to .then
prisma-promise (provider=postgresql, js_pg) findUnique repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) findUniqueOrThrow fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) findUniqueOrThrow repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) findUniqueOrThrow repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) findUniqueOrThrow repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) update fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) update repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) update repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) update repeated mixed calls to .then, .catch, .finally
prisma-promise (provider=postgresql, js_pg) updateMany fluent promises should have promise properties
prisma-promise (provider=postgresql, js_pg) updateMany repeated calls to .catch
prisma-promise (provider=postgresql, js_pg) updateMany repeated calls to .finally
prisma-promise (provider=postgresql, js_pg) updateMany repeated mixed calls to .then, .catch, .finally
query-error-logging (provider=postgresql, js_pg) findFirstOrThrow when error thrown
query-error-logging (provider=postgresql, js_pg) findUniqueOrThrown when error thrown
query-error-logging (provider=postgresql, js_pg) middleware captures errors
query-validation (provider=postgresql, previewFeatures=, js_pg) empty selection
query-validation (provider=postgresql, previewFeatures=, js_pg) invalid argument type
query-validation (provider=postgresql, previewFeatures=, js_pg) invalid argument value
query-validation (provider=postgresql, previewFeatures=, js_pg) invalid field ref
query-validation (provider=postgresql, previewFeatures=, js_pg) missing one of the specific required fields
query-validation (provider=postgresql, previewFeatures=, js_pg) missing required argument: nested
query-validation (provider=postgresql, previewFeatures=, js_pg) union error
query-validation (provider=postgresql, previewFeatures=, js_pg) union error: different paths
query-validation (provider=postgresql, previewFeatures=, js_pg) union error: invalid argument type vs required argument missing
query-validation (provider=postgresql, previewFeatures=, js_pg) unknown argument
query-validation (provider=postgresql, previewFeatures=, js_pg) unknown object field
query-validation (provider=postgresql, previewFeatures=, js_pg) unknown selection field
raw-queries.send-type-hints (provider=postgresql, js_pg) Uint8Array ($executeRaw + Prisma.sql)
raw-queries.send-type-hints (provider=postgresql, js_pg) Uint8Array ($executeRaw)
raw-queries.send-type-hints (provider=postgresql, js_pg) Uint8Array ($queryRaw + Prisma.sql)
raw-queries.send-type-hints (provider=postgresql, js_pg) Uint8Array ($queryRaw)
raw-queries.typed-results (provider=postgresql, js_pg) query model with a BigInt = -2147483647 (-i32)
raw-queries.typed-results (provider=postgresql, js_pg) query model with a BigInt = -MAX_SAFE_INTEGER
raw-queries.typed-results (provider=postgresql, js_pg) query model with a BigInt = 2147483647 (i32)
raw-queries.typed-results (provider=postgresql, js_pg) query model with a BigInt = MAX_SAFE_INTEGER
raw-queries.typed-results (provider=postgresql, js_pg) query model with multiple types
raw-queries.typed-results (provider=postgresql, js_pg) simple expression
raw-queries.typed-results (provider=postgresql, js_pg) when BigInt value is not a safe integer query model with a BigInt = MAX_SAFE_INTEGER + MAX_SAFE_INTEGER BigInt is natively supported
raw-queries.typed-results-advanced-and-native-types (provider=postgresql, js_pg) query model with multiple fields
referentialActions-setDefault.tests_1-to-1 (provider=postgresql, js_pg) 1:n mandatory (explicit) [create] [create] creating a table with SetDefault is accepted
referentialActions-setDefault.tests_1-to-1 (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in profile, which throws
referentialActions-setDefault.tests_1-to-1 (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] without mysql [delete] deleting existing user one triggers SetDefault
referentialActions-setDefault.tests_1-to-1 (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in profile, which throws
referentialActions-setDefault.tests_1-to-1 (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] without mysql [update] changing existing user id to a new one triggers SetDefault
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [create] [create] creating a table with SetDefault is accepted
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] [delete] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [delete] without mysql [delete] deleting existing user one triggers SetDefault
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] [update] removing user with default id and changing existing user id to a new one triggers SetDefault in post, which throws
referentialActions-setDefault.tests_1-to-n (provider=postgresql, js_pg) 1:n mandatory (explicit) [update] without mysql [update] changing existing user id to a new one triggers SetDefault
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature aggregate
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature count
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature create
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature createMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature delete
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature deleteMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature findFirst
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature findFirstOrThrow
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature findMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature findUnique
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature findUniqueOrThrow
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature groupBy
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature update
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature updateMany
relation-load-strategy-unsupported.preview-feature-disabled (provider=postgresql, js_pg) relationLoadStrategy with no relationJoins preview feature upsert
relationMode-17255-mixed-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) original [update] main with nested delete alice should succeed
relationMode-17255-mixed-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) original [update] main with nested disconnect alice should succeed
relationMode-17255-mixed-actions (relationMode=prisma,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) original [update] main with nested delete alice should succeed
relationMode-17255-mixed-actions (relationMode=prisma,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) original [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) not-original onDelete: Cascade [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) not-original onDelete: Cascade [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=DEFAULT,onDelete=DEFAULT,id=String @id, js_pg) not-original onDelete: DEFAULT [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=NoAction,onDelete=NoAction,id=String @id, js_pg) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
relationMode-17255-same-actions (relationMode=foreignKeys,provider=postgresql,onUpdate=Restrict,onDelete=Restrict,id=String @id, js_pg) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) not-original onDelete: Cascade [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=Cascade,onDelete=Cascade,id=String @id, js_pg) not-original onDelete: Cascade [update] main with nested disconnect alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=DEFAULT,onDelete=DEFAULT,id=String @id, js_pg) not-original onDelete: DEFAULT [update] main with nested delete alice should succeed
relationMode-17255-same-actions (relationMode=prisma,provider=postgresql,onUpdate=Restrict,onDelete=Restrict,id=String @id, js_pg) not-original onUpdate: Restrict, NoAction, SetNull relationMode=foreignKeys [update] main with nested delete alice should fail
runtime-import (provider=postgresql, js_pg) imported files have the expected annotations
runtime-import (provider=postgresql, js_pg) imports correct runtime
skip.test (provider=postgresql, js_pg) after extension skips fields in omit
skip.test (provider=postgresql, js_pg) skips fields in omit
tracing (provider=postgresql, js_pg) tracing connect should trace the explicit $connect call
tracing (provider=postgresql, js_pg) tracing connect should trace the implicit $connect call
tracing (provider=postgresql, js_pg) tracing disconnect should trace $disconnect
tracing (provider=postgresql, js_pg) tracing on $raw methods $executeRaw
tracing (provider=postgresql, js_pg) tracing on $raw methods $queryRaw
tracing (provider=postgresql, js_pg) tracing on crud methods aggregate
tracing (provider=postgresql, js_pg) tracing on crud methods count
tracing (provider=postgresql, js_pg) tracing on crud methods create
tracing (provider=postgresql, js_pg) tracing on crud methods delete
tracing (provider=postgresql, js_pg) tracing on crud methods deleteMany()
tracing (provider=postgresql, js_pg) tracing on crud methods read
tracing (provider=postgresql, js_pg) tracing on crud methods update
tracing (provider=postgresql, js_pg) tracing on transactions $transaction
tracing (provider=postgresql, js_pg) tracing on transactions interactive transaction commit
tracing (provider=postgresql, js_pg) tracing on transactions interactive transaction rollback
tracing (provider=postgresql, js_pg) tracing with custom span
tracing (provider=postgresql, js_pg) tracing with middleware should succeed
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-lists.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-lists.test (provider=postgresql, js_pg) xml - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) enum - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) enum - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) xml - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) xml - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) BigInt - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) BigInt - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Date - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Date - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) DateTime - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) DateTime - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Decimal - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Decimal - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Time - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) bytes - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) bytes - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) double - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) double - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) enum - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) enum - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) int - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) int - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) real - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) real - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) string - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) string - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) uuid - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) uuid - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) xml - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) xml - output
unsupported-action (provider=postgresql, js_pg) unsupported method
upsert-relation-mode-prisma.test (provider=postgresql, js_pg) calling upsert two times in a row does nothing
views (provider=postgresql, js_pg) should query views with a related column
views (provider=postgresql, js_pg) should simple query a view
