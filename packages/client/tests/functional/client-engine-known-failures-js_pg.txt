blog-update (provider=postgresql, js_pg) should create a user and post and connect them together
blog-update (provider=postgresql, js_pg) should create a user and post and disconnect them
filter-count-relations (provider=postgresql, js_pg) nested relation
fulltext-search (provider=postgresql, js_pg) bad query
globalOmit.test (provider=postgresql, js_pg) createMany does not crash
globalOmit.test (provider=postgresql, js_pg) deleteMany does not crash
globalOmit.test (provider=postgresql, js_pg) updateMany does not crash
interactive-transactions (provider=postgresql, js_pg) batching raw rollback
interactive-transactions (provider=postgresql, js_pg) timeout default
interactive-transactions (provider=postgresql, js_pg) timeout override
interactive-transactions (provider=postgresql, js_pg) timeout override by PrismaClient
issues.13097-group-by-enum (provider=postgresql, js_pg) groupBy on enumArray field
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing executeRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing queryRaw
issues.20724 (provider=postgresql, js_pg) unique constraint violation modelName is not returned on error.meta should not return modelName when performing transactions with raw queries
issues.22947-sqlite-conccurrent-upsert (provider=postgresql, js_pg) concurrent upserts should succeed
methods.findFirstOrThrow (provider=postgresql, js_pg) works with transactions
methods.findUniqueOrThrow (provider=postgresql, js_pg) works with transactions
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in json format
metrics.enabled (provider=postgresql, js_pg) after a query includes global labels in prometheus format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in json format
metrics.enabled (provider=postgresql, js_pg) after a query returns metrics in prometheus format
metrics.enabled (provider=postgresql, js_pg) before a query SQL Providers: should have the same keys, before and after a query
metrics.enabled (provider=postgresql, js_pg) empty $metrics.json() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) empty $metrics.prometheus() does not crash before client is connected
metrics.enabled (provider=postgresql, js_pg) multiple instances does not share metrics between 2 different instances of client
multiple-types (provider=postgresql, js_pg) 2 records, 1st with null, 2nd with values should succeed
multiple-types (provider=postgresql, js_pg) Bool field: true or false should succeed
multiple-types (provider=postgresql, js_pg) String field: true or false as string should succeed
multiple-types (provider=postgresql, js_pg) a record with all fields set to null should succeed
multiple-types (provider=postgresql, js_pg) all fields are null
optimistic-concurrency-control (provider=postgresql, js_pg) deleteMany
raw-queries.typed-results-advanced-and-native-types (provider=postgresql, js_pg) query model with multiple fields
tracing (provider=postgresql, js_pg) tracing connect should trace the implicit $connect call
tracing (provider=postgresql, js_pg) tracing on transactions $transaction
typed-sql.postgres-lists.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars-nullable.test (provider=postgresql, js_pg) json - output
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) Time - input
typed-sql.postgres-scalars.test (provider=postgresql, js_pg) json - output
unsupported-action (provider=postgresql, js_pg) unsupported method
