// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`transaction-stored-query (provider=cockroachdb) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=cockroachdb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=cockroachdb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=mongodb) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=mongodb) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=mongodb) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=mysql) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=mysql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=mysql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`Resource_email_key\`
`;

exports[`transaction-stored-query (provider=postgresql) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=postgresql) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=postgresql) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=sqlite) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=sqlite) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=sqlite) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the fields: (\`email\`)
`;

exports[`transaction-stored-query (provider=sqlserver) no multiple resolves should happen 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX 
  XX process.on('multipleResolves', mockMultipleResolve)
  XX 
→ XX const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;

exports[`transaction-stored-query (provider=sqlserver) stored query trigger .requestTransaction twice should fail 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

  XX })
  XX 
  XX test('stored query trigger .requestTransaction twice should fail', async () => {
→ XX   const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;

exports[`transaction-stored-query (provider=sqlserver) stored query triggered twice should fail but not exit process 1`] = `

Invalid \`prisma.resource.create()\` invocation in
/client/tests/functional/transaction-stored-query/tests.ts:0:0

   XX  */
  XX testMatrix.setupTestSuite(() => {
  XX   test('stored query triggered twice should fail but not exit process', async () => {
→ XX     const query = prisma.resource.create(
Unique constraint failed on the constraint: \`dbo.Resource\`
`;
