// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`field-reference.string (provider=cockroachdb, runtime=edge) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.product.fields.notString
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=cockroachdb, runtime=edge) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.identicalToProduct.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=cockroachdb, runtime=edge) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.otherModel.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=cockroachdb, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=cockroachdb, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=cockroachdb, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=edge) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.product.fields.notString
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=edge) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.identicalToProduct.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=edge) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.otherModel.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mongodb, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=edge) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.product.fields.notString
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=edge) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.identicalToProduct.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=edge) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.otherModel.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=mysql, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=edge) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.product.fields.notString
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=edge) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.identicalToProduct.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=edge) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.otherModel.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=postgresql, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlite, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlite, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlite, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=edge) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.product.fields.notString
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=edge) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.identicalToProduct.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=edge) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation:

{
  where: {
    string: {
      equals: prisma.otherModel.fields.string
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    }
  }
}

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=node) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong field type', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.product.fields.notString
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.product.fields.notString on prisma.findManyProduct. Provided IntFieldRefInput<Product>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=node) wrong identical model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong identical model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.identicalToProduct.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.identicalToProduct.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<IdenticalToProduct>, expected String or StringFieldRefInput.


`;

exports[`field-reference.string (provider=sqlserver, runtime=node) wrong model 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/string/tests.ts:0:0

  XX })
  XX 
  XX test('wrong model', async () => {
→ XX   const products = prisma.product.findMany({
         where: {
           string: {
             equals: prisma.otherModel.fields.string
             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           }
         }
       })

Argument equals: Got invalid value prisma.otherModel.fields.string on prisma.findManyProduct. Provided StringFieldRefInput<OtherModel>, expected String or StringFieldRefInput.


`;
