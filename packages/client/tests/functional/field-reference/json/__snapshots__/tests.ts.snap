// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`field-reference.json (provider=cockroachdb) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/json/tests.ts:126:39

  123 })
  124 
  125 test('wrong field type', async () => {
→ 126   const products = prisma.product.findMany({
          where: {
            properties1: {
              equals: prisma.product.fields.title
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
          }
        })

Argument equals: Got invalid value prisma.product.fields.title on prisma.findManyProduct. Provided StringFieldRefInput<Product>, expected Json or JsonFieldRefInput or JsonNullValueFilter.


`;

exports[`field-reference.json (provider=mongodb) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/json/tests.ts:126:39

  123 })
  124 
  125 test('wrong field type', async () => {
→ 126   const products = prisma.product.findMany({
          where: {
            properties1: {
              equals: prisma.product.fields.title
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
          }
        })

Argument equals: Got invalid value prisma.product.fields.title on prisma.findManyProduct. Provided StringFieldRefInput<Product>, expected Json or JsonFieldRefInput.


`;

exports[`field-reference.json (provider=mysql) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/json/tests.ts:126:39

  123 })
  124 
  125 test('wrong field type', async () => {
→ 126   const products = prisma.product.findMany({
          where: {
            properties1: {
              equals: prisma.product.fields.title
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
          }
        })

Argument equals: Got invalid value prisma.product.fields.title on prisma.findManyProduct. Provided StringFieldRefInput<Product>, expected Json or JsonFieldRefInput or JsonNullValueFilter.


`;

exports[`field-reference.json (provider=postgresql) wrong field type 1`] = `

Invalid \`prisma.product.findMany()\` invocation in
/client/tests/functional/field-reference/json/tests.ts:126:39

  123 })
  124 
  125 test('wrong field type', async () => {
→ 126   const products = prisma.product.findMany({
          where: {
            properties1: {
              equals: prisma.product.fields.title
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            }
          }
        })

Argument equals: Got invalid value prisma.product.fields.title on prisma.findManyProduct. Provided StringFieldRefInput<Product>, expected Json or JsonFieldRefInput or JsonNullValueFilter.


`;
