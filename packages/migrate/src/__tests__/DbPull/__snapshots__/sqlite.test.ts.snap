// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`common/sqlite basic introspection 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}

`;

exports[`common/sqlite basic introspection with --url 1`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}

`;

exports[`common/sqlite basic introspection with invalid --url - empty host 2`] = ``;

exports[`common/sqlite basic introspection with invalid --url if schema is unspecified 2`] = ``;

exports[`common/sqlite basic introspection with schema and --url missing file: prefix should fail 2`] = ``;

exports[`common/sqlite basic introspection without schema and with --url missing "file:" prefix should fail 2`] = ``;

exports[`common/sqlite introspection --force 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}

`;

exports[`common/sqlite should succeed and keep changes to valid schema and output warnings when using --print 2`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model AwesomeUser {
  email    String           @unique(map: "User.email")
  id       Int              @id @default(autoincrement())
  name     String?
  newPosts AwesomeNewPost[]
  profile  AwesomeProfile?

  @@map("User")
}

model AwesomeNewPost {
  authorId  Int
  content   String?
  createdAt DateTime    @default(now())
  id        Int         @id @default(autoincrement())
  published Boolean     @default(false)
  title     String
  author    AwesomeUser @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("Post")
}

model AwesomeProfile {
  bio    String?
  id     Int         @id @default(autoincrement())
  userId Int         @unique(map: "Profile.userId")
  user   AwesomeUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Profile")
}

`;

exports[`common/sqlite should succeed when --local-d1 and a single local Cloudflare D1 database exists 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:.wrangler/state/v3/d1/miniflare-D1DatabaseObject/5d11bcce386042472d19a6a4f58e40041ebc5932c972e1449cbf404f3e3c4a7a.sqlite"
}

model Post {
  id       Int    @id @default(autoincrement())
  title    String
  authorId Int
  User     User   @relation(fields: [authorId], references: [id])
}

model User {
  id     Int     @id @default(autoincrement())
  email  String  @unique
  count1 Int
  name   String?
  Post   Post[]
}

`;

exports[`common/sqlite should succeed when reintrospecting with --local-d1 and a single local Cloudflare D1 database exists 2`] = ``;

exports[`common/sqlite should succeed when schema is invalid and using --force 7`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}

`;
