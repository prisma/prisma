// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SQL Server basic introspection --url 2`] = `
datasource db {
  provider = "sqlserver"
  url      = "sqlserver://localhost:5432;database=tests-migrate;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;encrypt=DANGER_PLAINTEXT"
}

model jobs {
  job_id      Int       @id @default(autoincrement())
  customer_id Int?
  description String?   @db.VarChar(200)
  created_at  DateTime?
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`SQL Server basic introspection 1`] = `
datasource db {
  provider = "sqlserver"
  url      = env("TEST_MSSQL_JDBC_URI_MIGRATE")
}

model jobs {
  job_id      Int       @id @default(autoincrement())
  customer_id Int?
  description String?   @db.VarChar(200)
  created_at  DateTime?
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`common/sqlite basic introspection 1`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite basic introspection with --url 1`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite basic introspection with invalid --url - empty host 2`] = ``;

exports[`common/sqlite basic introspection with invalid --url 2`] = ``;

exports[`common/sqlite introspection --force 1`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite should succeed and keep changes to valid schema and output warnings when using --print 2`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model AwesomeUser {
  email    String           @unique
  id       Int              @id @default(autoincrement())
  name     String?
  newPosts AwesomeNewPost[]
  profile  AwesomeProfile?

  @@map("User")
}

model AwesomeNewPost {
  authorId  Int
  content   String?
  createdAt DateTime    @default(now())
  id        Int         @id @default(autoincrement())
  published Boolean     @default(false)
  title     String
  author    AwesomeUser @relation(fields: [authorId], references: [id])

  @@map("Post")
}

model AwesomeProfile {
  bio    String?
  id     Int         @id @default(autoincrement())
  userId Int         @unique
  user   AwesomeUser @relation(fields: [userId], references: [id])

  @@map("Profile")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`common/sqlite should succeed when schema is invalid and using --force 5`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}

`;

exports[`mysql basic introspection --url 2`] = `
datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:5432/tests"
}

model your_log {
  click_id     Int      @id @default(autoincrement())
  click_time   DateTime @db.DateTime(0)
  shorturl     String   @db.VarChar(200)
  referrer     String   @db.VarChar(200)
  user_agent   String   @db.VarChar(255)
  ip_address   String   @db.VarChar(41)
  country_code String   @db.Char(2)

  @@index([shorturl], name: "shorturl")
}

model your_options {
  option_id    BigInt @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @default("") @db.VarChar(64)
  option_value String @db.LongText

  @@id([option_id, option_name])
  @@index([option_name], name: "option_name")
}

model your_url {
  keyword   String   @id @db.VarChar(200)
  url       String   @db.Text
  title     String?  @db.Text
  timestamp DateTime @default(now()) @db.Timestamp(0)
  ip        String   @db.VarChar(41)
  clicks    Int      @db.UnsignedInt

  @@index([ip], name: "ip")
  @@index([timestamp], name: "timestamp")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`mysql basic introspection 1`] = `
datasource db {
  provider = "mysql"
  url      = env("TEST_MYSQL_URI")
}

model your_log {
  click_id     Int      @id @default(autoincrement())
  click_time   DateTime @db.DateTime(0)
  shorturl     String   @db.VarChar(200)
  referrer     String   @db.VarChar(200)
  user_agent   String   @db.VarChar(255)
  ip_address   String   @db.VarChar(41)
  country_code String   @db.Char(2)

  @@index([shorturl], name: "shorturl")
}

model your_options {
  option_id    BigInt @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @default("") @db.VarChar(64)
  option_value String @db.LongText

  @@id([option_id, option_name])
  @@index([option_name], name: "option_name")
}

model your_url {
  keyword   String   @id @db.VarChar(200)
  url       String   @db.Text
  title     String?  @db.Text
  timestamp DateTime @default(now()) @db.Timestamp(0)
  ip        String   @db.VarChar(41)
  clicks    Int      @db.UnsignedInt

  @@index([ip], name: "ip")
  @@index([timestamp], name: "timestamp")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql basic introspection --url 2`] = `
datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate"
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql basic introspection 1`] = `
datasource db {
  provider = "postgresql"
  url      = env("TEST_POSTGRES_URI_MIGRATE")
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;
