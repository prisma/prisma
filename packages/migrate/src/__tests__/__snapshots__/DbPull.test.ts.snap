// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MongoDB basic introspection --url 2`] = `
datasource db {
  provider = "mongodb"
  url      = "mongodb://root:prisma@localhost:27017/tests-migrate?authSource=admin"
}

type UsersHobbies {
  name            String
  /// Multiple data types found: String: 50%, Int: 50% out of 2 sampled entries
  numberOrString2 Json?
  objects         UsersHobbiesObjects[]
  tags            String[]
}

type UsersHobbiesObjects {
  name            String
  /// Multiple data types found: String: 50%, Int: 50% out of 2 sampled entries
  numberOrString3 Json
  tags            String[]
}

model users {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  admin           Boolean
  email           String
  hobbies         UsersHobbies[]
  name            String
  /// Multiple data types found: String: 50%, Int: 50% out of 2 sampled entries
  numberOrString1 Json
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`SQL Server basic introspection --url 2`] = `
datasource db {
  provider = "sqlserver"
  url      = "sqlserver://localhost:1433;database=tests-migrate-db-pull;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;"
}

model jobs {
  job_id      Int       @id(map: "PK__jobs__CustomNameToAvoidRandomNumber") @default(autoincrement())
  customer_id Int?
  description String?   @db.VarChar(200)
  created_at  DateTime?
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`SQL Server basic introspection 2`] = `
datasource db {
  provider = "sqlserver"
  url      = env("TEST_MSSQL_JDBC_URI_MIGRATE")
}

model jobs {
  job_id      Int       @id(map: "PK__jobs__CustomNameToAvoidRandomNumber") @default(autoincrement())
  customer_id Int?
  description String?   @db.VarChar(200)
  created_at  DateTime?
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`cockroachdb basic introspection (no schema) --url 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = "postgresql://prisma@localhost:26257/tests-migrate-db-pull"
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::TIMESTAMP"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`cockroachdb basic introspection (with cockroach provider) --url  2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = "postgresql://prisma@localhost:26257/tests-migrate-db-pull"
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::TIMESTAMP"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`cockroachdb basic introspection (with cockroach provider) --url  6`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://prisma@localhost:26257/tests-migrate-db-pull"
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::TIMESTAMP"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`cockroachdb basic introspection (with cockroachdb provider) 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("TEST_COCKROACH_URI_MIGRATE")
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::TIMESTAMP"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`cockroachdb basic introspection (with postgresql provider) 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("TEST_COCKROACH_URI_MIGRATE")
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::TIMESTAMP"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`common/sqlite basic introspection 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite basic introspection with --url 1`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite basic introspection with invalid --url - empty host 2`] = ``;

exports[`common/sqlite basic introspection with invalid --url if schema is unspecified 2`] = ``;

exports[`common/sqlite basic introspection with schema and --url missing file: prefix should fail 2`] = ``;

exports[`common/sqlite basic introspection without schema and with --url missing "file:" prefix should fail 2`] = ``;

exports[`common/sqlite introspection --force 2`] = `
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`common/sqlite should succeed and keep changes to valid schema and output warnings when using --print 2`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model AwesomeUser {
  email    String           @unique(map: "User.email")
  id       Int              @id @default(autoincrement())
  name     String?
  newPosts AwesomeNewPost[]
  profile  AwesomeProfile?

  @@map("User")
}

model AwesomeNewPost {
  authorId  Int
  content   String?
  createdAt DateTime    @default(now())
  id        Int         @id @default(autoincrement())
  published Boolean     @default(false)
  title     String
  author    AwesomeUser @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("Post")
}

model AwesomeProfile {
  bio    String?
  id     Int         @id @default(autoincrement())
  userId Int         @unique(map: "Profile.userId")
  user   AwesomeUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Profile")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`common/sqlite should succeed when schema is invalid and using --force 7`] = `
generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique(map: "Profile.userId")
  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  email   String   @unique(map: "User.email")
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}

`;

exports[`mysql basic introspection --url 2`] = `
datasource db {
  provider = "mysql"
  url      = "mysql://root:root@localhost:3306/tests"
}

model your_log {
  click_id     Int      @id @default(autoincrement())
  click_time   DateTime @db.DateTime(0)
  shorturl     String   @db.VarChar(200)
  referrer     String   @db.VarChar(200)
  user_agent   String   @db.VarChar(255)
  ip_address   String   @db.VarChar(41)
  country_code String   @db.Char(2)

  @@index([shorturl], map: "shorturl")
}

model your_options {
  option_id    BigInt @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @default("") @db.VarChar(64)
  option_value String @db.LongText

  @@id([option_id, option_name])
  @@index([option_name], map: "option_name")
}

model your_url {
  keyword   String   @id @db.VarChar(200)
  url       String   @db.Text
  title     String?  @db.Text
  timestamp DateTime @default(now()) @db.Timestamp(0)
  ip        String   @db.VarChar(41)
  clicks    Int      @db.UnsignedInt

  @@index([ip], map: "ip")
  @@index([timestamp], map: "timestamp")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`mysql basic introspection 2`] = `
datasource db {
  provider = "mysql"
  url      = env("TEST_MYSQL_URI")
}

model your_log {
  click_id     Int      @id @default(autoincrement())
  click_time   DateTime @db.DateTime(0)
  shorturl     String   @db.VarChar(200)
  referrer     String   @db.VarChar(200)
  user_agent   String   @db.VarChar(255)
  ip_address   String   @db.VarChar(41)
  country_code String   @db.Char(2)

  @@index([shorturl], map: "shorturl")
}

model your_options {
  option_id    BigInt @default(autoincrement()) @db.UnsignedBigInt
  option_name  String @default("") @db.VarChar(64)
  option_value String @db.LongText

  @@id([option_id, option_name])
  @@index([option_name], map: "option_name")
}

model your_url {
  keyword   String   @id @db.VarChar(200)
  url       String   @db.Text
  title     String?  @db.Text
  timestamp DateTime @default(now()) @db.Timestamp(0)
  ip        String   @db.VarChar(41)
  clicks    Int      @db.UnsignedInt

  @@index([ip], map: "ip")
  @@index([timestamp], map: "timestamp")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql basic introspection --url 2`] = `
datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull"
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql basic introspection 2`] = `
datasource db {
  provider = "postgres"
  url      = env("TEST_POSTGRES_URI_MIGRATE")
}

model Post {
  id        String    @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  published Boolean   @default(false)
  title     String
  content   String?
  authorId  String?
  jsonData  Json?
  coinflips Boolean[]
  User      User?     @relation(fields: [authorId], references: [id])
}

model User {
  id    String  @id
  email String  @unique(map: "User.email")
  name  String?
  Post  Post[]
}

enum Role {
  USER
  ADMIN
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from custom/schema/dir/schema.prisma creates view definition files 3`] = `
[
  custom/schema/dir/views/public/simpleuser.sql,
  custom/schema/dir/views/work/workers.sql,
]
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from custom/schema/dir/schema.prisma creates view definition files 7`] = `
Prisma schema loaded from custom/schema/dir/schema.prisma
Datasource "db": PostgreSQL database "tests-migrate-db-pull", schemas "public, work" at "localhost:5432"
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from custom/schema/dir/schema.prisma creates view definition files 9`] = `


- Introspecting based on datasource defined in custom/schema/dir/schema.prisma

✔ Introspected 2 models and wrote them into custom/schema/dir/schema.prisma in XXXms
      
*** WARNING ***

The following views were ignored as they do not have a valid unique identifier or id. This is currently not supported by the Prisma Client. Please refer to the documentation on defining unique identifiers in views: https://pris.ly/d/view-identifiers
- View "simpleuser"
- View "workers"

Run prisma generate to generate Prisma Client.

`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from non-standard-schema.prisma creates view definition files 3`] = `
[
  views/public/simpleuser.sql,
  views/work/workers.sql,
]
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from non-standard-schema.prisma creates view definition files 7`] = `
Prisma schema loaded from non-standard-schema.prisma
Datasource "db": PostgreSQL database "tests-migrate-db-pull", schemas "public, work" at "localhost:5432"
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from non-standard-schema.prisma creates view definition files 9`] = `


- Introspecting based on datasource defined in non-standard-schema.prisma

✔ Introspected 2 models and wrote them into non-standard-schema.prisma in XXXms
      
*** WARNING ***

The following views were ignored as they do not have a valid unique identifier or id. This is currently not supported by the Prisma Client. Please refer to the documentation on defining unique identifiers in views: https://pris.ly/d/view-identifiers
- View "simpleuser"
- View "workers"

Run prisma generate to generate Prisma Client.

`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from prisma/schema.prisma creates view definition files 3`] = `
[
  prisma/views/public/simpleuser.sql,
  prisma/views/work/workers.sql,
]
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from prisma/schema.prisma creates view definition files 7`] = `
Prisma schema loaded from prisma/schema.prisma
Datasource "db": PostgreSQL database "tests-migrate-db-pull", schemas "public, work" at "localhost:5432"
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from prisma/schema.prisma creates view definition files 9`] = `


- Introspecting based on datasource defined in prisma/schema.prisma

✔ Introspected 2 models and wrote them into prisma/schema.prisma in XXXms
      
*** WARNING ***

The following views were ignored as they do not have a valid unique identifier or id. This is currently not supported by the Prisma Client. Please refer to the documentation on defining unique identifiers in views: https://pris.ly/d/view-identifiers
- View "simpleuser"
- View "workers"

Run prisma generate to generate Prisma Client.

`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from schema.prisma creates view definition files 3`] = `
[
  views/public/simpleuser.sql,
  views/work/workers.sql,
]
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from schema.prisma creates view definition files 7`] = `
Prisma schema loaded from schema.prisma
Datasource "db": PostgreSQL database "tests-migrate-db-pull", schemas "public, work" at "localhost:5432"
`;

exports[`postgresql views fs I/O with preview feature and views defined introspection from schema.prisma creates view definition files 9`] = `


- Introspecting based on datasource defined in schema.prisma

✔ Introspected 2 models and wrote them into schema.prisma in XXXms
      
*** WARNING ***

The following views were ignored as they do not have a valid unique identifier or id. This is currently not supported by the Prisma Client. Please refer to the documentation on defining unique identifiers in views: https://pris.ly/d/view-identifiers
- View "simpleuser"
- View "workers"

Run prisma generate to generate Prisma Client.

`;

exports[`postgresql-multi-schema --url  --schemas=base,does-not-exist (1 existing schemas + 1 non-existing) should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull-multischema"
  schemas  = ["base", "does-not-exist"]
}

model User {
  id    String @id
  email String

  @@schema("base")
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String

  @@schema("base")
}

enum status {
  ON
  OFF

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema --url  --schemas=base,transactional (2 existing schemas) should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull-multischema"
  schemas  = ["base", "transactional"]
}

model User {
  id    String @id
  email String
  Post  Post[]

  @@schema("base")
}

model base_some_table {
  id         String                     @id(map: "User_pkey2")
  email      String
  some_table transactional_some_table[]

  @@map("some_table")
  @@schema("base")
}

model Post {
  id       String @id
  title    String
  authorId String
  User     User   @relation(fields: [authorId], references: [id])

  @@schema("transactional")
}

model transactional_some_table {
  id         String          @id(map: "Post_pkey2")
  title      String
  authorId   String
  some_table base_some_table @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey2")

  @@map("some_table")
  @@schema("transactional")
}

enum base_status {
  ON
  OFF

  @@map("status")
  @@schema("base")
}

enum transactional_status {
  ON
  OFF

  @@map("status")
  @@schema("transactional")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema --url --schemas=base (1 existing schema) should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull-multischema"
  schemas  = ["base"]
}

model User {
  id    String @id
  email String

  @@schema("base")
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String

  @@schema("base")
}

enum status {
  ON
  OFF

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema --url with \`?schema=base\` should succeed 2`] = `
datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull-multischema?schema=base"
}

model User {
  id    String @id
  email String
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String
}

enum status {
  ON
  OFF
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema --url with \`?schema=does-not-exist\` should error with with P4001, empty database 1`] = ``;

exports[`postgresql-multi-schema --url with --schemas=["does-not-exist", "base"] should error 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://prisma:prisma@localhost:5432/tests-migrate-db-pull-multischema"
  schemas  = ["base"]
}

model User {
  id    String @id
  email String

  @@schema("base")
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String

  @@schema("base")
}

enum status {
  ON
  OFF

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema --url with --schemas=base without preview feature should error 2`] = ``;

exports[`postgresql-multi-schema --url with --schemas=does-not-exist should error 2`] = ``;

exports[`postgresql-multi-schema datasource property \`schemas=["base", "transactional"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgres"
  url      = env("TEST_POSTGRES_URI_MIGRATE")
  schemas  = ["base", "transactional"]
}

model User {
  id    String @id
  email String
  Post  Post[]

  @@schema("base")
}

model base_some_table {
  id         String                     @id(map: "User_pkey2")
  email      String
  some_table transactional_some_table[]

  @@map("some_table")
  @@schema("base")
}

model Post {
  id       String @id
  title    String
  authorId String
  User     User   @relation(fields: [authorId], references: [id])

  @@schema("transactional")
}

model transactional_some_table {
  id         String          @id(map: "Post_pkey2")
  title      String
  authorId   String
  some_table base_some_table @relation(fields: [authorId], references: [id], map: "Post_authorId_fkey2")

  @@map("some_table")
  @@schema("transactional")
}

enum base_status {
  ON
  OFF

  @@map("status")
  @@schema("base")
}

enum transactional_status {
  ON
  OFF

  @@map("status")
  @@schema("transactional")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema datasource property \`schemas=["base"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgres"
  url      = env("TEST_POSTGRES_URI_MIGRATE")
  schemas  = ["base"]
}

model User {
  id    String @id
  email String

  @@schema("base")
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String

  @@schema("base")
}

enum status {
  ON
  OFF

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema datasource property \`schemas=["does-not-exist", "base"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgres"
  url      = env("TEST_POSTGRES_URI_MIGRATE")
  schemas  = ["base", "does-not-exist"]
}

model User {
  id    String @id
  email String

  @@schema("base")
}

model some_table {
  id    String @id(map: "User_pkey2")
  email String

  @@schema("base")
}

enum status {
  ON
  OFF

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`postgresql-multi-schema datasource property \`schemas=["does-not-exist"]\` should error with P4001, empty database 1`] = ``;

exports[`sqlserver-multi-schema --url with \`?schema=base\` should succeed 2`] = `
datasource db {
  provider = "sqlserver"
  url      = "sqlserver://localhost:1433;database=tests-migrate-db-pull-multi-schema;user=SA;password=Pr1sm4_Pr1sm4;trustServerCertificate=true;schema=base"
}

model some_table {
  id    String @id(map: "PK__some_tab__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)
}

model SomeUser {
  id    String @id(clustered: false, map: "PK__SomeUser__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`sqlserver-multi-schema --url with \`?schema=does-not-exist\` should error with with P4001, empty database 1`] = ``;

exports[`sqlserver-multi-schema datasource property \`schemas=["base", "transactional"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("TEST_MSSQL_JDBC_URI_MIGRATE")
  schemas  = ["base", "transactional"]
}

model Post {
  id       String   @id(clustered: false, map: "PK__Post__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  title    String   @db.NVarChar(1)
  authorId String   @db.NVarChar(1)
  SomeUser SomeUser @relation(fields: [authorId], references: [id])

  @@schema("transactional")
}

model base_some_table {
  id String @id(map: "PK__some_tab__RANDOM_ID_SANITIZED") @db.NVarChar(1)

  @@map("some_table")
  @@schema("base")
}

model transactional_some_table {
  id    String @id(map: "PK__some_tab__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  title String @db.NVarChar(1)

  @@map("some_table")
  @@schema("transactional")
}

model SomeUser {
  id    String @id(clustered: false, map: "PK__SomeUser__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)
  Post  Post[]

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`sqlserver-multi-schema datasource property \`schemas=["base"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("TEST_MSSQL_JDBC_URI_MIGRATE")
  schemas  = ["base"]
}

model some_table {
  id    String @id(map: "PK__some_tab__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)

  @@schema("base")
}

model SomeUser {
  id    String @id(clustered: false, map: "PK__SomeUser__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`sqlserver-multi-schema datasource property \`schemas=["does-not-exist", "base"]\` should succeed 2`] = `
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "sqlserver"
  url      = env("TEST_MSSQL_JDBC_URI_MIGRATE")
  schemas  = ["base", "does-not-exist"]
}

model some_table {
  id    String @id(map: "PK__some_tab__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)

  @@schema("base")
}

model SomeUser {
  id    String @id(clustered: false, map: "PK__SomeUser__RANDOM_ID_SANITIZED") @db.NVarChar(1)
  email String @db.NVarChar(1)

  @@schema("base")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`sqlserver-multi-schema datasource property \`schemas=["does-not-exist"]\` should error with P4001, empty database 1`] = ``;
