// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`select validation Accept empty where in findMany 1`] = `
"query {
  findManyPost(where: {

  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation Allow deep select query 1`] = `
"query {
  findManyPost {
    author {
      id
    }
  }
}"
`;

exports[`select validation Allow different iso strings 1 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: null
    published: false
    createdAt: \\"2020-05-05T16:28:33.983Z\\"
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation Allow different iso strings 2 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: null
    published: false
    createdAt: \\"2020-05-05T16:28:33.983+03:00\\"
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation Allow different iso strings 2 2`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: null
    published: false
    createdAt: \\"2020-05-05T16:28:33.983-02:00\\"
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation Allow empty input array 1`] = `
"query {
  findManyPost(where: {
    id: {
      in: []
    }
  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation Allow explicit null value 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: null
    published: false
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation Allow simple create mutation 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: \\"Some Content\\"
    published: false
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation Allow uuid array for string array 1`] = `
"query {
  findManyPost(where: {
    id: {
      in: [\\"d4082b42-b161-11e9-8754-6542abf52968\\"]
    }
  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation Allow uuid for string input 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"Some title\\"
    content: \\"123e4567-e89b-12d3-a456-426655440000\\"
    published: false
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation allow where with all undefined in findMany 1`] = `
"query {
  findManyPost(where: {

  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation missing arg object 1`] = `
"mutation {
  createOnePost() {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation missing arg object 3`] = `
"mutation {
  createOnePost() {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation missing arg scalar && object 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"string\\"
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation missing arg scalar 1`] = `
"mutation {
  createOnePost(data: {
    title: \\"string\\"
    author: {
      connect: {
        id: \\"\\"
      }
    }
  }) {
    id
    createdAt
    updatedAt
    published
    title
    content
    authorId
  }
}"
`;

exports[`select validation reject all undefined where for findOne 1`] = `
"query {
  findOnePost(where: {

  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation reject empty where for findOne 1`] = `
"query {
  findOnePost(where: {

  }) {
    author {
      id
    }
  }
}"
`;

exports[`select validation unknown arg, field, incorrect arg type 1`] = `
"query {
  findManyUser(
    skip: 200
    where: {
      name_in: [\\"hans\\", \\"peter\\", \\"schmidt\\"]
      AND: [
        {
          age_gt: 10123123123
          this_is_completely_arbitrary: \\"veryLongNameGoIntoaNewLineNow@gmail.com\\"
        },
        {
          age_gt: 10123123123
          id_endsWith: \\"veryLongNameGoIntoaNewLineNow@gmail.com\\"
          name_contains: \\"hans\\"
          name_gt: 2131203912039123
          name_in: [\\"hans\\"]
          AND: [
            {
              age_gt: \\"10123123123\\"
              id_endsWith: \\"veryLongNameGoIntoaNewLineNow@gmail.com\\"
            }
          ]
        }
      ]
    }
  ) {
    id
    name # INVALID_FIELD
    name2 # INVALID_FIELD
    posts(take: 200) {
      id
    }
  }
}"
`;
