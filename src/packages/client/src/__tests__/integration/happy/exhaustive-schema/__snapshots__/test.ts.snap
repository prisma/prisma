// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`exhaustive-schema 1`] = `

/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: local
 * Query Engine version: local
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose \`select\` or \`include\`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;





/**
 * Model Post
 */

export type Post = {
  id: number
  createdAt: Date
  title: string
  content: string | null
  published: boolean
  authorId: number
}

/**
 * Model User
 */

export type User = {
  id: number
  email: string
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model M
 */

export type M = {
  id: number
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model N
 */

export type N = {
  id: number
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OneOptional
 */

export type OneOptional = {
  id: number
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model ManyRequired
 */

export type ManyRequired = {
  id: number
  oneOptionalId: number | null
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OptionalSide1
 */

export type OptionalSide1 = {
  id: number
  optionalSide2Id: number | null
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model OptionalSide2
 */

export type OptionalSide2 = {
  id: number
  int: number
  optionalInt: number | null
  float: number
  optionalFloat: number | null
  string: string
  optionalString: string | null
  json: Prisma.JsonValue
  optionalJson: Prisma.JsonValue | null
  enum: ABeautifulEnum
  optionalEnum: ABeautifulEnum | null
  boolean: boolean
  optionalBoolean: boolean | null
}

/**
 * Model A
 */

export type A = {
  id: string
  email: string
  name: string | null
  int: number
  sInt: number
  bInt: BigInt
  serial: number
  sSerial: number
  bSerial: number
  inc_int: number
  inc_sInt: number
  inc_bInt: BigInt
}

/**
 * Model B
 */

export type B = {
  id: string
  float: number
  dFloat: number
  decFloat: Prisma.Decimal
  numFloat: Prisma.Decimal
}

/**
 * Model C
 */

export type C = {
  id: string
  char: string
  vChar: string
  text: string
  bit: string
  vBit: string
  uuid: string
}

/**
 * Model D
 */

export type D = {
  id: string
  bool: boolean
  byteA: Buffer
  xml: string
  json: Prisma.JsonValue
  jsonb: Prisma.JsonValue
}

/**
 * Model E
 */

export type E = {
  id: string
  date: Date
  time: Date
  ts: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ABeautifulEnum: {
  A: 'A',
  B: 'B',
  C: 'C'
};

export type ABeautifulEnum = (typeof ABeautifulEnum)[keyof typeof ABeautifulEnum]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * \`\`\`
 * const prisma = new PrismaClient()
 * // Fetch zero or more Posts
 * const posts = await prisma.post.findMany()
 * \`\`\`
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * \`\`\`
   * const prisma = new PrismaClient()
   * // Fetch zero or more Posts
   * const posts = await prisma.post.findMany()
   * \`\`\`
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * \`\`\`
   * // With parameters use prisma.executeRaw\`\`, values will be escaped automatically
   * const result = await prisma.executeRaw\`UPDATE User SET cool = \${true} WHERE id = \${1};\`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * \`\`\`
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * \`\`\`
   * // With parameters use prisma.queryRaw\`\`, values will be escaped automatically
   * const result = await prisma.queryRaw\`SELECT * FROM User WHERE id = \${1} OR email = \${'ema.il'};\`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * \`\`\`
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * \`\`\`
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * \`\`\`
   */
  $transaction: PromiseConstructor['all']

      /**
   * \`prisma.post\`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * \`\`\`
    */
  get post(): Prisma.PostDelegate;

  /**
   * \`prisma.user\`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * \`\`\`
    */
  get user(): Prisma.UserDelegate;

  /**
   * \`prisma.m\`: Exposes CRUD operations for the **M** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ms
    * const ms = await prisma.m.findMany()
    * \`\`\`
    */
  get m(): Prisma.MDelegate;

  /**
   * \`prisma.n\`: Exposes CRUD operations for the **N** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ns
    * const ns = await prisma.n.findMany()
    * \`\`\`
    */
  get n(): Prisma.NDelegate;

  /**
   * \`prisma.oneOptional\`: Exposes CRUD operations for the **OneOptional** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OneOptionals
    * const oneOptionals = await prisma.oneOptional.findMany()
    * \`\`\`
    */
  get oneOptional(): Prisma.OneOptionalDelegate;

  /**
   * \`prisma.manyRequired\`: Exposes CRUD operations for the **ManyRequired** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more ManyRequireds
    * const manyRequireds = await prisma.manyRequired.findMany()
    * \`\`\`
    */
  get manyRequired(): Prisma.ManyRequiredDelegate;

  /**
   * \`prisma.optionalSide1\`: Exposes CRUD operations for the **OptionalSide1** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OptionalSide1s
    * const optionalSide1s = await prisma.optionalSide1.findMany()
    * \`\`\`
    */
  get optionalSide1(): Prisma.OptionalSide1Delegate;

  /**
   * \`prisma.optionalSide2\`: Exposes CRUD operations for the **OptionalSide2** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more OptionalSide2s
    * const optionalSide2s = await prisma.optionalSide2.findMany()
    * \`\`\`
    */
  get optionalSide2(): Prisma.OptionalSide2Delegate;

  /**
   * \`prisma.a\`: Exposes CRUD operations for the **A** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more As
    * const as = await prisma.a.findMany()
    * \`\`\`
    */
  get a(): Prisma.ADelegate;

  /**
   * \`prisma.b\`: Exposes CRUD operations for the **B** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Bs
    * const bs = await prisma.b.findMany()
    * \`\`\`
    */
  get b(): Prisma.BDelegate;

  /**
   * \`prisma.c\`: Exposes CRUD operations for the **C** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Cs
    * const cs = await prisma.c.findMany()
    * \`\`\`
    */
  get c(): Prisma.CDelegate;

  /**
   * \`prisma.d\`: Exposes CRUD operations for the **D** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Ds
    * const ds = await prisma.d.findMany()
    * \`\`\`
    */
  get d(): Prisma.DDelegate;

  /**
   * \`prisma.e\`: Exposes CRUD operations for the **E** model.
    * Example usage:
    * \`\`\`ts
    * // Fetch zero or more Es
    * const es = await prisma.e.findMany()
    * \`\`\`
    */
  get e(): Prisma.EDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export type PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export type PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: local
   * Query Engine version: local
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose \`select\` or \`include\`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From \`T\` pick properties that exist in \`U\`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Post: 'Post',
    User: 'User',
    M: 'M',
    N: 'N',
    OneOptional: 'OneOptional',
    ManyRequired: 'ManyRequired',
    OptionalSide1: 'OptionalSide1',
    OptionalSide2: 'OptionalSide2',
    A: 'A',
    B: 'B',
    C: 'C',
    D: 'D',
    E: 'E'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * \`\`\`
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * \`\`\`
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: string
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The \`T\` type makes sure, that the \`return proceed\` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Post
   */


  export type AggregatePost = {
    count: number
    avg: PostAvgAggregateOutputType | null
    sum: PostSumAggregateOutputType | null
    min: PostMinAggregateOutputType | null
    max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number
    authorId: number
  }

  export type PostSumAggregateOutputType = {
    id: number
    authorId: number
  }

  export type PostMinAggregateOutputType = {
    id: number
    authorId: number
  }

  export type PostMaxAggregateOutputType = {
    id: number
    authorId: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    authorId?: true
  }

  export type AggregatePostArgs = {
    where?: PostWhereInput
    orderBy?: XOR<Enumerable<PostOrderByInput>, PostOrderByInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostDistinctFieldEnum>
    count?: true
    avg?: PostAvgAggregateInputType
    sum?: PostSumAggregateInputType
    min?: PostMinAggregateInputType
    max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends AggregatePostArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPostAggregateScalarType<T[P]>
  }

  export type GetPostAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof PostAvgAggregateOutputType ? PostAvgAggregateOutputType[P] : never
  }
    
    

  export type PostSelect = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    content?: boolean
    published?: boolean
    author?: boolean | UserArgs
    authorId?: boolean
  }

  export type PostInclude = {
    author?: boolean | UserArgs
  }

  export type PostGetPayload<
    S extends boolean | null | undefined | PostArgs,
    U = keyof S
      > = S extends true
        ? Post
    : S extends undefined
    ? never
    : S extends PostArgs | FindManyPostArgs
    ?'include' extends U
    ? Post  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'author'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Post ?Post [P]
  : 
          P extends 'author'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Post
  : Post


  export interface PostDelegate {
    /**
     * Find zero or one Post that matches the filter.
     * @param {FindUniquePostArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePostArgs>(
      args: Subset<T, FindUniquePostArgs>
    ): CheckSelect<T, Prisma__PostClient<Post | null>, Prisma__PostClient<PostGetPayload<T> | null>>
    /**
     * Find the first Post that matches the filter.
     * @param {FindFirstPostArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPostArgs>(
      args?: Subset<T, FindFirstPostArgs>
    ): CheckSelect<T, Prisma__PostClient<Post | null>, Prisma__PostClient<PostGetPayload<T> | null>>
    /**
     * Find zero or more Posts that matches the filter.
     * @param {FindManyPostArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyPostArgs>(
      args?: Subset<T, FindManyPostArgs>
    ): CheckSelect<T, Promise<Array<Post>>, Promise<Array<PostGetPayload<T>>>>
    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: Subset<T, PostCreateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>
    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: Subset<T, PostDeleteArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>
    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: Subset<T, PostUpdateArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>
    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args: Subset<T, PostDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Posts.
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: Subset<T, PostUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: Subset<T, PostUpsertArgs>
    ): CheckSelect<T, Prisma__PostClient<Post>, Prisma__PostClient<PostGetPayload<T>>>
    /**
     * Find zero or one Post that matches the filter.
     * @param {FindUniquePostArgs} args - Arguments to find a Post
     * @deprecated This will be deprecated please use prisma.post.findUnique
     * @example
     * // Get one Post
     * const post = await prisma.post.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePostArgs>(
      args: Subset<T, FindUniquePostArgs>
    ): CheckSelect<T, Prisma__PostClient<Post | null>, Prisma__PostClient<PostGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyPostArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePostArgs>(args: Subset<T, AggregatePostArgs>): Promise<GetPostAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * TEST_GITHUB_LINK
   */
  export class Prisma__PostClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    author<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Post findUnique
   */
  export type FindUniquePostArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * Filter, which Post to fetch.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post findFirst
   */
  export type FindFirstPostArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * Filter, which Post to fetch.
    **/
    where?: PostWhereInput
    orderBy?: XOR<Enumerable<PostOrderByInput>, PostOrderByInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostDistinctFieldEnum>
  }


  /**
   * Post findMany
   */
  export type FindManyPostArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * Filter, which Posts to fetch.
    **/
    where?: PostWhereInput
    /**
     * Determine the order of the Posts to fetch.
    **/
    orderBy?: XOR<Enumerable<PostOrderByInput>, PostOrderByInput>
    /**
     * Sets the position for listing Posts.
    **/
    cursor?: PostWhereUniqueInput
    /**
     * The number of Posts to fetch. If negative number, it will take Posts before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` Posts.
    **/
    skip?: number
    distinct?: Enumerable<PostDistinctFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * The data needed to create a Post.
    **/
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * The data needed to update a Post.
    **/
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * The filter to search for the Post to update in case it exists.
    **/
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the \`where\` argument doesn't exist, create a new Post with this data.
    **/
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
    /**
     * Filter which Post to delete.
    **/
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    where?: PostWhereInput
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
    **/
    select?: XOR<PostSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<PostInclude, null>
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: number
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type UserAvgAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateUserArgs = {
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
    count?: true
    avg?: UserAvgAggregateInputType
    sum?: UserSumAggregateInputType
    min?: UserMinAggregateInputType
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }
    
    

  export type UserSelect = {
    id?: boolean
    email?: boolean
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
    posts?: boolean | FindManyPostArgs
  }

  export type UserInclude = {
    posts?: boolean | FindManyPostArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'posts'
        ? Array < PostGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'posts'
        ? Array < PostGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    posts<T extends FindManyPostArgs = {}>(args?: Subset<T, FindManyPostArgs>): CheckSelect<T, Promise<Array<Post>>, Promise<Array<PostGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * Determine the order of the Users to fetch.
    **/
    orderBy?: XOR<Enumerable<UserOrderByInput>, UserOrderByInput>
    /**
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * The number of Users to fetch. If negative number, it will take Users before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserDistinctFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the \`where\` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: XOR<UserSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<UserInclude, null>
  }



  /**
   * Model M
   */


  export type AggregateM = {
    count: number
    avg: MAvgAggregateOutputType | null
    sum: MSumAggregateOutputType | null
    min: MMinAggregateOutputType | null
    max: MMaxAggregateOutputType | null
  }

  export type MAvgAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type MSumAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type MMinAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type MMaxAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type MAvgAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type MSumAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type MMinAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type MMaxAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateMArgs = {
    where?: MWhereInput
    orderBy?: XOR<Enumerable<MOrderByInput>, MOrderByInput>
    cursor?: MWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MDistinctFieldEnum>
    count?: true
    avg?: MAvgAggregateInputType
    sum?: MSumAggregateInputType
    min?: MMinAggregateInputType
    max?: MMaxAggregateInputType
  }

  export type GetMAggregateType<T extends AggregateMArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetMAggregateScalarType<T[P]>
  }

  export type GetMAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof MAvgAggregateOutputType ? MAvgAggregateOutputType[P] : never
  }
    
    

  export type MSelect = {
    id?: boolean
    n?: boolean | FindManyNArgs
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type MInclude = {
    n?: boolean | FindManyNArgs
  }

  export type MGetPayload<
    S extends boolean | null | undefined | MArgs,
    U = keyof S
      > = S extends true
        ? M
    : S extends undefined
    ? never
    : S extends MArgs | FindManyMArgs
    ?'include' extends U
    ? M  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'n'
        ? Array < NGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof M ?M [P]
  : 
          P extends 'n'
        ? Array < NGetPayload<S['select'][P]>>  : never
  } 
    : M
  : M


  export interface MDelegate {
    /**
     * Find zero or one M that matches the filter.
     * @param {FindUniqueMArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueMArgs>(
      args: Subset<T, FindUniqueMArgs>
    ): CheckSelect<T, Prisma__MClient<M | null>, Prisma__MClient<MGetPayload<T> | null>>
    /**
     * Find the first M that matches the filter.
     * @param {FindFirstMArgs} args - Arguments to find a M
     * @example
     * // Get one M
     * const m = await prisma.m.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstMArgs>(
      args?: Subset<T, FindFirstMArgs>
    ): CheckSelect<T, Prisma__MClient<M | null>, Prisma__MClient<MGetPayload<T> | null>>
    /**
     * Find zero or more Ms that matches the filter.
     * @param {FindManyMArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ms
     * const ms = await prisma.m.findMany()
     * 
     * // Get first 10 Ms
     * const ms = await prisma.m.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const mWithIdOnly = await prisma.m.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyMArgs>(
      args?: Subset<T, FindManyMArgs>
    ): CheckSelect<T, Promise<Array<M>>, Promise<Array<MGetPayload<T>>>>
    /**
     * Create a M.
     * @param {MCreateArgs} args - Arguments to create a M.
     * @example
     * // Create one M
     * const M = await prisma.m.create({
     *   data: {
     *     // ... data to create a M
     *   }
     * })
     * 
    **/
    create<T extends MCreateArgs>(
      args: Subset<T, MCreateArgs>
    ): CheckSelect<T, Prisma__MClient<M>, Prisma__MClient<MGetPayload<T>>>
    /**
     * Delete a M.
     * @param {MDeleteArgs} args - Arguments to delete one M.
     * @example
     * // Delete one M
     * const M = await prisma.m.delete({
     *   where: {
     *     // ... filter to delete one M
     *   }
     * })
     * 
    **/
    delete<T extends MDeleteArgs>(
      args: Subset<T, MDeleteArgs>
    ): CheckSelect<T, Prisma__MClient<M>, Prisma__MClient<MGetPayload<T>>>
    /**
     * Update one M.
     * @param {MUpdateArgs} args - Arguments to update one M.
     * @example
     * // Update one M
     * const m = await prisma.m.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MUpdateArgs>(
      args: Subset<T, MUpdateArgs>
    ): CheckSelect<T, Prisma__MClient<M>, Prisma__MClient<MGetPayload<T>>>
    /**
     * Delete zero or more Ms.
     * @param {MDeleteManyArgs} args - Arguments to filter Ms to delete.
     * @example
     * // Delete a few Ms
     * const { count } = await prisma.m.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MDeleteManyArgs>(
      args: Subset<T, MDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Ms.
     * @param {MUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ms
     * const m = await prisma.m.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MUpdateManyArgs>(
      args: Subset<T, MUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one M.
     * @param {MUpsertArgs} args - Arguments to update or create a M.
     * @example
     * // Update or create a M
     * const m = await prisma.m.upsert({
     *   create: {
     *     // ... data to create a M
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the M we want to update
     *   }
     * })
    **/
    upsert<T extends MUpsertArgs>(
      args: Subset<T, MUpsertArgs>
    ): CheckSelect<T, Prisma__MClient<M>, Prisma__MClient<MGetPayload<T>>>
    /**
     * Find zero or one M that matches the filter.
     * @param {FindUniqueMArgs} args - Arguments to find a M
     * @deprecated This will be deprecated please use prisma.m.findUnique
     * @example
     * // Get one M
     * const m = await prisma.m.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueMArgs>(
      args: Subset<T, FindUniqueMArgs>
    ): CheckSelect<T, Prisma__MClient<M | null>, Prisma__MClient<MGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyMArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateMArgs>(args: Subset<T, AggregateMArgs>): Promise<GetMAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for M.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    n<T extends FindManyNArgs = {}>(args?: Subset<T, FindManyNArgs>): CheckSelect<T, Promise<Array<N>>, Promise<Array<NGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * M findUnique
   */
  export type FindUniqueMArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * Filter, which M to fetch.
    **/
    where: MWhereUniqueInput
  }


  /**
   * M findFirst
   */
  export type FindFirstMArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * Filter, which M to fetch.
    **/
    where?: MWhereInput
    orderBy?: XOR<Enumerable<MOrderByInput>, MOrderByInput>
    cursor?: MWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MDistinctFieldEnum>
  }


  /**
   * M findMany
   */
  export type FindManyMArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * Filter, which MS to fetch.
    **/
    where?: MWhereInput
    /**
     * Determine the order of the MS to fetch.
    **/
    orderBy?: XOR<Enumerable<MOrderByInput>, MOrderByInput>
    /**
     * Sets the position for listing MS.
    **/
    cursor?: MWhereUniqueInput
    /**
     * The number of MS to fetch. If negative number, it will take MS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` MS.
    **/
    skip?: number
    distinct?: Enumerable<MDistinctFieldEnum>
  }


  /**
   * M create
   */
  export type MCreateArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * The data needed to create a M.
    **/
    data: XOR<MCreateInput, MUncheckedCreateInput>
  }


  /**
   * M update
   */
  export type MUpdateArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * The data needed to update a M.
    **/
    data: XOR<MUpdateInput, MUncheckedUpdateInput>
    /**
     * Choose, which M to update.
    **/
    where: MWhereUniqueInput
  }


  /**
   * M updateMany
   */
  export type MUpdateManyArgs = {
    data: XOR<MUpdateManyMutationInput, MUncheckedUpdateManyInput>
    where?: MWhereInput
  }


  /**
   * M upsert
   */
  export type MUpsertArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * The filter to search for the M to update in case it exists.
    **/
    where: MWhereUniqueInput
    /**
     * In case the M found by the \`where\` argument doesn't exist, create a new M with this data.
    **/
    create: XOR<MCreateInput, MUncheckedCreateInput>
    /**
     * In case the M was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<MUpdateInput, MUncheckedUpdateInput>
  }


  /**
   * M delete
   */
  export type MDeleteArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
    /**
     * Filter which M to delete.
    **/
    where: MWhereUniqueInput
  }


  /**
   * M deleteMany
   */
  export type MDeleteManyArgs = {
    where?: MWhereInput
  }


  /**
   * M without action
   */
  export type MArgs = {
    /**
     * Select specific fields to fetch from the M
    **/
    select?: XOR<MSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<MInclude, null>
  }



  /**
   * Model N
   */


  export type AggregateN = {
    count: number
    avg: NAvgAggregateOutputType | null
    sum: NSumAggregateOutputType | null
    min: NMinAggregateOutputType | null
    max: NMaxAggregateOutputType | null
  }

  export type NAvgAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type NSumAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type NMinAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type NMaxAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type NAvgAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type NSumAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type NMinAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type NMaxAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateNArgs = {
    where?: NWhereInput
    orderBy?: XOR<Enumerable<NOrderByInput>, NOrderByInput>
    cursor?: NWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NDistinctFieldEnum>
    count?: true
    avg?: NAvgAggregateInputType
    sum?: NSumAggregateInputType
    min?: NMinAggregateInputType
    max?: NMaxAggregateInputType
  }

  export type GetNAggregateType<T extends AggregateNArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetNAggregateScalarType<T[P]>
  }

  export type GetNAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof NAvgAggregateOutputType ? NAvgAggregateOutputType[P] : never
  }
    
    

  export type NSelect = {
    id?: boolean
    m?: boolean | FindManyMArgs
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type NInclude = {
    m?: boolean | FindManyMArgs
  }

  export type NGetPayload<
    S extends boolean | null | undefined | NArgs,
    U = keyof S
      > = S extends true
        ? N
    : S extends undefined
    ? never
    : S extends NArgs | FindManyNArgs
    ?'include' extends U
    ? N  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'm'
        ? Array < MGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof N ?N [P]
  : 
          P extends 'm'
        ? Array < MGetPayload<S['select'][P]>>  : never
  } 
    : N
  : N


  export interface NDelegate {
    /**
     * Find zero or one N that matches the filter.
     * @param {FindUniqueNArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueNArgs>(
      args: Subset<T, FindUniqueNArgs>
    ): CheckSelect<T, Prisma__NClient<N | null>, Prisma__NClient<NGetPayload<T> | null>>
    /**
     * Find the first N that matches the filter.
     * @param {FindFirstNArgs} args - Arguments to find a N
     * @example
     * // Get one N
     * const n = await prisma.n.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstNArgs>(
      args?: Subset<T, FindFirstNArgs>
    ): CheckSelect<T, Prisma__NClient<N | null>, Prisma__NClient<NGetPayload<T> | null>>
    /**
     * Find zero or more Ns that matches the filter.
     * @param {FindManyNArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ns
     * const ns = await prisma.n.findMany()
     * 
     * // Get first 10 Ns
     * const ns = await prisma.n.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const nWithIdOnly = await prisma.n.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyNArgs>(
      args?: Subset<T, FindManyNArgs>
    ): CheckSelect<T, Promise<Array<N>>, Promise<Array<NGetPayload<T>>>>
    /**
     * Create a N.
     * @param {NCreateArgs} args - Arguments to create a N.
     * @example
     * // Create one N
     * const N = await prisma.n.create({
     *   data: {
     *     // ... data to create a N
     *   }
     * })
     * 
    **/
    create<T extends NCreateArgs>(
      args: Subset<T, NCreateArgs>
    ): CheckSelect<T, Prisma__NClient<N>, Prisma__NClient<NGetPayload<T>>>
    /**
     * Delete a N.
     * @param {NDeleteArgs} args - Arguments to delete one N.
     * @example
     * // Delete one N
     * const N = await prisma.n.delete({
     *   where: {
     *     // ... filter to delete one N
     *   }
     * })
     * 
    **/
    delete<T extends NDeleteArgs>(
      args: Subset<T, NDeleteArgs>
    ): CheckSelect<T, Prisma__NClient<N>, Prisma__NClient<NGetPayload<T>>>
    /**
     * Update one N.
     * @param {NUpdateArgs} args - Arguments to update one N.
     * @example
     * // Update one N
     * const n = await prisma.n.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NUpdateArgs>(
      args: Subset<T, NUpdateArgs>
    ): CheckSelect<T, Prisma__NClient<N>, Prisma__NClient<NGetPayload<T>>>
    /**
     * Delete zero or more Ns.
     * @param {NDeleteManyArgs} args - Arguments to filter Ns to delete.
     * @example
     * // Delete a few Ns
     * const { count } = await prisma.n.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NDeleteManyArgs>(
      args: Subset<T, NDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Ns.
     * @param {NUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ns
     * const n = await prisma.n.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NUpdateManyArgs>(
      args: Subset<T, NUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one N.
     * @param {NUpsertArgs} args - Arguments to update or create a N.
     * @example
     * // Update or create a N
     * const n = await prisma.n.upsert({
     *   create: {
     *     // ... data to create a N
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the N we want to update
     *   }
     * })
    **/
    upsert<T extends NUpsertArgs>(
      args: Subset<T, NUpsertArgs>
    ): CheckSelect<T, Prisma__NClient<N>, Prisma__NClient<NGetPayload<T>>>
    /**
     * Find zero or one N that matches the filter.
     * @param {FindUniqueNArgs} args - Arguments to find a N
     * @deprecated This will be deprecated please use prisma.n.findUnique
     * @example
     * // Get one N
     * const n = await prisma.n.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueNArgs>(
      args: Subset<T, FindUniqueNArgs>
    ): CheckSelect<T, Prisma__NClient<N | null>, Prisma__NClient<NGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyNArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateNArgs>(args: Subset<T, AggregateNArgs>): Promise<GetNAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for N.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    m<T extends FindManyMArgs = {}>(args?: Subset<T, FindManyMArgs>): CheckSelect<T, Promise<Array<M>>, Promise<Array<MGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * N findUnique
   */
  export type FindUniqueNArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * Filter, which N to fetch.
    **/
    where: NWhereUniqueInput
  }


  /**
   * N findFirst
   */
  export type FindFirstNArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * Filter, which N to fetch.
    **/
    where?: NWhereInput
    orderBy?: XOR<Enumerable<NOrderByInput>, NOrderByInput>
    cursor?: NWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<NDistinctFieldEnum>
  }


  /**
   * N findMany
   */
  export type FindManyNArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * Filter, which NS to fetch.
    **/
    where?: NWhereInput
    /**
     * Determine the order of the NS to fetch.
    **/
    orderBy?: XOR<Enumerable<NOrderByInput>, NOrderByInput>
    /**
     * Sets the position for listing NS.
    **/
    cursor?: NWhereUniqueInput
    /**
     * The number of NS to fetch. If negative number, it will take NS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` NS.
    **/
    skip?: number
    distinct?: Enumerable<NDistinctFieldEnum>
  }


  /**
   * N create
   */
  export type NCreateArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * The data needed to create a N.
    **/
    data: XOR<NCreateInput, NUncheckedCreateInput>
  }


  /**
   * N update
   */
  export type NUpdateArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * The data needed to update a N.
    **/
    data: XOR<NUpdateInput, NUncheckedUpdateInput>
    /**
     * Choose, which N to update.
    **/
    where: NWhereUniqueInput
  }


  /**
   * N updateMany
   */
  export type NUpdateManyArgs = {
    data: XOR<NUpdateManyMutationInput, NUncheckedUpdateManyInput>
    where?: NWhereInput
  }


  /**
   * N upsert
   */
  export type NUpsertArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * The filter to search for the N to update in case it exists.
    **/
    where: NWhereUniqueInput
    /**
     * In case the N found by the \`where\` argument doesn't exist, create a new N with this data.
    **/
    create: XOR<NCreateInput, NUncheckedCreateInput>
    /**
     * In case the N was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<NUpdateInput, NUncheckedUpdateInput>
  }


  /**
   * N delete
   */
  export type NDeleteArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
    /**
     * Filter which N to delete.
    **/
    where: NWhereUniqueInput
  }


  /**
   * N deleteMany
   */
  export type NDeleteManyArgs = {
    where?: NWhereInput
  }


  /**
   * N without action
   */
  export type NArgs = {
    /**
     * Select specific fields to fetch from the N
    **/
    select?: XOR<NSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<NInclude, null>
  }



  /**
   * Model OneOptional
   */


  export type AggregateOneOptional = {
    count: number
    avg: OneOptionalAvgAggregateOutputType | null
    sum: OneOptionalSumAggregateOutputType | null
    min: OneOptionalMinAggregateOutputType | null
    max: OneOptionalMaxAggregateOutputType | null
  }

  export type OneOptionalAvgAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OneOptionalSumAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OneOptionalMinAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OneOptionalMaxAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type OneOptionalAvgAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OneOptionalSumAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OneOptionalMinAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OneOptionalMaxAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateOneOptionalArgs = {
    where?: OneOptionalWhereInput
    orderBy?: XOR<Enumerable<OneOptionalOrderByInput>, OneOptionalOrderByInput>
    cursor?: OneOptionalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OneOptionalDistinctFieldEnum>
    count?: true
    avg?: OneOptionalAvgAggregateInputType
    sum?: OneOptionalSumAggregateInputType
    min?: OneOptionalMinAggregateInputType
    max?: OneOptionalMaxAggregateInputType
  }

  export type GetOneOptionalAggregateType<T extends AggregateOneOptionalArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetOneOptionalAggregateScalarType<T[P]>
  }

  export type GetOneOptionalAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof OneOptionalAvgAggregateOutputType ? OneOptionalAvgAggregateOutputType[P] : never
  }
    
    

  export type OneOptionalSelect = {
    id?: boolean
    many?: boolean | FindManyManyRequiredArgs
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type OneOptionalInclude = {
    many?: boolean | FindManyManyRequiredArgs
  }

  export type OneOptionalGetPayload<
    S extends boolean | null | undefined | OneOptionalArgs,
    U = keyof S
      > = S extends true
        ? OneOptional
    : S extends undefined
    ? never
    : S extends OneOptionalArgs | FindManyOneOptionalArgs
    ?'include' extends U
    ? OneOptional  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'many'
        ? Array < ManyRequiredGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OneOptional ?OneOptional [P]
  : 
          P extends 'many'
        ? Array < ManyRequiredGetPayload<S['select'][P]>>  : never
  } 
    : OneOptional
  : OneOptional


  export interface OneOptionalDelegate {
    /**
     * Find zero or one OneOptional that matches the filter.
     * @param {FindUniqueOneOptionalArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueOneOptionalArgs>(
      args: Subset<T, FindUniqueOneOptionalArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional | null>, Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null>>
    /**
     * Find the first OneOptional that matches the filter.
     * @param {FindFirstOneOptionalArgs} args - Arguments to find a OneOptional
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstOneOptionalArgs>(
      args?: Subset<T, FindFirstOneOptionalArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional | null>, Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null>>
    /**
     * Find zero or more OneOptionals that matches the filter.
     * @param {FindManyOneOptionalArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OneOptionals
     * const oneOptionals = await prisma.oneOptional.findMany()
     * 
     * // Get first 10 OneOptionals
     * const oneOptionals = await prisma.oneOptional.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const oneOptionalWithIdOnly = await prisma.oneOptional.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyOneOptionalArgs>(
      args?: Subset<T, FindManyOneOptionalArgs>
    ): CheckSelect<T, Promise<Array<OneOptional>>, Promise<Array<OneOptionalGetPayload<T>>>>
    /**
     * Create a OneOptional.
     * @param {OneOptionalCreateArgs} args - Arguments to create a OneOptional.
     * @example
     * // Create one OneOptional
     * const OneOptional = await prisma.oneOptional.create({
     *   data: {
     *     // ... data to create a OneOptional
     *   }
     * })
     * 
    **/
    create<T extends OneOptionalCreateArgs>(
      args: Subset<T, OneOptionalCreateArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional>, Prisma__OneOptionalClient<OneOptionalGetPayload<T>>>
    /**
     * Delete a OneOptional.
     * @param {OneOptionalDeleteArgs} args - Arguments to delete one OneOptional.
     * @example
     * // Delete one OneOptional
     * const OneOptional = await prisma.oneOptional.delete({
     *   where: {
     *     // ... filter to delete one OneOptional
     *   }
     * })
     * 
    **/
    delete<T extends OneOptionalDeleteArgs>(
      args: Subset<T, OneOptionalDeleteArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional>, Prisma__OneOptionalClient<OneOptionalGetPayload<T>>>
    /**
     * Update one OneOptional.
     * @param {OneOptionalUpdateArgs} args - Arguments to update one OneOptional.
     * @example
     * // Update one OneOptional
     * const oneOptional = await prisma.oneOptional.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OneOptionalUpdateArgs>(
      args: Subset<T, OneOptionalUpdateArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional>, Prisma__OneOptionalClient<OneOptionalGetPayload<T>>>
    /**
     * Delete zero or more OneOptionals.
     * @param {OneOptionalDeleteManyArgs} args - Arguments to filter OneOptionals to delete.
     * @example
     * // Delete a few OneOptionals
     * const { count } = await prisma.oneOptional.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OneOptionalDeleteManyArgs>(
      args: Subset<T, OneOptionalDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more OneOptionals.
     * @param {OneOptionalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OneOptionals
     * const oneOptional = await prisma.oneOptional.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OneOptionalUpdateManyArgs>(
      args: Subset<T, OneOptionalUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one OneOptional.
     * @param {OneOptionalUpsertArgs} args - Arguments to update or create a OneOptional.
     * @example
     * // Update or create a OneOptional
     * const oneOptional = await prisma.oneOptional.upsert({
     *   create: {
     *     // ... data to create a OneOptional
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OneOptional we want to update
     *   }
     * })
    **/
    upsert<T extends OneOptionalUpsertArgs>(
      args: Subset<T, OneOptionalUpsertArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional>, Prisma__OneOptionalClient<OneOptionalGetPayload<T>>>
    /**
     * Find zero or one OneOptional that matches the filter.
     * @param {FindUniqueOneOptionalArgs} args - Arguments to find a OneOptional
     * @deprecated This will be deprecated please use prisma.oneOptional.findUnique
     * @example
     * // Get one OneOptional
     * const oneOptional = await prisma.oneOptional.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueOneOptionalArgs>(
      args: Subset<T, FindUniqueOneOptionalArgs>
    ): CheckSelect<T, Prisma__OneOptionalClient<OneOptional | null>, Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyOneOptionalArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateOneOptionalArgs>(args: Subset<T, AggregateOneOptionalArgs>): Promise<GetOneOptionalAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OneOptional.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OneOptionalClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    many<T extends FindManyManyRequiredArgs = {}>(args?: Subset<T, FindManyManyRequiredArgs>): CheckSelect<T, Promise<Array<ManyRequired>>, Promise<Array<ManyRequiredGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OneOptional findUnique
   */
  export type FindUniqueOneOptionalArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * Filter, which OneOptional to fetch.
    **/
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional findFirst
   */
  export type FindFirstOneOptionalArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * Filter, which OneOptional to fetch.
    **/
    where?: OneOptionalWhereInput
    orderBy?: XOR<Enumerable<OneOptionalOrderByInput>, OneOptionalOrderByInput>
    cursor?: OneOptionalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OneOptionalDistinctFieldEnum>
  }


  /**
   * OneOptional findMany
   */
  export type FindManyOneOptionalArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * Filter, which OneOptionals to fetch.
    **/
    where?: OneOptionalWhereInput
    /**
     * Determine the order of the OneOptionals to fetch.
    **/
    orderBy?: XOR<Enumerable<OneOptionalOrderByInput>, OneOptionalOrderByInput>
    /**
     * Sets the position for listing OneOptionals.
    **/
    cursor?: OneOptionalWhereUniqueInput
    /**
     * The number of OneOptionals to fetch. If negative number, it will take OneOptionals before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` OneOptionals.
    **/
    skip?: number
    distinct?: Enumerable<OneOptionalDistinctFieldEnum>
  }


  /**
   * OneOptional create
   */
  export type OneOptionalCreateArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * The data needed to create a OneOptional.
    **/
    data: XOR<OneOptionalCreateInput, OneOptionalUncheckedCreateInput>
  }


  /**
   * OneOptional update
   */
  export type OneOptionalUpdateArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * The data needed to update a OneOptional.
    **/
    data: XOR<OneOptionalUpdateInput, OneOptionalUncheckedUpdateInput>
    /**
     * Choose, which OneOptional to update.
    **/
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional updateMany
   */
  export type OneOptionalUpdateManyArgs = {
    data: XOR<OneOptionalUpdateManyMutationInput, OneOptionalUncheckedUpdateManyInput>
    where?: OneOptionalWhereInput
  }


  /**
   * OneOptional upsert
   */
  export type OneOptionalUpsertArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * The filter to search for the OneOptional to update in case it exists.
    **/
    where: OneOptionalWhereUniqueInput
    /**
     * In case the OneOptional found by the \`where\` argument doesn't exist, create a new OneOptional with this data.
    **/
    create: XOR<OneOptionalCreateInput, OneOptionalUncheckedCreateInput>
    /**
     * In case the OneOptional was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<OneOptionalUpdateInput, OneOptionalUncheckedUpdateInput>
  }


  /**
   * OneOptional delete
   */
  export type OneOptionalDeleteArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
    /**
     * Filter which OneOptional to delete.
    **/
    where: OneOptionalWhereUniqueInput
  }


  /**
   * OneOptional deleteMany
   */
  export type OneOptionalDeleteManyArgs = {
    where?: OneOptionalWhereInput
  }


  /**
   * OneOptional without action
   */
  export type OneOptionalArgs = {
    /**
     * Select specific fields to fetch from the OneOptional
    **/
    select?: XOR<OneOptionalSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OneOptionalInclude, null>
  }



  /**
   * Model ManyRequired
   */


  export type AggregateManyRequired = {
    count: number
    avg: ManyRequiredAvgAggregateOutputType | null
    sum: ManyRequiredSumAggregateOutputType | null
    min: ManyRequiredMinAggregateOutputType | null
    max: ManyRequiredMaxAggregateOutputType | null
  }

  export type ManyRequiredAvgAggregateOutputType = {
    id: number
    oneOptionalId: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type ManyRequiredSumAggregateOutputType = {
    id: number
    oneOptionalId: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type ManyRequiredMinAggregateOutputType = {
    id: number
    oneOptionalId: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type ManyRequiredMaxAggregateOutputType = {
    id: number
    oneOptionalId: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type ManyRequiredAvgAggregateInputType = {
    id?: true
    oneOptionalId?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type ManyRequiredSumAggregateInputType = {
    id?: true
    oneOptionalId?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type ManyRequiredMinAggregateInputType = {
    id?: true
    oneOptionalId?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type ManyRequiredMaxAggregateInputType = {
    id?: true
    oneOptionalId?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateManyRequiredArgs = {
    where?: ManyRequiredWhereInput
    orderBy?: XOR<Enumerable<ManyRequiredOrderByInput>, ManyRequiredOrderByInput>
    cursor?: ManyRequiredWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ManyRequiredDistinctFieldEnum>
    count?: true
    avg?: ManyRequiredAvgAggregateInputType
    sum?: ManyRequiredSumAggregateInputType
    min?: ManyRequiredMinAggregateInputType
    max?: ManyRequiredMaxAggregateInputType
  }

  export type GetManyRequiredAggregateType<T extends AggregateManyRequiredArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetManyRequiredAggregateScalarType<T[P]>
  }

  export type GetManyRequiredAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ManyRequiredAvgAggregateOutputType ? ManyRequiredAvgAggregateOutputType[P] : never
  }
    
    

  export type ManyRequiredSelect = {
    id?: boolean
    one?: boolean | OneOptionalArgs
    oneOptionalId?: boolean
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type ManyRequiredInclude = {
    one?: boolean | OneOptionalArgs
  }

  export type ManyRequiredGetPayload<
    S extends boolean | null | undefined | ManyRequiredArgs,
    U = keyof S
      > = S extends true
        ? ManyRequired
    : S extends undefined
    ? never
    : S extends ManyRequiredArgs | FindManyManyRequiredArgs
    ?'include' extends U
    ? ManyRequired  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'one'
        ? OneOptionalGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ManyRequired ?ManyRequired [P]
  : 
          P extends 'one'
        ? OneOptionalGetPayload<S['select'][P]> | null : never
  } 
    : ManyRequired
  : ManyRequired


  export interface ManyRequiredDelegate {
    /**
     * Find zero or one ManyRequired that matches the filter.
     * @param {FindUniqueManyRequiredArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueManyRequiredArgs>(
      args: Subset<T, FindUniqueManyRequiredArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired | null>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T> | null>>
    /**
     * Find the first ManyRequired that matches the filter.
     * @param {FindFirstManyRequiredArgs} args - Arguments to find a ManyRequired
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstManyRequiredArgs>(
      args?: Subset<T, FindFirstManyRequiredArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired | null>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T> | null>>
    /**
     * Find zero or more ManyRequireds that matches the filter.
     * @param {FindManyManyRequiredArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ManyRequireds
     * const manyRequireds = await prisma.manyRequired.findMany()
     * 
     * // Get first 10 ManyRequireds
     * const manyRequireds = await prisma.manyRequired.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const manyRequiredWithIdOnly = await prisma.manyRequired.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyManyRequiredArgs>(
      args?: Subset<T, FindManyManyRequiredArgs>
    ): CheckSelect<T, Promise<Array<ManyRequired>>, Promise<Array<ManyRequiredGetPayload<T>>>>
    /**
     * Create a ManyRequired.
     * @param {ManyRequiredCreateArgs} args - Arguments to create a ManyRequired.
     * @example
     * // Create one ManyRequired
     * const ManyRequired = await prisma.manyRequired.create({
     *   data: {
     *     // ... data to create a ManyRequired
     *   }
     * })
     * 
    **/
    create<T extends ManyRequiredCreateArgs>(
      args: Subset<T, ManyRequiredCreateArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>>
    /**
     * Delete a ManyRequired.
     * @param {ManyRequiredDeleteArgs} args - Arguments to delete one ManyRequired.
     * @example
     * // Delete one ManyRequired
     * const ManyRequired = await prisma.manyRequired.delete({
     *   where: {
     *     // ... filter to delete one ManyRequired
     *   }
     * })
     * 
    **/
    delete<T extends ManyRequiredDeleteArgs>(
      args: Subset<T, ManyRequiredDeleteArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>>
    /**
     * Update one ManyRequired.
     * @param {ManyRequiredUpdateArgs} args - Arguments to update one ManyRequired.
     * @example
     * // Update one ManyRequired
     * const manyRequired = await prisma.manyRequired.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ManyRequiredUpdateArgs>(
      args: Subset<T, ManyRequiredUpdateArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>>
    /**
     * Delete zero or more ManyRequireds.
     * @param {ManyRequiredDeleteManyArgs} args - Arguments to filter ManyRequireds to delete.
     * @example
     * // Delete a few ManyRequireds
     * const { count } = await prisma.manyRequired.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ManyRequiredDeleteManyArgs>(
      args: Subset<T, ManyRequiredDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more ManyRequireds.
     * @param {ManyRequiredUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ManyRequireds
     * const manyRequired = await prisma.manyRequired.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ManyRequiredUpdateManyArgs>(
      args: Subset<T, ManyRequiredUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one ManyRequired.
     * @param {ManyRequiredUpsertArgs} args - Arguments to update or create a ManyRequired.
     * @example
     * // Update or create a ManyRequired
     * const manyRequired = await prisma.manyRequired.upsert({
     *   create: {
     *     // ... data to create a ManyRequired
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ManyRequired we want to update
     *   }
     * })
    **/
    upsert<T extends ManyRequiredUpsertArgs>(
      args: Subset<T, ManyRequiredUpsertArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T>>>
    /**
     * Find zero or one ManyRequired that matches the filter.
     * @param {FindUniqueManyRequiredArgs} args - Arguments to find a ManyRequired
     * @deprecated This will be deprecated please use prisma.manyRequired.findUnique
     * @example
     * // Get one ManyRequired
     * const manyRequired = await prisma.manyRequired.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueManyRequiredArgs>(
      args: Subset<T, FindUniqueManyRequiredArgs>
    ): CheckSelect<T, Prisma__ManyRequiredClient<ManyRequired | null>, Prisma__ManyRequiredClient<ManyRequiredGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyManyRequiredArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateManyRequiredArgs>(args: Subset<T, AggregateManyRequiredArgs>): Promise<GetManyRequiredAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ManyRequired.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ManyRequiredClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    one<T extends OneOptionalArgs = {}>(args?: Subset<T, OneOptionalArgs>): CheckSelect<T, Prisma__OneOptionalClient<OneOptional | null>, Prisma__OneOptionalClient<OneOptionalGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ManyRequired findUnique
   */
  export type FindUniqueManyRequiredArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * Filter, which ManyRequired to fetch.
    **/
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired findFirst
   */
  export type FindFirstManyRequiredArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * Filter, which ManyRequired to fetch.
    **/
    where?: ManyRequiredWhereInput
    orderBy?: XOR<Enumerable<ManyRequiredOrderByInput>, ManyRequiredOrderByInput>
    cursor?: ManyRequiredWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ManyRequiredDistinctFieldEnum>
  }


  /**
   * ManyRequired findMany
   */
  export type FindManyManyRequiredArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * Filter, which ManyRequireds to fetch.
    **/
    where?: ManyRequiredWhereInput
    /**
     * Determine the order of the ManyRequireds to fetch.
    **/
    orderBy?: XOR<Enumerable<ManyRequiredOrderByInput>, ManyRequiredOrderByInput>
    /**
     * Sets the position for listing ManyRequireds.
    **/
    cursor?: ManyRequiredWhereUniqueInput
    /**
     * The number of ManyRequireds to fetch. If negative number, it will take ManyRequireds before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` ManyRequireds.
    **/
    skip?: number
    distinct?: Enumerable<ManyRequiredDistinctFieldEnum>
  }


  /**
   * ManyRequired create
   */
  export type ManyRequiredCreateArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * The data needed to create a ManyRequired.
    **/
    data: XOR<ManyRequiredCreateInput, ManyRequiredUncheckedCreateInput>
  }


  /**
   * ManyRequired update
   */
  export type ManyRequiredUpdateArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * The data needed to update a ManyRequired.
    **/
    data: XOR<ManyRequiredUpdateInput, ManyRequiredUncheckedUpdateInput>
    /**
     * Choose, which ManyRequired to update.
    **/
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired updateMany
   */
  export type ManyRequiredUpdateManyArgs = {
    data: XOR<ManyRequiredUpdateManyMutationInput, ManyRequiredUncheckedUpdateManyInput>
    where?: ManyRequiredWhereInput
  }


  /**
   * ManyRequired upsert
   */
  export type ManyRequiredUpsertArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * The filter to search for the ManyRequired to update in case it exists.
    **/
    where: ManyRequiredWhereUniqueInput
    /**
     * In case the ManyRequired found by the \`where\` argument doesn't exist, create a new ManyRequired with this data.
    **/
    create: XOR<ManyRequiredCreateInput, ManyRequiredUncheckedCreateInput>
    /**
     * In case the ManyRequired was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<ManyRequiredUpdateInput, ManyRequiredUncheckedUpdateInput>
  }


  /**
   * ManyRequired delete
   */
  export type ManyRequiredDeleteArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
    /**
     * Filter which ManyRequired to delete.
    **/
    where: ManyRequiredWhereUniqueInput
  }


  /**
   * ManyRequired deleteMany
   */
  export type ManyRequiredDeleteManyArgs = {
    where?: ManyRequiredWhereInput
  }


  /**
   * ManyRequired without action
   */
  export type ManyRequiredArgs = {
    /**
     * Select specific fields to fetch from the ManyRequired
    **/
    select?: XOR<ManyRequiredSelect, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<ManyRequiredInclude, null>
  }



  /**
   * Model OptionalSide1
   */


  export type AggregateOptionalSide1 = {
    count: number
    avg: OptionalSide1AvgAggregateOutputType | null
    sum: OptionalSide1SumAggregateOutputType | null
    min: OptionalSide1MinAggregateOutputType | null
    max: OptionalSide1MaxAggregateOutputType | null
  }

  export type OptionalSide1AvgAggregateOutputType = {
    id: number
    optionalSide2Id: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide1SumAggregateOutputType = {
    id: number
    optionalSide2Id: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide1MinAggregateOutputType = {
    id: number
    optionalSide2Id: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide1MaxAggregateOutputType = {
    id: number
    optionalSide2Id: number | null
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type OptionalSide1AvgAggregateInputType = {
    id?: true
    optionalSide2Id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide1SumAggregateInputType = {
    id?: true
    optionalSide2Id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide1MinAggregateInputType = {
    id?: true
    optionalSide2Id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide1MaxAggregateInputType = {
    id?: true
    optionalSide2Id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateOptionalSide1Args = {
    where?: OptionalSide1WhereInput
    orderBy?: XOR<Enumerable<OptionalSide1OrderByInput>, OptionalSide1OrderByInput>
    cursor?: OptionalSide1WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OptionalSide1DistinctFieldEnum>
    count?: true
    avg?: OptionalSide1AvgAggregateInputType
    sum?: OptionalSide1SumAggregateInputType
    min?: OptionalSide1MinAggregateInputType
    max?: OptionalSide1MaxAggregateInputType
  }

  export type GetOptionalSide1AggregateType<T extends AggregateOptionalSide1Args> = {
    [P in keyof T]: P extends 'count' ? number : GetOptionalSide1AggregateScalarType<T[P]>
  }

  export type GetOptionalSide1AggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof OptionalSide1AvgAggregateOutputType ? OptionalSide1AvgAggregateOutputType[P] : never
  }
    
    

  export type OptionalSide1Select = {
    id?: boolean
    opti?: boolean | OptionalSide2Args
    optionalSide2Id?: boolean
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type OptionalSide1Include = {
    opti?: boolean | OptionalSide2Args
  }

  export type OptionalSide1GetPayload<
    S extends boolean | null | undefined | OptionalSide1Args,
    U = keyof S
      > = S extends true
        ? OptionalSide1
    : S extends undefined
    ? never
    : S extends OptionalSide1Args | FindManyOptionalSide1Args
    ?'include' extends U
    ? OptionalSide1  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'opti'
        ? OptionalSide2GetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OptionalSide1 ?OptionalSide1 [P]
  : 
          P extends 'opti'
        ? OptionalSide2GetPayload<S['select'][P]> | null : never
  } 
    : OptionalSide1
  : OptionalSide1


  export interface OptionalSide1Delegate {
    /**
     * Find zero or one OptionalSide1 that matches the filter.
     * @param {FindUniqueOptionalSide1Args} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueOptionalSide1Args>(
      args: Subset<T, FindUniqueOptionalSide1Args>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1 | null>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null>>
    /**
     * Find the first OptionalSide1 that matches the filter.
     * @param {FindFirstOptionalSide1Args} args - Arguments to find a OptionalSide1
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstOptionalSide1Args>(
      args?: Subset<T, FindFirstOptionalSide1Args>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1 | null>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null>>
    /**
     * Find zero or more OptionalSide1s that matches the filter.
     * @param {FindManyOptionalSide1Args=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptionalSide1s
     * const optionalSide1s = await prisma.optionalSide1.findMany()
     * 
     * // Get first 10 OptionalSide1s
     * const optionalSide1s = await prisma.optionalSide1.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const optionalSide1WithIdOnly = await prisma.optionalSide1.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyOptionalSide1Args>(
      args?: Subset<T, FindManyOptionalSide1Args>
    ): CheckSelect<T, Promise<Array<OptionalSide1>>, Promise<Array<OptionalSide1GetPayload<T>>>>
    /**
     * Create a OptionalSide1.
     * @param {OptionalSide1CreateArgs} args - Arguments to create a OptionalSide1.
     * @example
     * // Create one OptionalSide1
     * const OptionalSide1 = await prisma.optionalSide1.create({
     *   data: {
     *     // ... data to create a OptionalSide1
     *   }
     * })
     * 
    **/
    create<T extends OptionalSide1CreateArgs>(
      args: Subset<T, OptionalSide1CreateArgs>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>>
    /**
     * Delete a OptionalSide1.
     * @param {OptionalSide1DeleteArgs} args - Arguments to delete one OptionalSide1.
     * @example
     * // Delete one OptionalSide1
     * const OptionalSide1 = await prisma.optionalSide1.delete({
     *   where: {
     *     // ... filter to delete one OptionalSide1
     *   }
     * })
     * 
    **/
    delete<T extends OptionalSide1DeleteArgs>(
      args: Subset<T, OptionalSide1DeleteArgs>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>>
    /**
     * Update one OptionalSide1.
     * @param {OptionalSide1UpdateArgs} args - Arguments to update one OptionalSide1.
     * @example
     * // Update one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionalSide1UpdateArgs>(
      args: Subset<T, OptionalSide1UpdateArgs>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>>
    /**
     * Delete zero or more OptionalSide1s.
     * @param {OptionalSide1DeleteManyArgs} args - Arguments to filter OptionalSide1s to delete.
     * @example
     * // Delete a few OptionalSide1s
     * const { count } = await prisma.optionalSide1.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionalSide1DeleteManyArgs>(
      args: Subset<T, OptionalSide1DeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more OptionalSide1s.
     * @param {OptionalSide1UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptionalSide1s
     * const optionalSide1 = await prisma.optionalSide1.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionalSide1UpdateManyArgs>(
      args: Subset<T, OptionalSide1UpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one OptionalSide1.
     * @param {OptionalSide1UpsertArgs} args - Arguments to update or create a OptionalSide1.
     * @example
     * // Update or create a OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.upsert({
     *   create: {
     *     // ... data to create a OptionalSide1
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptionalSide1 we want to update
     *   }
     * })
    **/
    upsert<T extends OptionalSide1UpsertArgs>(
      args: Subset<T, OptionalSide1UpsertArgs>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T>>>
    /**
     * Find zero or one OptionalSide1 that matches the filter.
     * @param {FindUniqueOptionalSide1Args} args - Arguments to find a OptionalSide1
     * @deprecated This will be deprecated please use prisma.optionalSide1.findUnique
     * @example
     * // Get one OptionalSide1
     * const optionalSide1 = await prisma.optionalSide1.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueOptionalSide1Args>(
      args: Subset<T, FindUniqueOptionalSide1Args>
    ): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1 | null>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyOptionalSide1Args, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateOptionalSide1Args>(args: Subset<T, AggregateOptionalSide1Args>): Promise<GetOptionalSide1AggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OptionalSide1.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionalSide1Client<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    opti<T extends OptionalSide2Args = {}>(args?: Subset<T, OptionalSide2Args>): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2 | null>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OptionalSide1 findUnique
   */
  export type FindUniqueOptionalSide1Args = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * Filter, which OptionalSide1 to fetch.
    **/
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 findFirst
   */
  export type FindFirstOptionalSide1Args = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * Filter, which OptionalSide1 to fetch.
    **/
    where?: OptionalSide1WhereInput
    orderBy?: XOR<Enumerable<OptionalSide1OrderByInput>, OptionalSide1OrderByInput>
    cursor?: OptionalSide1WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OptionalSide1DistinctFieldEnum>
  }


  /**
   * OptionalSide1 findMany
   */
  export type FindManyOptionalSide1Args = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * Filter, which OptionalSide1s to fetch.
    **/
    where?: OptionalSide1WhereInput
    /**
     * Determine the order of the OptionalSide1s to fetch.
    **/
    orderBy?: XOR<Enumerable<OptionalSide1OrderByInput>, OptionalSide1OrderByInput>
    /**
     * Sets the position for listing OptionalSide1s.
    **/
    cursor?: OptionalSide1WhereUniqueInput
    /**
     * The number of OptionalSide1s to fetch. If negative number, it will take OptionalSide1s before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` OptionalSide1s.
    **/
    skip?: number
    distinct?: Enumerable<OptionalSide1DistinctFieldEnum>
  }


  /**
   * OptionalSide1 create
   */
  export type OptionalSide1CreateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * The data needed to create a OptionalSide1.
    **/
    data: XOR<OptionalSide1CreateInput, OptionalSide1UncheckedCreateInput>
  }


  /**
   * OptionalSide1 update
   */
  export type OptionalSide1UpdateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * The data needed to update a OptionalSide1.
    **/
    data: XOR<OptionalSide1UpdateInput, OptionalSide1UncheckedUpdateInput>
    /**
     * Choose, which OptionalSide1 to update.
    **/
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 updateMany
   */
  export type OptionalSide1UpdateManyArgs = {
    data: XOR<OptionalSide1UpdateManyMutationInput, OptionalSide1UncheckedUpdateManyInput>
    where?: OptionalSide1WhereInput
  }


  /**
   * OptionalSide1 upsert
   */
  export type OptionalSide1UpsertArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * The filter to search for the OptionalSide1 to update in case it exists.
    **/
    where: OptionalSide1WhereUniqueInput
    /**
     * In case the OptionalSide1 found by the \`where\` argument doesn't exist, create a new OptionalSide1 with this data.
    **/
    create: XOR<OptionalSide1CreateInput, OptionalSide1UncheckedCreateInput>
    /**
     * In case the OptionalSide1 was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<OptionalSide1UpdateInput, OptionalSide1UncheckedUpdateInput>
  }


  /**
   * OptionalSide1 delete
   */
  export type OptionalSide1DeleteArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
    /**
     * Filter which OptionalSide1 to delete.
    **/
    where: OptionalSide1WhereUniqueInput
  }


  /**
   * OptionalSide1 deleteMany
   */
  export type OptionalSide1DeleteManyArgs = {
    where?: OptionalSide1WhereInput
  }


  /**
   * OptionalSide1 without action
   */
  export type OptionalSide1Args = {
    /**
     * Select specific fields to fetch from the OptionalSide1
    **/
    select?: XOR<OptionalSide1Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide1Include, null>
  }



  /**
   * Model OptionalSide2
   */


  export type AggregateOptionalSide2 = {
    count: number
    avg: OptionalSide2AvgAggregateOutputType | null
    sum: OptionalSide2SumAggregateOutputType | null
    min: OptionalSide2MinAggregateOutputType | null
    max: OptionalSide2MaxAggregateOutputType | null
  }

  export type OptionalSide2AvgAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide2SumAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide2MinAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }

  export type OptionalSide2MaxAggregateOutputType = {
    id: number
    int: number
    optionalInt: number | null
    float: number
    optionalFloat: number | null
  }


  export type OptionalSide2AvgAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide2SumAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide2MinAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type OptionalSide2MaxAggregateInputType = {
    id?: true
    int?: true
    optionalInt?: true
    float?: true
    optionalFloat?: true
  }

  export type AggregateOptionalSide2Args = {
    where?: OptionalSide2WhereInput
    orderBy?: XOR<Enumerable<OptionalSide2OrderByInput>, OptionalSide2OrderByInput>
    cursor?: OptionalSide2WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OptionalSide2DistinctFieldEnum>
    count?: true
    avg?: OptionalSide2AvgAggregateInputType
    sum?: OptionalSide2SumAggregateInputType
    min?: OptionalSide2MinAggregateInputType
    max?: OptionalSide2MaxAggregateInputType
  }

  export type GetOptionalSide2AggregateType<T extends AggregateOptionalSide2Args> = {
    [P in keyof T]: P extends 'count' ? number : GetOptionalSide2AggregateScalarType<T[P]>
  }

  export type GetOptionalSide2AggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof OptionalSide2AvgAggregateOutputType ? OptionalSide2AvgAggregateOutputType[P] : never
  }
    
    

  export type OptionalSide2Select = {
    id?: boolean
    opti?: boolean | OptionalSide1Args
    int?: boolean
    optionalInt?: boolean
    float?: boolean
    optionalFloat?: boolean
    string?: boolean
    optionalString?: boolean
    json?: boolean
    optionalJson?: boolean
    enum?: boolean
    optionalEnum?: boolean
    boolean?: boolean
    optionalBoolean?: boolean
  }

  export type OptionalSide2Include = {
    opti?: boolean | OptionalSide1Args
  }

  export type OptionalSide2GetPayload<
    S extends boolean | null | undefined | OptionalSide2Args,
    U = keyof S
      > = S extends true
        ? OptionalSide2
    : S extends undefined
    ? never
    : S extends OptionalSide2Args | FindManyOptionalSide2Args
    ?'include' extends U
    ? OptionalSide2  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'opti'
        ? OptionalSide1GetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof OptionalSide2 ?OptionalSide2 [P]
  : 
          P extends 'opti'
        ? OptionalSide1GetPayload<S['select'][P]> | null : never
  } 
    : OptionalSide2
  : OptionalSide2


  export interface OptionalSide2Delegate {
    /**
     * Find zero or one OptionalSide2 that matches the filter.
     * @param {FindUniqueOptionalSide2Args} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueOptionalSide2Args>(
      args: Subset<T, FindUniqueOptionalSide2Args>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2 | null>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null>>
    /**
     * Find the first OptionalSide2 that matches the filter.
     * @param {FindFirstOptionalSide2Args} args - Arguments to find a OptionalSide2
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstOptionalSide2Args>(
      args?: Subset<T, FindFirstOptionalSide2Args>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2 | null>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null>>
    /**
     * Find zero or more OptionalSide2s that matches the filter.
     * @param {FindManyOptionalSide2Args=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OptionalSide2s
     * const optionalSide2s = await prisma.optionalSide2.findMany()
     * 
     * // Get first 10 OptionalSide2s
     * const optionalSide2s = await prisma.optionalSide2.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const optionalSide2WithIdOnly = await prisma.optionalSide2.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyOptionalSide2Args>(
      args?: Subset<T, FindManyOptionalSide2Args>
    ): CheckSelect<T, Promise<Array<OptionalSide2>>, Promise<Array<OptionalSide2GetPayload<T>>>>
    /**
     * Create a OptionalSide2.
     * @param {OptionalSide2CreateArgs} args - Arguments to create a OptionalSide2.
     * @example
     * // Create one OptionalSide2
     * const OptionalSide2 = await prisma.optionalSide2.create({
     *   data: {
     *     // ... data to create a OptionalSide2
     *   }
     * })
     * 
    **/
    create<T extends OptionalSide2CreateArgs>(
      args: Subset<T, OptionalSide2CreateArgs>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>>
    /**
     * Delete a OptionalSide2.
     * @param {OptionalSide2DeleteArgs} args - Arguments to delete one OptionalSide2.
     * @example
     * // Delete one OptionalSide2
     * const OptionalSide2 = await prisma.optionalSide2.delete({
     *   where: {
     *     // ... filter to delete one OptionalSide2
     *   }
     * })
     * 
    **/
    delete<T extends OptionalSide2DeleteArgs>(
      args: Subset<T, OptionalSide2DeleteArgs>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>>
    /**
     * Update one OptionalSide2.
     * @param {OptionalSide2UpdateArgs} args - Arguments to update one OptionalSide2.
     * @example
     * // Update one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OptionalSide2UpdateArgs>(
      args: Subset<T, OptionalSide2UpdateArgs>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>>
    /**
     * Delete zero or more OptionalSide2s.
     * @param {OptionalSide2DeleteManyArgs} args - Arguments to filter OptionalSide2s to delete.
     * @example
     * // Delete a few OptionalSide2s
     * const { count } = await prisma.optionalSide2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OptionalSide2DeleteManyArgs>(
      args: Subset<T, OptionalSide2DeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more OptionalSide2s.
     * @param {OptionalSide2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OptionalSide2s
     * const optionalSide2 = await prisma.optionalSide2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OptionalSide2UpdateManyArgs>(
      args: Subset<T, OptionalSide2UpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one OptionalSide2.
     * @param {OptionalSide2UpsertArgs} args - Arguments to update or create a OptionalSide2.
     * @example
     * // Update or create a OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.upsert({
     *   create: {
     *     // ... data to create a OptionalSide2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OptionalSide2 we want to update
     *   }
     * })
    **/
    upsert<T extends OptionalSide2UpsertArgs>(
      args: Subset<T, OptionalSide2UpsertArgs>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T>>>
    /**
     * Find zero or one OptionalSide2 that matches the filter.
     * @param {FindUniqueOptionalSide2Args} args - Arguments to find a OptionalSide2
     * @deprecated This will be deprecated please use prisma.optionalSide2.findUnique
     * @example
     * // Get one OptionalSide2
     * const optionalSide2 = await prisma.optionalSide2.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueOptionalSide2Args>(
      args: Subset<T, FindUniqueOptionalSide2Args>
    ): CheckSelect<T, Prisma__OptionalSide2Client<OptionalSide2 | null>, Prisma__OptionalSide2Client<OptionalSide2GetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyOptionalSide2Args, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateOptionalSide2Args>(args: Subset<T, AggregateOptionalSide2Args>): Promise<GetOptionalSide2AggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for OptionalSide2.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OptionalSide2Client<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    opti<T extends OptionalSide1Args = {}>(args?: Subset<T, OptionalSide1Args>): CheckSelect<T, Prisma__OptionalSide1Client<OptionalSide1 | null>, Prisma__OptionalSide1Client<OptionalSide1GetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * OptionalSide2 findUnique
   */
  export type FindUniqueOptionalSide2Args = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * Filter, which OptionalSide2 to fetch.
    **/
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 findFirst
   */
  export type FindFirstOptionalSide2Args = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * Filter, which OptionalSide2 to fetch.
    **/
    where?: OptionalSide2WhereInput
    orderBy?: XOR<Enumerable<OptionalSide2OrderByInput>, OptionalSide2OrderByInput>
    cursor?: OptionalSide2WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OptionalSide2DistinctFieldEnum>
  }


  /**
   * OptionalSide2 findMany
   */
  export type FindManyOptionalSide2Args = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * Filter, which OptionalSide2s to fetch.
    **/
    where?: OptionalSide2WhereInput
    /**
     * Determine the order of the OptionalSide2s to fetch.
    **/
    orderBy?: XOR<Enumerable<OptionalSide2OrderByInput>, OptionalSide2OrderByInput>
    /**
     * Sets the position for listing OptionalSide2s.
    **/
    cursor?: OptionalSide2WhereUniqueInput
    /**
     * The number of OptionalSide2s to fetch. If negative number, it will take OptionalSide2s before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` OptionalSide2s.
    **/
    skip?: number
    distinct?: Enumerable<OptionalSide2DistinctFieldEnum>
  }


  /**
   * OptionalSide2 create
   */
  export type OptionalSide2CreateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * The data needed to create a OptionalSide2.
    **/
    data: XOR<OptionalSide2CreateInput, OptionalSide2UncheckedCreateInput>
  }


  /**
   * OptionalSide2 update
   */
  export type OptionalSide2UpdateArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * The data needed to update a OptionalSide2.
    **/
    data: XOR<OptionalSide2UpdateInput, OptionalSide2UncheckedUpdateInput>
    /**
     * Choose, which OptionalSide2 to update.
    **/
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 updateMany
   */
  export type OptionalSide2UpdateManyArgs = {
    data: XOR<OptionalSide2UpdateManyMutationInput, OptionalSide2UncheckedUpdateManyInput>
    where?: OptionalSide2WhereInput
  }


  /**
   * OptionalSide2 upsert
   */
  export type OptionalSide2UpsertArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * The filter to search for the OptionalSide2 to update in case it exists.
    **/
    where: OptionalSide2WhereUniqueInput
    /**
     * In case the OptionalSide2 found by the \`where\` argument doesn't exist, create a new OptionalSide2 with this data.
    **/
    create: XOR<OptionalSide2CreateInput, OptionalSide2UncheckedCreateInput>
    /**
     * In case the OptionalSide2 was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<OptionalSide2UpdateInput, OptionalSide2UncheckedUpdateInput>
  }


  /**
   * OptionalSide2 delete
   */
  export type OptionalSide2DeleteArgs = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
    /**
     * Filter which OptionalSide2 to delete.
    **/
    where: OptionalSide2WhereUniqueInput
  }


  /**
   * OptionalSide2 deleteMany
   */
  export type OptionalSide2DeleteManyArgs = {
    where?: OptionalSide2WhereInput
  }


  /**
   * OptionalSide2 without action
   */
  export type OptionalSide2Args = {
    /**
     * Select specific fields to fetch from the OptionalSide2
    **/
    select?: XOR<OptionalSide2Select, null>
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: XOR<OptionalSide2Include, null>
  }



  /**
   * Model A
   */


  export type AggregateA = {
    count: number
    avg: AAvgAggregateOutputType | null
    sum: ASumAggregateOutputType | null
    min: AMinAggregateOutputType | null
    max: AMaxAggregateOutputType | null
  }

  export type AAvgAggregateOutputType = {
    int: number
    sInt: number
    bInt: number
    serial: number
    sSerial: number
    bSerial: number
    inc_int: number
    inc_sInt: number
    inc_bInt: number
  }

  export type ASumAggregateOutputType = {
    int: number
    sInt: number
    bInt: BigInt
    serial: number
    sSerial: number
    bSerial: number
    inc_int: number
    inc_sInt: number
    inc_bInt: BigInt
  }

  export type AMinAggregateOutputType = {
    int: number
    sInt: number
    bInt: BigInt
    serial: number
    sSerial: number
    bSerial: number
    inc_int: number
    inc_sInt: number
    inc_bInt: BigInt
  }

  export type AMaxAggregateOutputType = {
    int: number
    sInt: number
    bInt: BigInt
    serial: number
    sSerial: number
    bSerial: number
    inc_int: number
    inc_sInt: number
    inc_bInt: BigInt
  }


  export type AAvgAggregateInputType = {
    int?: true
    sInt?: true
    bInt?: true
    serial?: true
    sSerial?: true
    bSerial?: true
    inc_int?: true
    inc_sInt?: true
    inc_bInt?: true
  }

  export type ASumAggregateInputType = {
    int?: true
    sInt?: true
    bInt?: true
    serial?: true
    sSerial?: true
    bSerial?: true
    inc_int?: true
    inc_sInt?: true
    inc_bInt?: true
  }

  export type AMinAggregateInputType = {
    int?: true
    sInt?: true
    bInt?: true
    serial?: true
    sSerial?: true
    bSerial?: true
    inc_int?: true
    inc_sInt?: true
    inc_bInt?: true
  }

  export type AMaxAggregateInputType = {
    int?: true
    sInt?: true
    bInt?: true
    serial?: true
    sSerial?: true
    bSerial?: true
    inc_int?: true
    inc_sInt?: true
    inc_bInt?: true
  }

  export type AggregateAArgs = {
    where?: AWhereInput
    orderBy?: XOR<Enumerable<AOrderByInput>, AOrderByInput>
    cursor?: AWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ADistinctFieldEnum>
    count?: true
    avg?: AAvgAggregateInputType
    sum?: ASumAggregateInputType
    min?: AMinAggregateInputType
    max?: AMaxAggregateInputType
  }

  export type GetAAggregateType<T extends AggregateAArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetAAggregateScalarType<T[P]>
  }

  export type GetAAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof AAvgAggregateOutputType ? AAvgAggregateOutputType[P] : never
  }
    
    

  export type ASelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    int?: boolean
    sInt?: boolean
    bInt?: boolean
    serial?: boolean
    sSerial?: boolean
    bSerial?: boolean
    inc_int?: boolean
    inc_sInt?: boolean
    inc_bInt?: boolean
  }

  export type AGetPayload<
    S extends boolean | null | undefined | AArgs,
    U = keyof S
      > = S extends true
        ? A
    : S extends undefined
    ? never
    : S extends AArgs | FindManyAArgs
    ?'include' extends U
    ? A 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof A ?A [P]
  : 
     never
  } 
    : A
  : A


  export interface ADelegate {
    /**
     * Find zero or one A that matches the filter.
     * @param {FindUniqueAArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAArgs>(
      args: Subset<T, FindUniqueAArgs>
    ): CheckSelect<T, Prisma__AClient<A | null>, Prisma__AClient<AGetPayload<T> | null>>
    /**
     * Find the first A that matches the filter.
     * @param {FindFirstAArgs} args - Arguments to find a A
     * @example
     * // Get one A
     * const a = await prisma.a.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAArgs>(
      args?: Subset<T, FindFirstAArgs>
    ): CheckSelect<T, Prisma__AClient<A | null>, Prisma__AClient<AGetPayload<T> | null>>
    /**
     * Find zero or more As that matches the filter.
     * @param {FindManyAArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all As
     * const as = await prisma.a.findMany()
     * 
     * // Get first 10 As
     * const as = await prisma.a.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const aWithIdOnly = await prisma.a.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAArgs>(
      args?: Subset<T, FindManyAArgs>
    ): CheckSelect<T, Promise<Array<A>>, Promise<Array<AGetPayload<T>>>>
    /**
     * Create a A.
     * @param {ACreateArgs} args - Arguments to create a A.
     * @example
     * // Create one A
     * const A = await prisma.a.create({
     *   data: {
     *     // ... data to create a A
     *   }
     * })
     * 
    **/
    create<T extends ACreateArgs>(
      args: Subset<T, ACreateArgs>
    ): CheckSelect<T, Prisma__AClient<A>, Prisma__AClient<AGetPayload<T>>>
    /**
     * Delete a A.
     * @param {ADeleteArgs} args - Arguments to delete one A.
     * @example
     * // Delete one A
     * const A = await prisma.a.delete({
     *   where: {
     *     // ... filter to delete one A
     *   }
     * })
     * 
    **/
    delete<T extends ADeleteArgs>(
      args: Subset<T, ADeleteArgs>
    ): CheckSelect<T, Prisma__AClient<A>, Prisma__AClient<AGetPayload<T>>>
    /**
     * Update one A.
     * @param {AUpdateArgs} args - Arguments to update one A.
     * @example
     * // Update one A
     * const a = await prisma.a.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AUpdateArgs>(
      args: Subset<T, AUpdateArgs>
    ): CheckSelect<T, Prisma__AClient<A>, Prisma__AClient<AGetPayload<T>>>
    /**
     * Delete zero or more As.
     * @param {ADeleteManyArgs} args - Arguments to filter As to delete.
     * @example
     * // Delete a few As
     * const { count } = await prisma.a.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ADeleteManyArgs>(
      args: Subset<T, ADeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more As.
     * @param {AUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many As
     * const a = await prisma.a.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AUpdateManyArgs>(
      args: Subset<T, AUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one A.
     * @param {AUpsertArgs} args - Arguments to update or create a A.
     * @example
     * // Update or create a A
     * const a = await prisma.a.upsert({
     *   create: {
     *     // ... data to create a A
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the A we want to update
     *   }
     * })
    **/
    upsert<T extends AUpsertArgs>(
      args: Subset<T, AUpsertArgs>
    ): CheckSelect<T, Prisma__AClient<A>, Prisma__AClient<AGetPayload<T>>>
    /**
     * Find zero or one A that matches the filter.
     * @param {FindUniqueAArgs} args - Arguments to find a A
     * @deprecated This will be deprecated please use prisma.a.findUnique
     * @example
     * // Get one A
     * const a = await prisma.a.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAArgs>(
      args: Subset<T, FindUniqueAArgs>
    ): CheckSelect<T, Prisma__AClient<A | null>, Prisma__AClient<AGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyAArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateAArgs>(args: Subset<T, AggregateAArgs>): Promise<GetAAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for A.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * A findUnique
   */
  export type FindUniqueAArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * Filter, which A to fetch.
    **/
    where: AWhereUniqueInput
  }


  /**
   * A findFirst
   */
  export type FindFirstAArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * Filter, which A to fetch.
    **/
    where?: AWhereInput
    orderBy?: XOR<Enumerable<AOrderByInput>, AOrderByInput>
    cursor?: AWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ADistinctFieldEnum>
  }


  /**
   * A findMany
   */
  export type FindManyAArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * Filter, which AS to fetch.
    **/
    where?: AWhereInput
    /**
     * Determine the order of the AS to fetch.
    **/
    orderBy?: XOR<Enumerable<AOrderByInput>, AOrderByInput>
    /**
     * Sets the position for listing AS.
    **/
    cursor?: AWhereUniqueInput
    /**
     * The number of AS to fetch. If negative number, it will take AS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` AS.
    **/
    skip?: number
    distinct?: Enumerable<ADistinctFieldEnum>
  }


  /**
   * A create
   */
  export type ACreateArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * The data needed to create a A.
    **/
    data: XOR<ACreateInput, AUncheckedCreateInput>
  }


  /**
   * A update
   */
  export type AUpdateArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * The data needed to update a A.
    **/
    data: XOR<AUpdateInput, AUncheckedUpdateInput>
    /**
     * Choose, which A to update.
    **/
    where: AWhereUniqueInput
  }


  /**
   * A updateMany
   */
  export type AUpdateManyArgs = {
    data: XOR<AUpdateManyMutationInput, AUncheckedUpdateManyInput>
    where?: AWhereInput
  }


  /**
   * A upsert
   */
  export type AUpsertArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * The filter to search for the A to update in case it exists.
    **/
    where: AWhereUniqueInput
    /**
     * In case the A found by the \`where\` argument doesn't exist, create a new A with this data.
    **/
    create: XOR<ACreateInput, AUncheckedCreateInput>
    /**
     * In case the A was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<AUpdateInput, AUncheckedUpdateInput>
  }


  /**
   * A delete
   */
  export type ADeleteArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
    /**
     * Filter which A to delete.
    **/
    where: AWhereUniqueInput
  }


  /**
   * A deleteMany
   */
  export type ADeleteManyArgs = {
    where?: AWhereInput
  }


  /**
   * A without action
   */
  export type AArgs = {
    /**
     * Select specific fields to fetch from the A
    **/
    select?: XOR<ASelect, null>
  }



  /**
   * Model B
   */


  export type AggregateB = {
    count: number
    avg: BAvgAggregateOutputType | null
    sum: BSumAggregateOutputType | null
    min: BMinAggregateOutputType | null
    max: BMaxAggregateOutputType | null
  }

  export type BAvgAggregateOutputType = {
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }

  export type BSumAggregateOutputType = {
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }

  export type BMinAggregateOutputType = {
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }

  export type BMaxAggregateOutputType = {
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }


  export type BAvgAggregateInputType = {
    float?: true
    dFloat?: true
    decFloat?: true
    numFloat?: true
  }

  export type BSumAggregateInputType = {
    float?: true
    dFloat?: true
    decFloat?: true
    numFloat?: true
  }

  export type BMinAggregateInputType = {
    float?: true
    dFloat?: true
    decFloat?: true
    numFloat?: true
  }

  export type BMaxAggregateInputType = {
    float?: true
    dFloat?: true
    decFloat?: true
    numFloat?: true
  }

  export type AggregateBArgs = {
    where?: BWhereInput
    orderBy?: XOR<Enumerable<BOrderByInput>, BOrderByInput>
    cursor?: BWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BDistinctFieldEnum>
    count?: true
    avg?: BAvgAggregateInputType
    sum?: BSumAggregateInputType
    min?: BMinAggregateInputType
    max?: BMaxAggregateInputType
  }

  export type GetBAggregateType<T extends AggregateBArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetBAggregateScalarType<T[P]>
  }

  export type GetBAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof BAvgAggregateOutputType ? BAvgAggregateOutputType[P] : never
  }
    
    

  export type BSelect = {
    id?: boolean
    float?: boolean
    dFloat?: boolean
    decFloat?: boolean
    numFloat?: boolean
  }

  export type BGetPayload<
    S extends boolean | null | undefined | BArgs,
    U = keyof S
      > = S extends true
        ? B
    : S extends undefined
    ? never
    : S extends BArgs | FindManyBArgs
    ?'include' extends U
    ? B 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof B ?B [P]
  : 
     never
  } 
    : B
  : B


  export interface BDelegate {
    /**
     * Find zero or one B that matches the filter.
     * @param {FindUniqueBArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueBArgs>(
      args: Subset<T, FindUniqueBArgs>
    ): CheckSelect<T, Prisma__BClient<B | null>, Prisma__BClient<BGetPayload<T> | null>>
    /**
     * Find the first B that matches the filter.
     * @param {FindFirstBArgs} args - Arguments to find a B
     * @example
     * // Get one B
     * const b = await prisma.b.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstBArgs>(
      args?: Subset<T, FindFirstBArgs>
    ): CheckSelect<T, Prisma__BClient<B | null>, Prisma__BClient<BGetPayload<T> | null>>
    /**
     * Find zero or more Bs that matches the filter.
     * @param {FindManyBArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bs
     * const bs = await prisma.b.findMany()
     * 
     * // Get first 10 Bs
     * const bs = await prisma.b.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const bWithIdOnly = await prisma.b.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyBArgs>(
      args?: Subset<T, FindManyBArgs>
    ): CheckSelect<T, Promise<Array<B>>, Promise<Array<BGetPayload<T>>>>
    /**
     * Create a B.
     * @param {BCreateArgs} args - Arguments to create a B.
     * @example
     * // Create one B
     * const B = await prisma.b.create({
     *   data: {
     *     // ... data to create a B
     *   }
     * })
     * 
    **/
    create<T extends BCreateArgs>(
      args: Subset<T, BCreateArgs>
    ): CheckSelect<T, Prisma__BClient<B>, Prisma__BClient<BGetPayload<T>>>
    /**
     * Delete a B.
     * @param {BDeleteArgs} args - Arguments to delete one B.
     * @example
     * // Delete one B
     * const B = await prisma.b.delete({
     *   where: {
     *     // ... filter to delete one B
     *   }
     * })
     * 
    **/
    delete<T extends BDeleteArgs>(
      args: Subset<T, BDeleteArgs>
    ): CheckSelect<T, Prisma__BClient<B>, Prisma__BClient<BGetPayload<T>>>
    /**
     * Update one B.
     * @param {BUpdateArgs} args - Arguments to update one B.
     * @example
     * // Update one B
     * const b = await prisma.b.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BUpdateArgs>(
      args: Subset<T, BUpdateArgs>
    ): CheckSelect<T, Prisma__BClient<B>, Prisma__BClient<BGetPayload<T>>>
    /**
     * Delete zero or more Bs.
     * @param {BDeleteManyArgs} args - Arguments to filter Bs to delete.
     * @example
     * // Delete a few Bs
     * const { count } = await prisma.b.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BDeleteManyArgs>(
      args: Subset<T, BDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Bs.
     * @param {BUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bs
     * const b = await prisma.b.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BUpdateManyArgs>(
      args: Subset<T, BUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one B.
     * @param {BUpsertArgs} args - Arguments to update or create a B.
     * @example
     * // Update or create a B
     * const b = await prisma.b.upsert({
     *   create: {
     *     // ... data to create a B
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the B we want to update
     *   }
     * })
    **/
    upsert<T extends BUpsertArgs>(
      args: Subset<T, BUpsertArgs>
    ): CheckSelect<T, Prisma__BClient<B>, Prisma__BClient<BGetPayload<T>>>
    /**
     * Find zero or one B that matches the filter.
     * @param {FindUniqueBArgs} args - Arguments to find a B
     * @deprecated This will be deprecated please use prisma.b.findUnique
     * @example
     * // Get one B
     * const b = await prisma.b.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueBArgs>(
      args: Subset<T, FindUniqueBArgs>
    ): CheckSelect<T, Prisma__BClient<B | null>, Prisma__BClient<BGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyBArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateBArgs>(args: Subset<T, AggregateBArgs>): Promise<GetBAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for B.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * B findUnique
   */
  export type FindUniqueBArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * Filter, which B to fetch.
    **/
    where: BWhereUniqueInput
  }


  /**
   * B findFirst
   */
  export type FindFirstBArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * Filter, which B to fetch.
    **/
    where?: BWhereInput
    orderBy?: XOR<Enumerable<BOrderByInput>, BOrderByInput>
    cursor?: BWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BDistinctFieldEnum>
  }


  /**
   * B findMany
   */
  export type FindManyBArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * Filter, which BS to fetch.
    **/
    where?: BWhereInput
    /**
     * Determine the order of the BS to fetch.
    **/
    orderBy?: XOR<Enumerable<BOrderByInput>, BOrderByInput>
    /**
     * Sets the position for listing BS.
    **/
    cursor?: BWhereUniqueInput
    /**
     * The number of BS to fetch. If negative number, it will take BS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` BS.
    **/
    skip?: number
    distinct?: Enumerable<BDistinctFieldEnum>
  }


  /**
   * B create
   */
  export type BCreateArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * The data needed to create a B.
    **/
    data: XOR<BCreateInput, BUncheckedCreateInput>
  }


  /**
   * B update
   */
  export type BUpdateArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * The data needed to update a B.
    **/
    data: XOR<BUpdateInput, BUncheckedUpdateInput>
    /**
     * Choose, which B to update.
    **/
    where: BWhereUniqueInput
  }


  /**
   * B updateMany
   */
  export type BUpdateManyArgs = {
    data: XOR<BUpdateManyMutationInput, BUncheckedUpdateManyInput>
    where?: BWhereInput
  }


  /**
   * B upsert
   */
  export type BUpsertArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * The filter to search for the B to update in case it exists.
    **/
    where: BWhereUniqueInput
    /**
     * In case the B found by the \`where\` argument doesn't exist, create a new B with this data.
    **/
    create: XOR<BCreateInput, BUncheckedCreateInput>
    /**
     * In case the B was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<BUpdateInput, BUncheckedUpdateInput>
  }


  /**
   * B delete
   */
  export type BDeleteArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
    /**
     * Filter which B to delete.
    **/
    where: BWhereUniqueInput
  }


  /**
   * B deleteMany
   */
  export type BDeleteManyArgs = {
    where?: BWhereInput
  }


  /**
   * B without action
   */
  export type BArgs = {
    /**
     * Select specific fields to fetch from the B
    **/
    select?: XOR<BSelect, null>
  }



  /**
   * Model C
   */


  export type AggregateC = {
    count: number
  }



  export type AggregateCArgs = {
    where?: CWhereInput
    orderBy?: XOR<Enumerable<COrderByInput>, COrderByInput>
    cursor?: CWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CDistinctFieldEnum>
    count?: true
  }

  export type GetCAggregateType<T extends AggregateCArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type CSelect = {
    id?: boolean
    char?: boolean
    vChar?: boolean
    text?: boolean
    bit?: boolean
    vBit?: boolean
    uuid?: boolean
  }

  export type CGetPayload<
    S extends boolean | null | undefined | CArgs,
    U = keyof S
      > = S extends true
        ? C
    : S extends undefined
    ? never
    : S extends CArgs | FindManyCArgs
    ?'include' extends U
    ? C 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof C ?C [P]
  : 
     never
  } 
    : C
  : C


  export interface CDelegate {
    /**
     * Find zero or one C that matches the filter.
     * @param {FindUniqueCArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCArgs>(
      args: Subset<T, FindUniqueCArgs>
    ): CheckSelect<T, Prisma__CClient<C | null>, Prisma__CClient<CGetPayload<T> | null>>
    /**
     * Find the first C that matches the filter.
     * @param {FindFirstCArgs} args - Arguments to find a C
     * @example
     * // Get one C
     * const c = await prisma.c.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCArgs>(
      args?: Subset<T, FindFirstCArgs>
    ): CheckSelect<T, Prisma__CClient<C | null>, Prisma__CClient<CGetPayload<T> | null>>
    /**
     * Find zero or more Cs that matches the filter.
     * @param {FindManyCArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cs
     * const cs = await prisma.c.findMany()
     * 
     * // Get first 10 Cs
     * const cs = await prisma.c.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const cWithIdOnly = await prisma.c.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCArgs>(
      args?: Subset<T, FindManyCArgs>
    ): CheckSelect<T, Promise<Array<C>>, Promise<Array<CGetPayload<T>>>>
    /**
     * Create a C.
     * @param {CCreateArgs} args - Arguments to create a C.
     * @example
     * // Create one C
     * const C = await prisma.c.create({
     *   data: {
     *     // ... data to create a C
     *   }
     * })
     * 
    **/
    create<T extends CCreateArgs>(
      args: Subset<T, CCreateArgs>
    ): CheckSelect<T, Prisma__CClient<C>, Prisma__CClient<CGetPayload<T>>>
    /**
     * Delete a C.
     * @param {CDeleteArgs} args - Arguments to delete one C.
     * @example
     * // Delete one C
     * const C = await prisma.c.delete({
     *   where: {
     *     // ... filter to delete one C
     *   }
     * })
     * 
    **/
    delete<T extends CDeleteArgs>(
      args: Subset<T, CDeleteArgs>
    ): CheckSelect<T, Prisma__CClient<C>, Prisma__CClient<CGetPayload<T>>>
    /**
     * Update one C.
     * @param {CUpdateArgs} args - Arguments to update one C.
     * @example
     * // Update one C
     * const c = await prisma.c.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CUpdateArgs>(
      args: Subset<T, CUpdateArgs>
    ): CheckSelect<T, Prisma__CClient<C>, Prisma__CClient<CGetPayload<T>>>
    /**
     * Delete zero or more Cs.
     * @param {CDeleteManyArgs} args - Arguments to filter Cs to delete.
     * @example
     * // Delete a few Cs
     * const { count } = await prisma.c.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CDeleteManyArgs>(
      args: Subset<T, CDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Cs.
     * @param {CUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cs
     * const c = await prisma.c.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CUpdateManyArgs>(
      args: Subset<T, CUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one C.
     * @param {CUpsertArgs} args - Arguments to update or create a C.
     * @example
     * // Update or create a C
     * const c = await prisma.c.upsert({
     *   create: {
     *     // ... data to create a C
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the C we want to update
     *   }
     * })
    **/
    upsert<T extends CUpsertArgs>(
      args: Subset<T, CUpsertArgs>
    ): CheckSelect<T, Prisma__CClient<C>, Prisma__CClient<CGetPayload<T>>>
    /**
     * Find zero or one C that matches the filter.
     * @param {FindUniqueCArgs} args - Arguments to find a C
     * @deprecated This will be deprecated please use prisma.c.findUnique
     * @example
     * // Get one C
     * const c = await prisma.c.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCArgs>(
      args: Subset<T, FindUniqueCArgs>
    ): CheckSelect<T, Prisma__CClient<C | null>, Prisma__CClient<CGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyCArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateCArgs>(args: Subset<T, AggregateCArgs>): Promise<GetCAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for C.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * C findUnique
   */
  export type FindUniqueCArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * Filter, which C to fetch.
    **/
    where: CWhereUniqueInput
  }


  /**
   * C findFirst
   */
  export type FindFirstCArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * Filter, which C to fetch.
    **/
    where?: CWhereInput
    orderBy?: XOR<Enumerable<COrderByInput>, COrderByInput>
    cursor?: CWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CDistinctFieldEnum>
  }


  /**
   * C findMany
   */
  export type FindManyCArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * Filter, which CS to fetch.
    **/
    where?: CWhereInput
    /**
     * Determine the order of the CS to fetch.
    **/
    orderBy?: XOR<Enumerable<COrderByInput>, COrderByInput>
    /**
     * Sets the position for listing CS.
    **/
    cursor?: CWhereUniqueInput
    /**
     * The number of CS to fetch. If negative number, it will take CS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` CS.
    **/
    skip?: number
    distinct?: Enumerable<CDistinctFieldEnum>
  }


  /**
   * C create
   */
  export type CCreateArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * The data needed to create a C.
    **/
    data: XOR<CCreateInput, CUncheckedCreateInput>
  }


  /**
   * C update
   */
  export type CUpdateArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * The data needed to update a C.
    **/
    data: XOR<CUpdateInput, CUncheckedUpdateInput>
    /**
     * Choose, which C to update.
    **/
    where: CWhereUniqueInput
  }


  /**
   * C updateMany
   */
  export type CUpdateManyArgs = {
    data: XOR<CUpdateManyMutationInput, CUncheckedUpdateManyInput>
    where?: CWhereInput
  }


  /**
   * C upsert
   */
  export type CUpsertArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * The filter to search for the C to update in case it exists.
    **/
    where: CWhereUniqueInput
    /**
     * In case the C found by the \`where\` argument doesn't exist, create a new C with this data.
    **/
    create: XOR<CCreateInput, CUncheckedCreateInput>
    /**
     * In case the C was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<CUpdateInput, CUncheckedUpdateInput>
  }


  /**
   * C delete
   */
  export type CDeleteArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
    /**
     * Filter which C to delete.
    **/
    where: CWhereUniqueInput
  }


  /**
   * C deleteMany
   */
  export type CDeleteManyArgs = {
    where?: CWhereInput
  }


  /**
   * C without action
   */
  export type CArgs = {
    /**
     * Select specific fields to fetch from the C
    **/
    select?: XOR<CSelect, null>
  }



  /**
   * Model D
   */


  export type AggregateD = {
    count: number
  }



  export type AggregateDArgs = {
    where?: DWhereInput
    orderBy?: XOR<Enumerable<DOrderByInput>, DOrderByInput>
    cursor?: DWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DDistinctFieldEnum>
    count?: true
  }

  export type GetDAggregateType<T extends AggregateDArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type DSelect = {
    id?: boolean
    bool?: boolean
    byteA?: boolean
    xml?: boolean
    json?: boolean
    jsonb?: boolean
  }

  export type DGetPayload<
    S extends boolean | null | undefined | DArgs,
    U = keyof S
      > = S extends true
        ? D
    : S extends undefined
    ? never
    : S extends DArgs | FindManyDArgs
    ?'include' extends U
    ? D 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof D ?D [P]
  : 
     never
  } 
    : D
  : D


  export interface DDelegate {
    /**
     * Find zero or one D that matches the filter.
     * @param {FindUniqueDArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueDArgs>(
      args: Subset<T, FindUniqueDArgs>
    ): CheckSelect<T, Prisma__DClient<D | null>, Prisma__DClient<DGetPayload<T> | null>>
    /**
     * Find the first D that matches the filter.
     * @param {FindFirstDArgs} args - Arguments to find a D
     * @example
     * // Get one D
     * const d = await prisma.d.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstDArgs>(
      args?: Subset<T, FindFirstDArgs>
    ): CheckSelect<T, Prisma__DClient<D | null>, Prisma__DClient<DGetPayload<T> | null>>
    /**
     * Find zero or more Ds that matches the filter.
     * @param {FindManyDArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ds
     * const ds = await prisma.d.findMany()
     * 
     * // Get first 10 Ds
     * const ds = await prisma.d.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const dWithIdOnly = await prisma.d.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyDArgs>(
      args?: Subset<T, FindManyDArgs>
    ): CheckSelect<T, Promise<Array<D>>, Promise<Array<DGetPayload<T>>>>
    /**
     * Create a D.
     * @param {DCreateArgs} args - Arguments to create a D.
     * @example
     * // Create one D
     * const D = await prisma.d.create({
     *   data: {
     *     // ... data to create a D
     *   }
     * })
     * 
    **/
    create<T extends DCreateArgs>(
      args: Subset<T, DCreateArgs>
    ): CheckSelect<T, Prisma__DClient<D>, Prisma__DClient<DGetPayload<T>>>
    /**
     * Delete a D.
     * @param {DDeleteArgs} args - Arguments to delete one D.
     * @example
     * // Delete one D
     * const D = await prisma.d.delete({
     *   where: {
     *     // ... filter to delete one D
     *   }
     * })
     * 
    **/
    delete<T extends DDeleteArgs>(
      args: Subset<T, DDeleteArgs>
    ): CheckSelect<T, Prisma__DClient<D>, Prisma__DClient<DGetPayload<T>>>
    /**
     * Update one D.
     * @param {DUpdateArgs} args - Arguments to update one D.
     * @example
     * // Update one D
     * const d = await prisma.d.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DUpdateArgs>(
      args: Subset<T, DUpdateArgs>
    ): CheckSelect<T, Prisma__DClient<D>, Prisma__DClient<DGetPayload<T>>>
    /**
     * Delete zero or more Ds.
     * @param {DDeleteManyArgs} args - Arguments to filter Ds to delete.
     * @example
     * // Delete a few Ds
     * const { count } = await prisma.d.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DDeleteManyArgs>(
      args: Subset<T, DDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Ds.
     * @param {DUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ds
     * const d = await prisma.d.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DUpdateManyArgs>(
      args: Subset<T, DUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one D.
     * @param {DUpsertArgs} args - Arguments to update or create a D.
     * @example
     * // Update or create a D
     * const d = await prisma.d.upsert({
     *   create: {
     *     // ... data to create a D
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the D we want to update
     *   }
     * })
    **/
    upsert<T extends DUpsertArgs>(
      args: Subset<T, DUpsertArgs>
    ): CheckSelect<T, Prisma__DClient<D>, Prisma__DClient<DGetPayload<T>>>
    /**
     * Find zero or one D that matches the filter.
     * @param {FindUniqueDArgs} args - Arguments to find a D
     * @deprecated This will be deprecated please use prisma.d.findUnique
     * @example
     * // Get one D
     * const d = await prisma.d.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueDArgs>(
      args: Subset<T, FindUniqueDArgs>
    ): CheckSelect<T, Prisma__DClient<D | null>, Prisma__DClient<DGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyDArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateDArgs>(args: Subset<T, AggregateDArgs>): Promise<GetDAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for D.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * D findUnique
   */
  export type FindUniqueDArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * Filter, which D to fetch.
    **/
    where: DWhereUniqueInput
  }


  /**
   * D findFirst
   */
  export type FindFirstDArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * Filter, which D to fetch.
    **/
    where?: DWhereInput
    orderBy?: XOR<Enumerable<DOrderByInput>, DOrderByInput>
    cursor?: DWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DDistinctFieldEnum>
  }


  /**
   * D findMany
   */
  export type FindManyDArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * Filter, which DS to fetch.
    **/
    where?: DWhereInput
    /**
     * Determine the order of the DS to fetch.
    **/
    orderBy?: XOR<Enumerable<DOrderByInput>, DOrderByInput>
    /**
     * Sets the position for listing DS.
    **/
    cursor?: DWhereUniqueInput
    /**
     * The number of DS to fetch. If negative number, it will take DS before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` DS.
    **/
    skip?: number
    distinct?: Enumerable<DDistinctFieldEnum>
  }


  /**
   * D create
   */
  export type DCreateArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * The data needed to create a D.
    **/
    data: XOR<DCreateInput, DUncheckedCreateInput>
  }


  /**
   * D update
   */
  export type DUpdateArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * The data needed to update a D.
    **/
    data: XOR<DUpdateInput, DUncheckedUpdateInput>
    /**
     * Choose, which D to update.
    **/
    where: DWhereUniqueInput
  }


  /**
   * D updateMany
   */
  export type DUpdateManyArgs = {
    data: XOR<DUpdateManyMutationInput, DUncheckedUpdateManyInput>
    where?: DWhereInput
  }


  /**
   * D upsert
   */
  export type DUpsertArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * The filter to search for the D to update in case it exists.
    **/
    where: DWhereUniqueInput
    /**
     * In case the D found by the \`where\` argument doesn't exist, create a new D with this data.
    **/
    create: XOR<DCreateInput, DUncheckedCreateInput>
    /**
     * In case the D was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<DUpdateInput, DUncheckedUpdateInput>
  }


  /**
   * D delete
   */
  export type DDeleteArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
    /**
     * Filter which D to delete.
    **/
    where: DWhereUniqueInput
  }


  /**
   * D deleteMany
   */
  export type DDeleteManyArgs = {
    where?: DWhereInput
  }


  /**
   * D without action
   */
  export type DArgs = {
    /**
     * Select specific fields to fetch from the D
    **/
    select?: XOR<DSelect, null>
  }



  /**
   * Model E
   */


  export type AggregateE = {
    count: number
  }



  export type AggregateEArgs = {
    where?: EWhereInput
    orderBy?: XOR<Enumerable<EOrderByInput>, EOrderByInput>
    cursor?: EWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EDistinctFieldEnum>
    count?: true
  }

  export type GetEAggregateType<T extends AggregateEArgs> = {
    [P in keyof T]: P extends 'count' ? number : never
  }


    
    

  export type ESelect = {
    id?: boolean
    date?: boolean
    time?: boolean
    ts?: boolean
  }

  export type EGetPayload<
    S extends boolean | null | undefined | EArgs,
    U = keyof S
      > = S extends true
        ? E
    : S extends undefined
    ? never
    : S extends EArgs | FindManyEArgs
    ?'include' extends U
    ? E 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof E ?E [P]
  : 
     never
  } 
    : E
  : E


  export interface EDelegate {
    /**
     * Find zero or one E that matches the filter.
     * @param {FindUniqueEArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueEArgs>(
      args: Subset<T, FindUniqueEArgs>
    ): CheckSelect<T, Prisma__EClient<E | null>, Prisma__EClient<EGetPayload<T> | null>>
    /**
     * Find the first E that matches the filter.
     * @param {FindFirstEArgs} args - Arguments to find a E
     * @example
     * // Get one E
     * const e = await prisma.e.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstEArgs>(
      args?: Subset<T, FindFirstEArgs>
    ): CheckSelect<T, Prisma__EClient<E | null>, Prisma__EClient<EGetPayload<T> | null>>
    /**
     * Find zero or more Es that matches the filter.
     * @param {FindManyEArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Es
     * const es = await prisma.e.findMany()
     * 
     * // Get first 10 Es
     * const es = await prisma.e.findMany({ take: 10 })
     * 
     * // Only select the \`id\`
     * const eWithIdOnly = await prisma.e.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyEArgs>(
      args?: Subset<T, FindManyEArgs>
    ): CheckSelect<T, Promise<Array<E>>, Promise<Array<EGetPayload<T>>>>
    /**
     * Create a E.
     * @param {ECreateArgs} args - Arguments to create a E.
     * @example
     * // Create one E
     * const E = await prisma.e.create({
     *   data: {
     *     // ... data to create a E
     *   }
     * })
     * 
    **/
    create<T extends ECreateArgs>(
      args: Subset<T, ECreateArgs>
    ): CheckSelect<T, Prisma__EClient<E>, Prisma__EClient<EGetPayload<T>>>
    /**
     * Delete a E.
     * @param {EDeleteArgs} args - Arguments to delete one E.
     * @example
     * // Delete one E
     * const E = await prisma.e.delete({
     *   where: {
     *     // ... filter to delete one E
     *   }
     * })
     * 
    **/
    delete<T extends EDeleteArgs>(
      args: Subset<T, EDeleteArgs>
    ): CheckSelect<T, Prisma__EClient<E>, Prisma__EClient<EGetPayload<T>>>
    /**
     * Update one E.
     * @param {EUpdateArgs} args - Arguments to update one E.
     * @example
     * // Update one E
     * const e = await prisma.e.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EUpdateArgs>(
      args: Subset<T, EUpdateArgs>
    ): CheckSelect<T, Prisma__EClient<E>, Prisma__EClient<EGetPayload<T>>>
    /**
     * Delete zero or more Es.
     * @param {EDeleteManyArgs} args - Arguments to filter Es to delete.
     * @example
     * // Delete a few Es
     * const { count } = await prisma.e.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EDeleteManyArgs>(
      args: Subset<T, EDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Es.
     * @param {EUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Es
     * const e = await prisma.e.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EUpdateManyArgs>(
      args: Subset<T, EUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one E.
     * @param {EUpsertArgs} args - Arguments to update or create a E.
     * @example
     * // Update or create a E
     * const e = await prisma.e.upsert({
     *   create: {
     *     // ... data to create a E
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the E we want to update
     *   }
     * })
    **/
    upsert<T extends EUpsertArgs>(
      args: Subset<T, EUpsertArgs>
    ): CheckSelect<T, Prisma__EClient<E>, Prisma__EClient<EGetPayload<T>>>
    /**
     * Find zero or one E that matches the filter.
     * @param {FindUniqueEArgs} args - Arguments to find a E
     * @deprecated This will be deprecated please use prisma.e.findUnique
     * @example
     * // Get one E
     * const e = await prisma.e.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueEArgs>(
      args: Subset<T, FindUniqueEArgs>
    ): CheckSelect<T, Prisma__EClient<E | null>, Prisma__EClient<EGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyEArgs, 'select' | 'include'>): Promise<number>

    /**
     * Aggregate
     */
    aggregate<T extends AggregateEArgs>(args: Subset<T, AggregateEArgs>): Promise<GetEAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for E.
   * Why is this prefixed with \`Prisma__\`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * E findUnique
   */
  export type FindUniqueEArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * Filter, which E to fetch.
    **/
    where: EWhereUniqueInput
  }


  /**
   * E findFirst
   */
  export type FindFirstEArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * Filter, which E to fetch.
    **/
    where?: EWhereInput
    orderBy?: XOR<Enumerable<EOrderByInput>, EOrderByInput>
    cursor?: EWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EDistinctFieldEnum>
  }


  /**
   * E findMany
   */
  export type FindManyEArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * Filter, which ES to fetch.
    **/
    where?: EWhereInput
    /**
     * Determine the order of the ES to fetch.
    **/
    orderBy?: XOR<Enumerable<EOrderByInput>, EOrderByInput>
    /**
     * Sets the position for listing ES.
    **/
    cursor?: EWhereUniqueInput
    /**
     * The number of ES to fetch. If negative number, it will take ES before the \`cursor\`.
    **/
    take?: number
    /**
     * Skip the first \`n\` ES.
    **/
    skip?: number
    distinct?: Enumerable<EDistinctFieldEnum>
  }


  /**
   * E create
   */
  export type ECreateArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * The data needed to create a E.
    **/
    data: XOR<ECreateInput, EUncheckedCreateInput>
  }


  /**
   * E update
   */
  export type EUpdateArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * The data needed to update a E.
    **/
    data: XOR<EUpdateInput, EUncheckedUpdateInput>
    /**
     * Choose, which E to update.
    **/
    where: EWhereUniqueInput
  }


  /**
   * E updateMany
   */
  export type EUpdateManyArgs = {
    data: XOR<EUpdateManyMutationInput, EUncheckedUpdateManyInput>
    where?: EWhereInput
  }


  /**
   * E upsert
   */
  export type EUpsertArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * The filter to search for the E to update in case it exists.
    **/
    where: EWhereUniqueInput
    /**
     * In case the E found by the \`where\` argument doesn't exist, create a new E with this data.
    **/
    create: XOR<ECreateInput, EUncheckedCreateInput>
    /**
     * In case the E was found with the provided \`where\` argument, update it with this data.
    **/
    update: XOR<EUpdateInput, EUncheckedUpdateInput>
  }


  /**
   * E delete
   */
  export type EDeleteArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
    /**
     * Filter which E to delete.
    **/
    where: EWhereUniqueInput
  }


  /**
   * E deleteMany
   */
  export type EDeleteManyArgs = {
    where?: EWhereInput
  }


  /**
   * E without action
   */
  export type EArgs = {
    /**
     * Select specific fields to fetch from the E
    **/
    select?: XOR<ESelect, null>
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PostDistinctFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    content: 'content',
    published: 'published',
    authorId: 'authorId'
  };

  export type PostDistinctFieldEnum = (typeof PostDistinctFieldEnum)[keyof typeof PostDistinctFieldEnum]


  export const UserDistinctFieldEnum: {
    id: 'id',
    email: 'email',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


  export const MDistinctFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type MDistinctFieldEnum = (typeof MDistinctFieldEnum)[keyof typeof MDistinctFieldEnum]


  export const NDistinctFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type NDistinctFieldEnum = (typeof NDistinctFieldEnum)[keyof typeof NDistinctFieldEnum]


  export const OneOptionalDistinctFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OneOptionalDistinctFieldEnum = (typeof OneOptionalDistinctFieldEnum)[keyof typeof OneOptionalDistinctFieldEnum]


  export const ManyRequiredDistinctFieldEnum: {
    id: 'id',
    oneOptionalId: 'oneOptionalId',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type ManyRequiredDistinctFieldEnum = (typeof ManyRequiredDistinctFieldEnum)[keyof typeof ManyRequiredDistinctFieldEnum]


  export const OptionalSide1DistinctFieldEnum: {
    id: 'id',
    optionalSide2Id: 'optionalSide2Id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OptionalSide1DistinctFieldEnum = (typeof OptionalSide1DistinctFieldEnum)[keyof typeof OptionalSide1DistinctFieldEnum]


  export const OptionalSide2DistinctFieldEnum: {
    id: 'id',
    int: 'int',
    optionalInt: 'optionalInt',
    float: 'float',
    optionalFloat: 'optionalFloat',
    string: 'string',
    optionalString: 'optionalString',
    json: 'json',
    optionalJson: 'optionalJson',
    enum: 'enum',
    optionalEnum: 'optionalEnum',
    boolean: 'boolean',
    optionalBoolean: 'optionalBoolean'
  };

  export type OptionalSide2DistinctFieldEnum = (typeof OptionalSide2DistinctFieldEnum)[keyof typeof OptionalSide2DistinctFieldEnum]


  export const ADistinctFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    int: 'int',
    sInt: 'sInt',
    bInt: 'bInt',
    serial: 'serial',
    sSerial: 'sSerial',
    bSerial: 'bSerial',
    inc_int: 'inc_int',
    inc_sInt: 'inc_sInt',
    inc_bInt: 'inc_bInt'
  };

  export type ADistinctFieldEnum = (typeof ADistinctFieldEnum)[keyof typeof ADistinctFieldEnum]


  export const BDistinctFieldEnum: {
    id: 'id',
    float: 'float',
    dFloat: 'dFloat',
    decFloat: 'decFloat',
    numFloat: 'numFloat'
  };

  export type BDistinctFieldEnum = (typeof BDistinctFieldEnum)[keyof typeof BDistinctFieldEnum]


  export const CDistinctFieldEnum: {
    id: 'id',
    char: 'char',
    vChar: 'vChar',
    text: 'text',
    bit: 'bit',
    vBit: 'vBit',
    uuid: 'uuid'
  };

  export type CDistinctFieldEnum = (typeof CDistinctFieldEnum)[keyof typeof CDistinctFieldEnum]


  export const DDistinctFieldEnum: {
    id: 'id',
    bool: 'bool',
    byteA: 'byteA',
    xml: 'xml',
    json: 'json',
    jsonb: 'jsonb'
  };

  export type DDistinctFieldEnum = (typeof DDistinctFieldEnum)[keyof typeof DDistinctFieldEnum]


  export const EDistinctFieldEnum: {
    id: 'id',
    date: 'date',
    time: 'time',
    ts: 'ts'
  };

  export type EDistinctFieldEnum = (typeof EDistinctFieldEnum)[keyof typeof EDistinctFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type PostWhereInput = {
    AND?: XOR<PostWhereInput, Enumerable<PostWhereInput>>
    OR?: XOR<PostWhereInput, Enumerable<PostWhereInput>>
    NOT?: XOR<PostWhereInput, Enumerable<PostWhereInput>>
    id?: XOR<IntFilter, number>
    createdAt?: XOR<DateTimeFilter, Date | string>
    title?: XOR<StringFilter, string>
    content?: StringNullableFilter | string | null
    published?: XOR<BoolFilter, boolean>
    author?: XOR<UserRelationFilter, UserWhereInput>
    authorId?: XOR<IntFilter, number>
  }

  export type PostOrderByInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    content?: SortOrder
    published?: SortOrder
    authorId?: SortOrder
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    OR?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    NOT?: XOR<UserWhereInput, Enumerable<UserWhereInput>>
    id?: XOR<IntFilter, number>
    email?: XOR<StringFilter, string>
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
    posts?: PostListRelationFilter
  }

  export type UserOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type MWhereInput = {
    AND?: XOR<MWhereInput, Enumerable<MWhereInput>>
    OR?: XOR<MWhereInput, Enumerable<MWhereInput>>
    NOT?: XOR<MWhereInput, Enumerable<MWhereInput>>
    id?: XOR<IntFilter, number>
    n?: NListRelationFilter
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type MOrderByInput = {
    id?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type MWhereUniqueInput = {
    id?: number
  }

  export type NWhereInput = {
    AND?: XOR<NWhereInput, Enumerable<NWhereInput>>
    OR?: XOR<NWhereInput, Enumerable<NWhereInput>>
    NOT?: XOR<NWhereInput, Enumerable<NWhereInput>>
    id?: XOR<IntFilter, number>
    m?: MListRelationFilter
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type NOrderByInput = {
    id?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type NWhereUniqueInput = {
    id?: number
  }

  export type OneOptionalWhereInput = {
    AND?: XOR<OneOptionalWhereInput, Enumerable<OneOptionalWhereInput>>
    OR?: XOR<OneOptionalWhereInput, Enumerable<OneOptionalWhereInput>>
    NOT?: XOR<OneOptionalWhereInput, Enumerable<OneOptionalWhereInput>>
    id?: XOR<IntFilter, number>
    many?: ManyRequiredListRelationFilter
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type OneOptionalOrderByInput = {
    id?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type OneOptionalWhereUniqueInput = {
    id?: number
  }

  export type ManyRequiredWhereInput = {
    AND?: XOR<ManyRequiredWhereInput, Enumerable<ManyRequiredWhereInput>>
    OR?: XOR<ManyRequiredWhereInput, Enumerable<ManyRequiredWhereInput>>
    NOT?: XOR<ManyRequiredWhereInput, Enumerable<ManyRequiredWhereInput>>
    id?: XOR<IntFilter, number>
    one?: OneOptionalRelationFilter | OneOptionalWhereInput | null
    oneOptionalId?: IntNullableFilter | number | null
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type ManyRequiredOrderByInput = {
    id?: SortOrder
    oneOptionalId?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type ManyRequiredWhereUniqueInput = {
    id?: number
  }

  export type OptionalSide1WhereInput = {
    AND?: XOR<OptionalSide1WhereInput, Enumerable<OptionalSide1WhereInput>>
    OR?: XOR<OptionalSide1WhereInput, Enumerable<OptionalSide1WhereInput>>
    NOT?: XOR<OptionalSide1WhereInput, Enumerable<OptionalSide1WhereInput>>
    id?: XOR<IntFilter, number>
    opti?: OptionalSide2RelationFilter | OptionalSide2WhereInput | null
    optionalSide2Id?: IntNullableFilter | number | null
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type OptionalSide1OrderByInput = {
    id?: SortOrder
    optionalSide2Id?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type OptionalSide1WhereUniqueInput = {
    id?: number
  }

  export type OptionalSide2WhereInput = {
    AND?: XOR<OptionalSide2WhereInput, Enumerable<OptionalSide2WhereInput>>
    OR?: XOR<OptionalSide2WhereInput, Enumerable<OptionalSide2WhereInput>>
    NOT?: XOR<OptionalSide2WhereInput, Enumerable<OptionalSide2WhereInput>>
    id?: XOR<IntFilter, number>
    opti?: OptionalSide1RelationFilter | OptionalSide1WhereInput | null
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type OptionalSide2OrderByInput = {
    id?: SortOrder
    int?: SortOrder
    optionalInt?: SortOrder
    float?: SortOrder
    optionalFloat?: SortOrder
    string?: SortOrder
    optionalString?: SortOrder
    json?: SortOrder
    optionalJson?: SortOrder
    enum?: SortOrder
    optionalEnum?: SortOrder
    boolean?: SortOrder
    optionalBoolean?: SortOrder
  }

  export type OptionalSide2WhereUniqueInput = {
    id?: number
  }

  export type AWhereInput = {
    AND?: XOR<AWhereInput, Enumerable<AWhereInput>>
    OR?: XOR<AWhereInput, Enumerable<AWhereInput>>
    NOT?: XOR<AWhereInput, Enumerable<AWhereInput>>
    id?: XOR<StringFilter, string>
    email?: XOR<StringFilter, string>
    name?: StringNullableFilter | string | null
    int?: XOR<IntFilter, number>
    sInt?: XOR<IntFilter, number>
    bInt?: XOR<BigIntFilter, BigInt>
    serial?: XOR<IntFilter, number>
    sSerial?: XOR<IntFilter, number>
    bSerial?: XOR<IntFilter, number>
    inc_int?: XOR<IntFilter, number>
    inc_sInt?: XOR<IntFilter, number>
    inc_bInt?: XOR<BigIntFilter, BigInt>
  }

  export type AOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    int?: SortOrder
    sInt?: SortOrder
    bInt?: SortOrder
    serial?: SortOrder
    sSerial?: SortOrder
    bSerial?: SortOrder
    inc_int?: SortOrder
    inc_sInt?: SortOrder
    inc_bInt?: SortOrder
  }

  export type AWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type BWhereInput = {
    AND?: XOR<BWhereInput, Enumerable<BWhereInput>>
    OR?: XOR<BWhereInput, Enumerable<BWhereInput>>
    NOT?: XOR<BWhereInput, Enumerable<BWhereInput>>
    id?: XOR<StringFilter, string>
    float?: XOR<FloatFilter, number>
    dFloat?: XOR<FloatFilter, number>
    decFloat?: XOR<DecimalFilter, Decimal>
    numFloat?: XOR<DecimalFilter, Decimal>
  }

  export type BOrderByInput = {
    id?: SortOrder
    float?: SortOrder
    dFloat?: SortOrder
    decFloat?: SortOrder
    numFloat?: SortOrder
  }

  export type BWhereUniqueInput = {
    id?: string
  }

  export type CWhereInput = {
    AND?: XOR<CWhereInput, Enumerable<CWhereInput>>
    OR?: XOR<CWhereInput, Enumerable<CWhereInput>>
    NOT?: XOR<CWhereInput, Enumerable<CWhereInput>>
    id?: XOR<StringFilter, string>
    char?: XOR<StringFilter, string>
    vChar?: XOR<StringFilter, string>
    text?: XOR<StringFilter, string>
    bit?: XOR<StringFilter, string>
    vBit?: XOR<StringFilter, string>
    uuid?: XOR<StringFilter, string>
  }

  export type COrderByInput = {
    id?: SortOrder
    char?: SortOrder
    vChar?: SortOrder
    text?: SortOrder
    bit?: SortOrder
    vBit?: SortOrder
    uuid?: SortOrder
  }

  export type CWhereUniqueInput = {
    id?: string
  }

  export type DWhereInput = {
    AND?: XOR<DWhereInput, Enumerable<DWhereInput>>
    OR?: XOR<DWhereInput, Enumerable<DWhereInput>>
    NOT?: XOR<DWhereInput, Enumerable<DWhereInput>>
    id?: XOR<StringFilter, string>
    bool?: XOR<BoolFilter, boolean>
    byteA?: XOR<BytesFilter, Buffer>
    xml?: XOR<StringFilter, string>
    json?: JsonFilter
    jsonb?: JsonFilter
  }

  export type DOrderByInput = {
    id?: SortOrder
    bool?: SortOrder
    byteA?: SortOrder
    xml?: SortOrder
    json?: SortOrder
    jsonb?: SortOrder
  }

  export type DWhereUniqueInput = {
    id?: string
  }

  export type EWhereInput = {
    AND?: XOR<EWhereInput, Enumerable<EWhereInput>>
    OR?: XOR<EWhereInput, Enumerable<EWhereInput>>
    NOT?: XOR<EWhereInput, Enumerable<EWhereInput>>
    id?: XOR<StringFilter, string>
    date?: XOR<DateTimeFilter, Date | string>
    time?: XOR<DateTimeFilter, Date | string>
    ts?: XOR<DateTimeFilter, Date | string>
  }

  export type EOrderByInput = {
    id?: SortOrder
    date?: SortOrder
    time?: SortOrder
    ts?: SortOrder
  }

  export type EWhereUniqueInput = {
    id?: string
  }

  export type PostCreateInput = {
    createdAt?: Date | string
    title: string
    content?: XOR<string, null>
    published?: boolean
    author: UserCreateOneWithoutPostsInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: XOR<string, null>
    published?: boolean
    authorId: number
  }

  export type PostUpdateInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
    author?: UserUpdateOneRequiredWithoutPostsInput
  }

  export type PostUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
    authorId?: XOR<number, IntFieldUpdateOperationsInput>
  }

  export type PostUpdateManyMutationInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
  }

  export type PostUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
    authorId?: XOR<number, IntFieldUpdateOperationsInput>
  }

  export type UserCreateInput = {
    email: string
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    posts?: PostCreateManyWithoutAuthorInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    posts?: PostUncheckedCreateManyWithoutAuthorInput
  }

  export type UserUpdateInput = {
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    posts?: PostUpdateManyWithoutAuthorInput
  }

  export type UserUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    posts?: PostUncheckedUpdateManyWithoutAuthorInput
  }

  export type UserUpdateManyMutationInput = {
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MCreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    n?: NCreateManyWithoutMInput
  }

  export type MUncheckedCreateInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type MUpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    n?: NUpdateManyWithoutMInput
  }

  export type MUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MUpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type NCreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    m?: MCreateManyWithoutNInput
  }

  export type NUncheckedCreateInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type NUpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    m?: MUpdateManyWithoutNInput
  }

  export type NUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type NUpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type NUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OneOptionalCreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    many?: ManyRequiredCreateManyWithoutOneInput
  }

  export type OneOptionalUncheckedCreateInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    many?: ManyRequiredUncheckedCreateManyWithoutOneInput
  }

  export type OneOptionalUpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    many?: ManyRequiredUpdateManyWithoutOneInput
  }

  export type OneOptionalUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    many?: ManyRequiredUncheckedUpdateManyWithoutOneInput
  }

  export type OneOptionalUpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OneOptionalUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredCreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    one?: OneOptionalCreateOneWithoutManyInput
  }

  export type ManyRequiredUncheckedCreateInput = {
    id?: number
    oneOptionalId?: XOR<number, null>
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type ManyRequiredUpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    one?: OneOptionalUpdateOneWithoutManyInput
  }

  export type ManyRequiredUncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    oneOptionalId?: number | NullableIntFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredUpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredUncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    oneOptionalId?: number | NullableIntFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide1CreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    opti?: OptionalSide2CreateOneWithoutOptiInput
  }

  export type OptionalSide1UncheckedCreateInput = {
    id?: number
    optionalSide2Id?: XOR<number, null>
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OptionalSide1UpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    opti?: OptionalSide2UpdateOneWithoutOptiInput
  }

  export type OptionalSide1UncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    optionalSide2Id?: number | NullableIntFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide1UpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide1UncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    optionalSide2Id?: number | NullableIntFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide2CreateInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    opti?: OptionalSide1CreateOneWithoutOptiInput
  }

  export type OptionalSide2UncheckedCreateInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
    opti?: OptionalSide1UncheckedCreateOneWithoutOptiInput
  }

  export type OptionalSide2UpdateInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    opti?: OptionalSide1UpdateOneWithoutOptiInput
  }

  export type OptionalSide2UncheckedUpdateInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
    opti?: OptionalSide1UncheckedUpdateOneWithoutOptiInput
  }

  export type OptionalSide2UpdateManyMutationInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide2UncheckedUpdateManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ACreateInput = {
    id?: string
    email: string
    name?: XOR<string, null>
    int: number
    sInt: number
    bInt: BigInt
    serial?: number
    sSerial?: number
    bSerial?: number
    inc_int?: number
    inc_sInt?: number
    inc_bInt?: BigInt
  }

  export type AUncheckedCreateInput = {
    id?: string
    email: string
    name?: XOR<string, null>
    int: number
    sInt: number
    bInt: BigInt
    serial?: number
    sSerial?: number
    bSerial?: number
    inc_int?: number
    inc_sInt?: number
    inc_bInt?: BigInt
  }

  export type AUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    sInt?: XOR<number, IntFieldUpdateOperationsInput>
    bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
    serial?: XOR<number, IntFieldUpdateOperationsInput>
    sSerial?: XOR<number, IntFieldUpdateOperationsInput>
    bSerial?: XOR<number, IntFieldUpdateOperationsInput>
    inc_int?: XOR<number, IntFieldUpdateOperationsInput>
    inc_sInt?: XOR<number, IntFieldUpdateOperationsInput>
    inc_bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
  }

  export type AUncheckedUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    sInt?: XOR<number, IntFieldUpdateOperationsInput>
    bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
    serial?: XOR<number, IntFieldUpdateOperationsInput>
    sSerial?: XOR<number, IntFieldUpdateOperationsInput>
    bSerial?: XOR<number, IntFieldUpdateOperationsInput>
    inc_int?: XOR<number, IntFieldUpdateOperationsInput>
    inc_sInt?: XOR<number, IntFieldUpdateOperationsInput>
    inc_bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
  }

  export type AUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    sInt?: XOR<number, IntFieldUpdateOperationsInput>
    bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
    serial?: XOR<number, IntFieldUpdateOperationsInput>
    sSerial?: XOR<number, IntFieldUpdateOperationsInput>
    bSerial?: XOR<number, IntFieldUpdateOperationsInput>
    inc_int?: XOR<number, IntFieldUpdateOperationsInput>
    inc_sInt?: XOR<number, IntFieldUpdateOperationsInput>
    inc_bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
  }

  export type AUncheckedUpdateManyInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    name?: string | NullableStringFieldUpdateOperationsInput | null
    int?: XOR<number, IntFieldUpdateOperationsInput>
    sInt?: XOR<number, IntFieldUpdateOperationsInput>
    bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
    serial?: XOR<number, IntFieldUpdateOperationsInput>
    sSerial?: XOR<number, IntFieldUpdateOperationsInput>
    bSerial?: XOR<number, IntFieldUpdateOperationsInput>
    inc_int?: XOR<number, IntFieldUpdateOperationsInput>
    inc_sInt?: XOR<number, IntFieldUpdateOperationsInput>
    inc_bInt?: XOR<BigInt, BigIntFieldUpdateOperationsInput>
  }

  export type BCreateInput = {
    id?: string
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }

  export type BUncheckedCreateInput = {
    id?: string
    float: number
    dFloat: number
    decFloat: Decimal
    numFloat: Decimal
  }

  export type BUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    dFloat?: XOR<number, FloatFieldUpdateOperationsInput>
    decFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
    numFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
  }

  export type BUncheckedUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    dFloat?: XOR<number, FloatFieldUpdateOperationsInput>
    decFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
    numFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
  }

  export type BUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    dFloat?: XOR<number, FloatFieldUpdateOperationsInput>
    decFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
    numFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
  }

  export type BUncheckedUpdateManyInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    dFloat?: XOR<number, FloatFieldUpdateOperationsInput>
    decFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
    numFloat?: XOR<Decimal, DecimalFieldUpdateOperationsInput>
  }

  export type CCreateInput = {
    id?: string
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
  }

  export type CUncheckedCreateInput = {
    id?: string
    char: string
    vChar: string
    text: string
    bit: string
    vBit: string
    uuid: string
  }

  export type CUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    char?: XOR<string, StringFieldUpdateOperationsInput>
    vChar?: XOR<string, StringFieldUpdateOperationsInput>
    text?: XOR<string, StringFieldUpdateOperationsInput>
    bit?: XOR<string, StringFieldUpdateOperationsInput>
    vBit?: XOR<string, StringFieldUpdateOperationsInput>
    uuid?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type CUncheckedUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    char?: XOR<string, StringFieldUpdateOperationsInput>
    vChar?: XOR<string, StringFieldUpdateOperationsInput>
    text?: XOR<string, StringFieldUpdateOperationsInput>
    bit?: XOR<string, StringFieldUpdateOperationsInput>
    vBit?: XOR<string, StringFieldUpdateOperationsInput>
    uuid?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type CUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    char?: XOR<string, StringFieldUpdateOperationsInput>
    vChar?: XOR<string, StringFieldUpdateOperationsInput>
    text?: XOR<string, StringFieldUpdateOperationsInput>
    bit?: XOR<string, StringFieldUpdateOperationsInput>
    vBit?: XOR<string, StringFieldUpdateOperationsInput>
    uuid?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type CUncheckedUpdateManyInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    char?: XOR<string, StringFieldUpdateOperationsInput>
    vChar?: XOR<string, StringFieldUpdateOperationsInput>
    text?: XOR<string, StringFieldUpdateOperationsInput>
    bit?: XOR<string, StringFieldUpdateOperationsInput>
    vBit?: XOR<string, StringFieldUpdateOperationsInput>
    uuid?: XOR<string, StringFieldUpdateOperationsInput>
  }

  export type DCreateInput = {
    id?: string
    bool: boolean
    byteA: Buffer
    xml: string
    json: InputJsonValue
    jsonb: InputJsonValue
  }

  export type DUncheckedCreateInput = {
    id?: string
    bool: boolean
    byteA: Buffer
    xml: string
    json: InputJsonValue
    jsonb: InputJsonValue
  }

  export type DUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bool?: XOR<boolean, BoolFieldUpdateOperationsInput>
    byteA?: XOR<Buffer, BytesFieldUpdateOperationsInput>
    xml?: XOR<string, StringFieldUpdateOperationsInput>
    json?: InputJsonValue
    jsonb?: InputJsonValue
  }

  export type DUncheckedUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bool?: XOR<boolean, BoolFieldUpdateOperationsInput>
    byteA?: XOR<Buffer, BytesFieldUpdateOperationsInput>
    xml?: XOR<string, StringFieldUpdateOperationsInput>
    json?: InputJsonValue
    jsonb?: InputJsonValue
  }

  export type DUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bool?: XOR<boolean, BoolFieldUpdateOperationsInput>
    byteA?: XOR<Buffer, BytesFieldUpdateOperationsInput>
    xml?: XOR<string, StringFieldUpdateOperationsInput>
    json?: InputJsonValue
    jsonb?: InputJsonValue
  }

  export type DUncheckedUpdateManyInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    bool?: XOR<boolean, BoolFieldUpdateOperationsInput>
    byteA?: XOR<Buffer, BytesFieldUpdateOperationsInput>
    xml?: XOR<string, StringFieldUpdateOperationsInput>
    json?: InputJsonValue
    jsonb?: InputJsonValue
  }

  export type ECreateInput = {
    id?: string
    date: Date | string
    time: Date | string
    ts: Date | string
  }

  export type EUncheckedCreateInput = {
    id?: string
    date: Date | string
    time: Date | string
    ts: Date | string
  }

  export type EUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    time?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    ts?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type EUncheckedUpdateInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    time?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    ts?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type EUpdateManyMutationInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    time?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    ts?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type EUncheckedUpdateManyInput = {
    id?: XOR<string, StringFieldUpdateOperationsInput>
    date?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    time?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    ts?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: XOR<string, NestedStringFilter>
  }

  export type StringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: string | NestedStringNullableFilter | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: XOR<boolean, NestedBoolFilter>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type IntNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedIntNullableFilter | null
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedFloatFilter>
  }

  export type FloatNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedFloatNullableFilter | null
  }

  export type JsonFilter = {
    equals?: InputJsonValue
    not?: InputJsonValue
  }

  export type JsonNullableFilter = {
    equals?: XOR<InputJsonValue, null>
    not?: XOR<InputJsonValue, null>
  }

  export type EnumABeautifulEnumFilter = {
    equals?: ABeautifulEnum
    in?: Enumerable<ABeautifulEnum>
    notIn?: Enumerable<ABeautifulEnum>
    not?: XOR<ABeautifulEnum, NestedEnumABeautifulEnumFilter>
  }

  export type EnumABeautifulEnumNullableFilter = {
    equals?: XOR<ABeautifulEnum, null>
    in?: XOR<Enumerable<ABeautifulEnum>, null>
    notIn?: XOR<Enumerable<ABeautifulEnum>, null>
    not?: ABeautifulEnum | NestedEnumABeautifulEnumNullableFilter | null
  }

  export type BoolNullableFilter = {
    equals?: XOR<boolean, null>
    not?: boolean | NestedBoolNullableFilter | null
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type NListRelationFilter = {
    every?: NWhereInput
    some?: NWhereInput
    none?: NWhereInput
  }

  export type MListRelationFilter = {
    every?: MWhereInput
    some?: MWhereInput
    none?: MWhereInput
  }

  export type ManyRequiredListRelationFilter = {
    every?: ManyRequiredWhereInput
    some?: ManyRequiredWhereInput
    none?: ManyRequiredWhereInput
  }

  export type OneOptionalRelationFilter = {
    is?: XOR<OneOptionalWhereInput, null>
    isNot?: XOR<OneOptionalWhereInput, null>
  }

  export type OptionalSide2RelationFilter = {
    is?: XOR<OptionalSide2WhereInput, null>
    isNot?: XOR<OptionalSide2WhereInput, null>
  }

  export type OptionalSide1RelationFilter = {
    is?: XOR<OptionalSide1WhereInput, null>
    isNot?: XOR<OptionalSide1WhereInput, null>
  }

  export type BigIntFilter = {
    equals?: BigInt
    in?: Enumerable<BigInt>
    notIn?: Enumerable<BigInt>
    lt?: BigInt
    lte?: BigInt
    gt?: BigInt
    gte?: BigInt
    not?: XOR<BigInt, NestedBigIntFilter>
  }

  export type DecimalFilter = {
    equals?: Decimal
    in?: Enumerable<Decimal>
    notIn?: Enumerable<Decimal>
    lt?: Decimal
    lte?: Decimal
    gt?: Decimal
    gte?: Decimal
    not?: XOR<Decimal, NestedDecimalFilter>
  }

  export type BytesFilter = {
    equals?: Buffer
    not?: XOR<Buffer, NestedBytesFilter>
  }

  export type UserCreateOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutpostsInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: XOR<string, null>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    upsert?: UserUpsertWithoutPostsInput
    connectOrCreate?: UserCreateOrConnectWithoutpostsInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostCreateManyWithoutAuthorInput = {
    create?: PostCreateWithoutAuthorInput | Enumerable<PostCreateWithoutAuthorInput> | PostUncheckedCreateWithoutAuthorInput | Enumerable<PostUncheckedCreateWithoutAuthorInput>
    connect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    connectOrCreate?: XOR<PostCreateOrConnectWithoutauthorInput, Enumerable<PostCreateOrConnectWithoutauthorInput>>
  }

  export type PostUncheckedCreateManyWithoutAuthorInput = {
    create?: PostCreateWithoutAuthorInput | Enumerable<PostCreateWithoutAuthorInput> | PostUncheckedCreateWithoutAuthorInput | Enumerable<PostUncheckedCreateWithoutAuthorInput>
    connect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    connectOrCreate?: XOR<PostCreateOrConnectWithoutauthorInput, Enumerable<PostCreateOrConnectWithoutauthorInput>>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: XOR<number, null>
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: XOR<number, null>
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumABeautifulEnumFieldUpdateOperationsInput = {
    set?: ABeautifulEnum
  }

  export type NullableEnumABeautifulEnumFieldUpdateOperationsInput = {
    set?: XOR<ABeautifulEnum, null>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: XOR<boolean, null>
  }

  export type PostUpdateManyWithoutAuthorInput = {
    create?: PostCreateWithoutAuthorInput | Enumerable<PostCreateWithoutAuthorInput> | PostUncheckedCreateWithoutAuthorInput | Enumerable<PostUncheckedCreateWithoutAuthorInput>
    connect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    set?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    disconnect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    delete?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    update?: XOR<PostUpdateWithWhereUniqueWithoutAuthorInput, Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>>
    updateMany?: XOR<PostUpdateManyWithWhereWithoutAuthorInput, Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>>
    deleteMany?: XOR<PostScalarWhereInput, Enumerable<PostScalarWhereInput>>
    upsert?: XOR<PostUpsertWithWhereUniqueWithoutAuthorInput, Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>>
    connectOrCreate?: XOR<PostCreateOrConnectWithoutauthorInput, Enumerable<PostCreateOrConnectWithoutauthorInput>>
  }

  export type PostUncheckedUpdateManyWithoutAuthorInput = {
    create?: PostCreateWithoutAuthorInput | Enumerable<PostCreateWithoutAuthorInput> | PostUncheckedCreateWithoutAuthorInput | Enumerable<PostUncheckedCreateWithoutAuthorInput>
    connect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    set?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    disconnect?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    delete?: XOR<PostWhereUniqueInput, Enumerable<PostWhereUniqueInput>>
    update?: XOR<PostUpdateWithWhereUniqueWithoutAuthorInput, Enumerable<PostUpdateWithWhereUniqueWithoutAuthorInput>>
    updateMany?: XOR<PostUpdateManyWithWhereWithoutAuthorInput, Enumerable<PostUpdateManyWithWhereWithoutAuthorInput>>
    deleteMany?: XOR<PostScalarWhereInput, Enumerable<PostScalarWhereInput>>
    upsert?: XOR<PostUpsertWithWhereUniqueWithoutAuthorInput, Enumerable<PostUpsertWithWhereUniqueWithoutAuthorInput>>
    connectOrCreate?: XOR<PostCreateOrConnectWithoutauthorInput, Enumerable<PostCreateOrConnectWithoutauthorInput>>
  }

  export type NCreateManyWithoutMInput = {
    create?: NCreateWithoutMInput | Enumerable<NCreateWithoutMInput> | NUncheckedCreateWithoutMInput | Enumerable<NUncheckedCreateWithoutMInput>
    connect?: XOR<NWhereUniqueInput, Enumerable<NWhereUniqueInput>>
    connectOrCreate?: XOR<NCreateOrConnectWithoutmInput, Enumerable<NCreateOrConnectWithoutmInput>>
  }

  export type NUpdateManyWithoutMInput = {
    create?: NCreateWithoutMInput | Enumerable<NCreateWithoutMInput> | NUncheckedCreateWithoutMInput | Enumerable<NUncheckedCreateWithoutMInput>
    connect?: XOR<NWhereUniqueInput, Enumerable<NWhereUniqueInput>>
    set?: XOR<NWhereUniqueInput, Enumerable<NWhereUniqueInput>>
    disconnect?: XOR<NWhereUniqueInput, Enumerable<NWhereUniqueInput>>
    delete?: XOR<NWhereUniqueInput, Enumerable<NWhereUniqueInput>>
    update?: XOR<NUpdateWithWhereUniqueWithoutMInput, Enumerable<NUpdateWithWhereUniqueWithoutMInput>>
    updateMany?: XOR<NUpdateManyWithWhereWithoutMInput, Enumerable<NUpdateManyWithWhereWithoutMInput>>
    deleteMany?: XOR<NScalarWhereInput, Enumerable<NScalarWhereInput>>
    upsert?: XOR<NUpsertWithWhereUniqueWithoutMInput, Enumerable<NUpsertWithWhereUniqueWithoutMInput>>
    connectOrCreate?: XOR<NCreateOrConnectWithoutmInput, Enumerable<NCreateOrConnectWithoutmInput>>
  }

  export type MCreateManyWithoutNInput = {
    create?: MCreateWithoutNInput | Enumerable<MCreateWithoutNInput> | MUncheckedCreateWithoutNInput | Enumerable<MUncheckedCreateWithoutNInput>
    connect?: XOR<MWhereUniqueInput, Enumerable<MWhereUniqueInput>>
    connectOrCreate?: XOR<MCreateOrConnectWithoutnInput, Enumerable<MCreateOrConnectWithoutnInput>>
  }

  export type MUpdateManyWithoutNInput = {
    create?: MCreateWithoutNInput | Enumerable<MCreateWithoutNInput> | MUncheckedCreateWithoutNInput | Enumerable<MUncheckedCreateWithoutNInput>
    connect?: XOR<MWhereUniqueInput, Enumerable<MWhereUniqueInput>>
    set?: XOR<MWhereUniqueInput, Enumerable<MWhereUniqueInput>>
    disconnect?: XOR<MWhereUniqueInput, Enumerable<MWhereUniqueInput>>
    delete?: XOR<MWhereUniqueInput, Enumerable<MWhereUniqueInput>>
    update?: XOR<MUpdateWithWhereUniqueWithoutNInput, Enumerable<MUpdateWithWhereUniqueWithoutNInput>>
    updateMany?: XOR<MUpdateManyWithWhereWithoutNInput, Enumerable<MUpdateManyWithWhereWithoutNInput>>
    deleteMany?: XOR<MScalarWhereInput, Enumerable<MScalarWhereInput>>
    upsert?: XOR<MUpsertWithWhereUniqueWithoutNInput, Enumerable<MUpsertWithWhereUniqueWithoutNInput>>
    connectOrCreate?: XOR<MCreateOrConnectWithoutnInput, Enumerable<MCreateOrConnectWithoutnInput>>
  }

  export type ManyRequiredCreateManyWithoutOneInput = {
    create?: ManyRequiredCreateWithoutOneInput | Enumerable<ManyRequiredCreateWithoutOneInput> | ManyRequiredUncheckedCreateWithoutOneInput | Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>
    connect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    connectOrCreate?: XOR<ManyRequiredCreateOrConnectWithoutoneInput, Enumerable<ManyRequiredCreateOrConnectWithoutoneInput>>
  }

  export type ManyRequiredUncheckedCreateManyWithoutOneInput = {
    create?: ManyRequiredCreateWithoutOneInput | Enumerable<ManyRequiredCreateWithoutOneInput> | ManyRequiredUncheckedCreateWithoutOneInput | Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>
    connect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    connectOrCreate?: XOR<ManyRequiredCreateOrConnectWithoutoneInput, Enumerable<ManyRequiredCreateOrConnectWithoutoneInput>>
  }

  export type ManyRequiredUpdateManyWithoutOneInput = {
    create?: ManyRequiredCreateWithoutOneInput | Enumerable<ManyRequiredCreateWithoutOneInput> | ManyRequiredUncheckedCreateWithoutOneInput | Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>
    connect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    set?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    disconnect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    delete?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    update?: XOR<ManyRequiredUpdateWithWhereUniqueWithoutOneInput, Enumerable<ManyRequiredUpdateWithWhereUniqueWithoutOneInput>>
    updateMany?: XOR<ManyRequiredUpdateManyWithWhereWithoutOneInput, Enumerable<ManyRequiredUpdateManyWithWhereWithoutOneInput>>
    deleteMany?: XOR<ManyRequiredScalarWhereInput, Enumerable<ManyRequiredScalarWhereInput>>
    upsert?: XOR<ManyRequiredUpsertWithWhereUniqueWithoutOneInput, Enumerable<ManyRequiredUpsertWithWhereUniqueWithoutOneInput>>
    connectOrCreate?: XOR<ManyRequiredCreateOrConnectWithoutoneInput, Enumerable<ManyRequiredCreateOrConnectWithoutoneInput>>
  }

  export type ManyRequiredUncheckedUpdateManyWithoutOneInput = {
    create?: ManyRequiredCreateWithoutOneInput | Enumerable<ManyRequiredCreateWithoutOneInput> | ManyRequiredUncheckedCreateWithoutOneInput | Enumerable<ManyRequiredUncheckedCreateWithoutOneInput>
    connect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    set?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    disconnect?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    delete?: XOR<ManyRequiredWhereUniqueInput, Enumerable<ManyRequiredWhereUniqueInput>>
    update?: XOR<ManyRequiredUpdateWithWhereUniqueWithoutOneInput, Enumerable<ManyRequiredUpdateWithWhereUniqueWithoutOneInput>>
    updateMany?: XOR<ManyRequiredUpdateManyWithWhereWithoutOneInput, Enumerable<ManyRequiredUpdateManyWithWhereWithoutOneInput>>
    deleteMany?: XOR<ManyRequiredScalarWhereInput, Enumerable<ManyRequiredScalarWhereInput>>
    upsert?: XOR<ManyRequiredUpsertWithWhereUniqueWithoutOneInput, Enumerable<ManyRequiredUpsertWithWhereUniqueWithoutOneInput>>
    connectOrCreate?: XOR<ManyRequiredCreateOrConnectWithoutoneInput, Enumerable<ManyRequiredCreateOrConnectWithoutoneInput>>
  }

  export type OneOptionalCreateOneWithoutManyInput = {
    create?: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
    connect?: OneOptionalWhereUniqueInput
    connectOrCreate?: OneOptionalCreateOrConnectWithoutmanyInput
  }

  export type OneOptionalUpdateOneWithoutManyInput = {
    create?: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
    connect?: OneOptionalWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<OneOptionalUpdateWithoutManyInput, OneOptionalUncheckedUpdateWithoutManyInput>
    upsert?: OneOptionalUpsertWithoutManyInput
    connectOrCreate?: OneOptionalCreateOrConnectWithoutmanyInput
  }

  export type OptionalSide2CreateOneWithoutOptiInput = {
    create?: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide2WhereUniqueInput
    connectOrCreate?: OptionalSide2CreateOrConnectWithoutoptiInput
  }

  export type OptionalSide2UpdateOneWithoutOptiInput = {
    create?: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide2WhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<OptionalSide2UpdateWithoutOptiInput, OptionalSide2UncheckedUpdateWithoutOptiInput>
    upsert?: OptionalSide2UpsertWithoutOptiInput
    connectOrCreate?: OptionalSide2CreateOrConnectWithoutoptiInput
  }

  export type OptionalSide1CreateOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide1WhereUniqueInput
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutoptiInput
  }

  export type OptionalSide1UncheckedCreateOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide1WhereUniqueInput
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutoptiInput
  }

  export type OptionalSide1UpdateOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide1WhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput>
    upsert?: OptionalSide1UpsertWithoutOptiInput
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutoptiInput
  }

  export type OptionalSide1UncheckedUpdateOneWithoutOptiInput = {
    create?: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
    connect?: OptionalSide1WhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput>
    upsert?: OptionalSide1UpsertWithoutOptiInput
    connectOrCreate?: OptionalSide1CreateOrConnectWithoutoptiInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: BigInt
    increment?: BigInt
    decrement?: BigInt
    multiply?: BigInt
    divide?: BigInt
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal
    increment?: Decimal
    decrement?: Decimal
    multiply?: Decimal
    divide?: Decimal
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Buffer
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedIntFilter>
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: XOR<Date | string, NestedDateTimeFilter>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: XOR<string, NestedStringFilter>
  }

  export type NestedStringNullableFilter = {
    equals?: XOR<string, null>
    in?: XOR<Enumerable<string>, null>
    notIn?: XOR<Enumerable<string>, null>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: string | NestedStringNullableFilter | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: XOR<boolean, NestedBoolFilter>
  }

  export type NestedIntNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedIntNullableFilter | null
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: XOR<number, NestedFloatFilter>
  }

  export type NestedFloatNullableFilter = {
    equals?: XOR<number, null>
    in?: XOR<Enumerable<number>, null>
    notIn?: XOR<Enumerable<number>, null>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: number | NestedFloatNullableFilter | null
  }

  export type NestedEnumABeautifulEnumFilter = {
    equals?: ABeautifulEnum
    in?: Enumerable<ABeautifulEnum>
    notIn?: Enumerable<ABeautifulEnum>
    not?: XOR<ABeautifulEnum, NestedEnumABeautifulEnumFilter>
  }

  export type NestedEnumABeautifulEnumNullableFilter = {
    equals?: XOR<ABeautifulEnum, null>
    in?: XOR<Enumerable<ABeautifulEnum>, null>
    notIn?: XOR<Enumerable<ABeautifulEnum>, null>
    not?: ABeautifulEnum | NestedEnumABeautifulEnumNullableFilter | null
  }

  export type NestedBoolNullableFilter = {
    equals?: XOR<boolean, null>
    not?: boolean | NestedBoolNullableFilter | null
  }

  export type NestedBigIntFilter = {
    equals?: BigInt
    in?: Enumerable<BigInt>
    notIn?: Enumerable<BigInt>
    lt?: BigInt
    lte?: BigInt
    gt?: BigInt
    gte?: BigInt
    not?: XOR<BigInt, NestedBigIntFilter>
  }

  export type NestedDecimalFilter = {
    equals?: Decimal
    in?: Enumerable<Decimal>
    notIn?: Enumerable<Decimal>
    lt?: Decimal
    lte?: Decimal
    gt?: Decimal
    gte?: Decimal
    not?: XOR<Decimal, NestedDecimalFilter>
  }

  export type NestedBytesFilter = {
    equals?: Buffer
    not?: XOR<Buffer, NestedBytesFilter>
  }

  export type UserCreateWithoutPostsInput = {
    email: string
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: number
    email: string
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type UserCreateOrConnectWithoutpostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    email?: XOR<string, StringFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type PostCreateWithoutAuthorInput = {
    createdAt?: Date | string
    title: string
    content?: XOR<string, null>
    published?: boolean
  }

  export type PostUncheckedCreateWithoutAuthorInput = {
    id?: number
    createdAt?: Date | string
    title: string
    content?: XOR<string, null>
    published?: boolean
  }

  export type PostCreateOrConnectWithoutauthorInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type PostUpdateWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
  }

  export type PostUpdateManyWithWhereWithoutAuthorInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostScalarWhereInput = {
    AND?: XOR<PostScalarWhereInput, Enumerable<PostScalarWhereInput>>
    OR?: XOR<PostScalarWhereInput, Enumerable<PostScalarWhereInput>>
    NOT?: XOR<PostScalarWhereInput, Enumerable<PostScalarWhereInput>>
    id?: XOR<IntFilter, number>
    createdAt?: XOR<DateTimeFilter, Date | string>
    title?: XOR<StringFilter, string>
    content?: StringNullableFilter | string | null
    published?: XOR<BoolFilter, boolean>
    authorId?: XOR<IntFilter, number>
  }

  export type PostUpsertWithWhereUniqueWithoutAuthorInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutAuthorInput, PostUncheckedUpdateWithoutAuthorInput>
    create: XOR<PostCreateWithoutAuthorInput, PostUncheckedCreateWithoutAuthorInput>
  }

  export type NCreateWithoutMInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type NUncheckedCreateWithoutMInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type NCreateOrConnectWithoutmInput = {
    where: NWhereUniqueInput
    create: XOR<NCreateWithoutMInput, NUncheckedCreateWithoutMInput>
  }

  export type NUpdateWithWhereUniqueWithoutMInput = {
    where: NWhereUniqueInput
    data: XOR<NUpdateWithoutMInput, NUncheckedUpdateWithoutMInput>
  }

  export type NUpdateManyWithWhereWithoutMInput = {
    where: NScalarWhereInput
    data: XOR<NUpdateManyMutationInput, NUncheckedUpdateManyWithoutNInput>
  }

  export type NScalarWhereInput = {
    AND?: XOR<NScalarWhereInput, Enumerable<NScalarWhereInput>>
    OR?: XOR<NScalarWhereInput, Enumerable<NScalarWhereInput>>
    NOT?: XOR<NScalarWhereInput, Enumerable<NScalarWhereInput>>
    id?: XOR<IntFilter, number>
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type NUpsertWithWhereUniqueWithoutMInput = {
    where: NWhereUniqueInput
    update: XOR<NUpdateWithoutMInput, NUncheckedUpdateWithoutMInput>
    create: XOR<NCreateWithoutMInput, NUncheckedCreateWithoutMInput>
  }

  export type MCreateWithoutNInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type MUncheckedCreateWithoutNInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type MCreateOrConnectWithoutnInput = {
    where: MWhereUniqueInput
    create: XOR<MCreateWithoutNInput, MUncheckedCreateWithoutNInput>
  }

  export type MUpdateWithWhereUniqueWithoutNInput = {
    where: MWhereUniqueInput
    data: XOR<MUpdateWithoutNInput, MUncheckedUpdateWithoutNInput>
  }

  export type MUpdateManyWithWhereWithoutNInput = {
    where: MScalarWhereInput
    data: XOR<MUpdateManyMutationInput, MUncheckedUpdateManyWithoutMInput>
  }

  export type MScalarWhereInput = {
    AND?: XOR<MScalarWhereInput, Enumerable<MScalarWhereInput>>
    OR?: XOR<MScalarWhereInput, Enumerable<MScalarWhereInput>>
    NOT?: XOR<MScalarWhereInput, Enumerable<MScalarWhereInput>>
    id?: XOR<IntFilter, number>
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type MUpsertWithWhereUniqueWithoutNInput = {
    where: MWhereUniqueInput
    update: XOR<MUpdateWithoutNInput, MUncheckedUpdateWithoutNInput>
    create: XOR<MCreateWithoutNInput, MUncheckedCreateWithoutNInput>
  }

  export type ManyRequiredCreateWithoutOneInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type ManyRequiredUncheckedCreateWithoutOneInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type ManyRequiredCreateOrConnectWithoutoneInput = {
    where: ManyRequiredWhereUniqueInput
    create: XOR<ManyRequiredCreateWithoutOneInput, ManyRequiredUncheckedCreateWithoutOneInput>
  }

  export type ManyRequiredUpdateWithWhereUniqueWithoutOneInput = {
    where: ManyRequiredWhereUniqueInput
    data: XOR<ManyRequiredUpdateWithoutOneInput, ManyRequiredUncheckedUpdateWithoutOneInput>
  }

  export type ManyRequiredUpdateManyWithWhereWithoutOneInput = {
    where: ManyRequiredScalarWhereInput
    data: XOR<ManyRequiredUpdateManyMutationInput, ManyRequiredUncheckedUpdateManyWithoutManyInput>
  }

  export type ManyRequiredScalarWhereInput = {
    AND?: XOR<ManyRequiredScalarWhereInput, Enumerable<ManyRequiredScalarWhereInput>>
    OR?: XOR<ManyRequiredScalarWhereInput, Enumerable<ManyRequiredScalarWhereInput>>
    NOT?: XOR<ManyRequiredScalarWhereInput, Enumerable<ManyRequiredScalarWhereInput>>
    id?: XOR<IntFilter, number>
    oneOptionalId?: IntNullableFilter | number | null
    int?: XOR<IntFilter, number>
    optionalInt?: IntNullableFilter | number | null
    float?: XOR<FloatFilter, number>
    optionalFloat?: FloatNullableFilter | number | null
    string?: XOR<StringFilter, string>
    optionalString?: StringNullableFilter | string | null
    json?: JsonFilter
    optionalJson?: JsonNullableFilter
    enum?: XOR<EnumABeautifulEnumFilter, ABeautifulEnum>
    optionalEnum?: EnumABeautifulEnumNullableFilter | ABeautifulEnum | null
    boolean?: XOR<BoolFilter, boolean>
    optionalBoolean?: BoolNullableFilter | boolean | null
  }

  export type ManyRequiredUpsertWithWhereUniqueWithoutOneInput = {
    where: ManyRequiredWhereUniqueInput
    update: XOR<ManyRequiredUpdateWithoutOneInput, ManyRequiredUncheckedUpdateWithoutOneInput>
    create: XOR<ManyRequiredCreateWithoutOneInput, ManyRequiredUncheckedCreateWithoutOneInput>
  }

  export type OneOptionalCreateWithoutManyInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OneOptionalUncheckedCreateWithoutManyInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OneOptionalCreateOrConnectWithoutmanyInput = {
    where: OneOptionalWhereUniqueInput
    create: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
  }

  export type OneOptionalUpdateWithoutManyInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OneOptionalUncheckedUpdateWithoutManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OneOptionalUpsertWithoutManyInput = {
    update: XOR<OneOptionalUpdateWithoutManyInput, OneOptionalUncheckedUpdateWithoutManyInput>
    create: XOR<OneOptionalCreateWithoutManyInput, OneOptionalUncheckedCreateWithoutManyInput>
  }

  export type OptionalSide2CreateWithoutOptiInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OptionalSide2UncheckedCreateWithoutOptiInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OptionalSide2CreateOrConnectWithoutoptiInput = {
    where: OptionalSide2WhereUniqueInput
    create: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide2UpdateWithoutOptiInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide2UncheckedUpdateWithoutOptiInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide2UpsertWithoutOptiInput = {
    update: XOR<OptionalSide2UpdateWithoutOptiInput, OptionalSide2UncheckedUpdateWithoutOptiInput>
    create: XOR<OptionalSide2CreateWithoutOptiInput, OptionalSide2UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide1CreateWithoutOptiInput = {
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OptionalSide1UncheckedCreateWithoutOptiInput = {
    id?: number
    int: number
    optionalInt?: XOR<number, null>
    float: number
    optionalFloat?: XOR<number, null>
    string: string
    optionalString?: XOR<string, null>
    json: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum: ABeautifulEnum
    optionalEnum?: XOR<ABeautifulEnum, null>
    boolean: boolean
    optionalBoolean?: XOR<boolean, null>
  }

  export type OptionalSide1CreateOrConnectWithoutoptiInput = {
    where: OptionalSide1WhereUniqueInput
    create: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
  }

  export type OptionalSide1UpdateWithoutOptiInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide1UncheckedUpdateWithoutOptiInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type OptionalSide1UpsertWithoutOptiInput = {
    update: XOR<OptionalSide1UpdateWithoutOptiInput, OptionalSide1UncheckedUpdateWithoutOptiInput>
    create: XOR<OptionalSide1CreateWithoutOptiInput, OptionalSide1UncheckedCreateWithoutOptiInput>
  }

  export type PostUpdateWithoutAuthorInput = {
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
  }

  export type PostUncheckedUpdateWithoutAuthorInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
  }

  export type PostUncheckedUpdateManyWithoutPostsInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
    title?: XOR<string, StringFieldUpdateOperationsInput>
    content?: string | NullableStringFieldUpdateOperationsInput | null
    published?: XOR<boolean, BoolFieldUpdateOperationsInput>
  }

  export type NUpdateWithoutMInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type NUncheckedUpdateWithoutMInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type NUncheckedUpdateManyWithoutNInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MUpdateWithoutNInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MUncheckedUpdateWithoutNInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type MUncheckedUpdateManyWithoutMInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredUpdateWithoutOneInput = {
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredUncheckedUpdateWithoutOneInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }

  export type ManyRequiredUncheckedUpdateManyWithoutManyInput = {
    id?: XOR<number, IntFieldUpdateOperationsInput>
    int?: XOR<number, IntFieldUpdateOperationsInput>
    optionalInt?: number | NullableIntFieldUpdateOperationsInput | null
    float?: XOR<number, FloatFieldUpdateOperationsInput>
    optionalFloat?: number | NullableFloatFieldUpdateOperationsInput | null
    string?: XOR<string, StringFieldUpdateOperationsInput>
    optionalString?: string | NullableStringFieldUpdateOperationsInput | null
    json?: InputJsonValue
    optionalJson?: XOR<InputJsonValue, null>
    enum?: XOR<ABeautifulEnum, EnumABeautifulEnumFieldUpdateOperationsInput>
    optionalEnum?: ABeautifulEnum | NullableEnumABeautifulEnumFieldUpdateOperationsInput | null
    boolean?: XOR<boolean, BoolFieldUpdateOperationsInput>
    optionalBoolean?: boolean | NullableBoolFieldUpdateOperationsInput | null
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatiblity introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to \`Prisma.PostDistinctFieldEnum\`
 */
export import PostDistinctFieldEnum = Prisma.PostDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.UserDistinctFieldEnum\`
 */
export import UserDistinctFieldEnum = Prisma.UserDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.MDistinctFieldEnum\`
 */
export import MDistinctFieldEnum = Prisma.MDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.NDistinctFieldEnum\`
 */
export import NDistinctFieldEnum = Prisma.NDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.OneOptionalDistinctFieldEnum\`
 */
export import OneOptionalDistinctFieldEnum = Prisma.OneOptionalDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredDistinctFieldEnum\`
 */
export import ManyRequiredDistinctFieldEnum = Prisma.ManyRequiredDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1DistinctFieldEnum\`
 */
export import OptionalSide1DistinctFieldEnum = Prisma.OptionalSide1DistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2DistinctFieldEnum\`
 */
export import OptionalSide2DistinctFieldEnum = Prisma.OptionalSide2DistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.ADistinctFieldEnum\`
 */
export import ADistinctFieldEnum = Prisma.ADistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.BDistinctFieldEnum\`
 */
export import BDistinctFieldEnum = Prisma.BDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.CDistinctFieldEnum\`
 */
export import CDistinctFieldEnum = Prisma.CDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.DDistinctFieldEnum\`
 */
export import DDistinctFieldEnum = Prisma.DDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.EDistinctFieldEnum\`
 */
export import EDistinctFieldEnum = Prisma.EDistinctFieldEnum

/**
 * @deprecated Renamed to \`Prisma.SortOrder\`
 */
export import SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to \`Prisma.QueryMode\`
 */
export import QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to \`Prisma.ModelName\`
 */
export import ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to \`Prisma.AggregatePost\`
 */
export import AggregatePost = Prisma.AggregatePost

/**
 * @deprecated Renamed to \`Prisma.PostAvgAggregateOutputType\`
 */
export import PostAvgAggregateOutputType = Prisma.PostAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.PostSumAggregateOutputType\`
 */
export import PostSumAggregateOutputType = Prisma.PostSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.PostMinAggregateOutputType\`
 */
export import PostMinAggregateOutputType = Prisma.PostMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.PostMaxAggregateOutputType\`
 */
export import PostMaxAggregateOutputType = Prisma.PostMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregatePostArgs\`
 */
export import AggregatePostArgs = Prisma.AggregatePostArgs

/**
 * @deprecated Renamed to \`Prisma.PostAvgAggregateInputType\`
 */
export import PostAvgAggregateInputType = Prisma.PostAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.PostSumAggregateInputType\`
 */
export import PostSumAggregateInputType = Prisma.PostSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.PostMinAggregateInputType\`
 */
export import PostMinAggregateInputType = Prisma.PostMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.PostMaxAggregateInputType\`
 */
export import PostMaxAggregateInputType = Prisma.PostMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.PostSelect\`
 */
export import PostSelect = Prisma.PostSelect

/**
 * @deprecated Renamed to \`Prisma.PostInclude\`
 */
export import PostInclude = Prisma.PostInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniquePostArgs\`
 */
export import FindUniquePostArgs = Prisma.FindUniquePostArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstPostArgs\`
 */
export import FindFirstPostArgs = Prisma.FindFirstPostArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyPostArgs\`
 */
export import FindManyPostArgs = Prisma.FindManyPostArgs

/**
 * @deprecated Renamed to \`Prisma.PostCreateArgs\`
 */
export import PostCreateArgs = Prisma.PostCreateArgs

/**
 * @deprecated Renamed to \`Prisma.PostUpdateArgs\`
 */
export import PostUpdateArgs = Prisma.PostUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.PostUpdateManyArgs\`
 */
export import PostUpdateManyArgs = Prisma.PostUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.PostUpsertArgs\`
 */
export import PostUpsertArgs = Prisma.PostUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.PostDeleteArgs\`
 */
export import PostDeleteArgs = Prisma.PostDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.PostDeleteManyArgs\`
 */
export import PostDeleteManyArgs = Prisma.PostDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateUser\`
 */
export import AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to \`Prisma.UserAvgAggregateOutputType\`
 */
export import UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.UserSumAggregateOutputType\`
 */
export import UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.UserMinAggregateOutputType\`
 */
export import UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.UserMaxAggregateOutputType\`
 */
export import UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateUserArgs\`
 */
export import AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to \`Prisma.UserAvgAggregateInputType\`
 */
export import UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.UserSumAggregateInputType\`
 */
export import UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.UserMinAggregateInputType\`
 */
export import UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.UserMaxAggregateInputType\`
 */
export import UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.UserSelect\`
 */
export import UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to \`Prisma.UserInclude\`
 */
export import UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniqueUserArgs\`
 */
export import FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstUserArgs\`
 */
export import FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyUserArgs\`
 */
export import FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to \`Prisma.UserCreateArgs\`
 */
export import UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to \`Prisma.UserUpdateArgs\`
 */
export import UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.UserUpdateManyArgs\`
 */
export import UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.UserUpsertArgs\`
 */
export import UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.UserDeleteArgs\`
 */
export import UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.UserDeleteManyArgs\`
 */
export import UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateM\`
 */
export import AggregateM = Prisma.AggregateM

/**
 * @deprecated Renamed to \`Prisma.MAvgAggregateOutputType\`
 */
export import MAvgAggregateOutputType = Prisma.MAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.MSumAggregateOutputType\`
 */
export import MSumAggregateOutputType = Prisma.MSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.MMinAggregateOutputType\`
 */
export import MMinAggregateOutputType = Prisma.MMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.MMaxAggregateOutputType\`
 */
export import MMaxAggregateOutputType = Prisma.MMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateMArgs\`
 */
export import AggregateMArgs = Prisma.AggregateMArgs

/**
 * @deprecated Renamed to \`Prisma.MAvgAggregateInputType\`
 */
export import MAvgAggregateInputType = Prisma.MAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.MSumAggregateInputType\`
 */
export import MSumAggregateInputType = Prisma.MSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.MMinAggregateInputType\`
 */
export import MMinAggregateInputType = Prisma.MMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.MMaxAggregateInputType\`
 */
export import MMaxAggregateInputType = Prisma.MMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.MSelect\`
 */
export import MSelect = Prisma.MSelect

/**
 * @deprecated Renamed to \`Prisma.MInclude\`
 */
export import MInclude = Prisma.MInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniqueMArgs\`
 */
export import FindUniqueMArgs = Prisma.FindUniqueMArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstMArgs\`
 */
export import FindFirstMArgs = Prisma.FindFirstMArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyMArgs\`
 */
export import FindManyMArgs = Prisma.FindManyMArgs

/**
 * @deprecated Renamed to \`Prisma.MCreateArgs\`
 */
export import MCreateArgs = Prisma.MCreateArgs

/**
 * @deprecated Renamed to \`Prisma.MUpdateArgs\`
 */
export import MUpdateArgs = Prisma.MUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.MUpdateManyArgs\`
 */
export import MUpdateManyArgs = Prisma.MUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.MUpsertArgs\`
 */
export import MUpsertArgs = Prisma.MUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.MDeleteArgs\`
 */
export import MDeleteArgs = Prisma.MDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.MDeleteManyArgs\`
 */
export import MDeleteManyArgs = Prisma.MDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateN\`
 */
export import AggregateN = Prisma.AggregateN

/**
 * @deprecated Renamed to \`Prisma.NAvgAggregateOutputType\`
 */
export import NAvgAggregateOutputType = Prisma.NAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.NSumAggregateOutputType\`
 */
export import NSumAggregateOutputType = Prisma.NSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.NMinAggregateOutputType\`
 */
export import NMinAggregateOutputType = Prisma.NMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.NMaxAggregateOutputType\`
 */
export import NMaxAggregateOutputType = Prisma.NMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateNArgs\`
 */
export import AggregateNArgs = Prisma.AggregateNArgs

/**
 * @deprecated Renamed to \`Prisma.NAvgAggregateInputType\`
 */
export import NAvgAggregateInputType = Prisma.NAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.NSumAggregateInputType\`
 */
export import NSumAggregateInputType = Prisma.NSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.NMinAggregateInputType\`
 */
export import NMinAggregateInputType = Prisma.NMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.NMaxAggregateInputType\`
 */
export import NMaxAggregateInputType = Prisma.NMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.NSelect\`
 */
export import NSelect = Prisma.NSelect

/**
 * @deprecated Renamed to \`Prisma.NInclude\`
 */
export import NInclude = Prisma.NInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniqueNArgs\`
 */
export import FindUniqueNArgs = Prisma.FindUniqueNArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstNArgs\`
 */
export import FindFirstNArgs = Prisma.FindFirstNArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyNArgs\`
 */
export import FindManyNArgs = Prisma.FindManyNArgs

/**
 * @deprecated Renamed to \`Prisma.NCreateArgs\`
 */
export import NCreateArgs = Prisma.NCreateArgs

/**
 * @deprecated Renamed to \`Prisma.NUpdateArgs\`
 */
export import NUpdateArgs = Prisma.NUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.NUpdateManyArgs\`
 */
export import NUpdateManyArgs = Prisma.NUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.NUpsertArgs\`
 */
export import NUpsertArgs = Prisma.NUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.NDeleteArgs\`
 */
export import NDeleteArgs = Prisma.NDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.NDeleteManyArgs\`
 */
export import NDeleteManyArgs = Prisma.NDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateOneOptional\`
 */
export import AggregateOneOptional = Prisma.AggregateOneOptional

/**
 * @deprecated Renamed to \`Prisma.OneOptionalAvgAggregateOutputType\`
 */
export import OneOptionalAvgAggregateOutputType = Prisma.OneOptionalAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalSumAggregateOutputType\`
 */
export import OneOptionalSumAggregateOutputType = Prisma.OneOptionalSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalMinAggregateOutputType\`
 */
export import OneOptionalMinAggregateOutputType = Prisma.OneOptionalMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalMaxAggregateOutputType\`
 */
export import OneOptionalMaxAggregateOutputType = Prisma.OneOptionalMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateOneOptionalArgs\`
 */
export import AggregateOneOptionalArgs = Prisma.AggregateOneOptionalArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalAvgAggregateInputType\`
 */
export import OneOptionalAvgAggregateInputType = Prisma.OneOptionalAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalSumAggregateInputType\`
 */
export import OneOptionalSumAggregateInputType = Prisma.OneOptionalSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalMinAggregateInputType\`
 */
export import OneOptionalMinAggregateInputType = Prisma.OneOptionalMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalMaxAggregateInputType\`
 */
export import OneOptionalMaxAggregateInputType = Prisma.OneOptionalMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OneOptionalSelect\`
 */
export import OneOptionalSelect = Prisma.OneOptionalSelect

/**
 * @deprecated Renamed to \`Prisma.OneOptionalInclude\`
 */
export import OneOptionalInclude = Prisma.OneOptionalInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniqueOneOptionalArgs\`
 */
export import FindUniqueOneOptionalArgs = Prisma.FindUniqueOneOptionalArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstOneOptionalArgs\`
 */
export import FindFirstOneOptionalArgs = Prisma.FindFirstOneOptionalArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyOneOptionalArgs\`
 */
export import FindManyOneOptionalArgs = Prisma.FindManyOneOptionalArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalCreateArgs\`
 */
export import OneOptionalCreateArgs = Prisma.OneOptionalCreateArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateArgs\`
 */
export import OneOptionalUpdateArgs = Prisma.OneOptionalUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateManyArgs\`
 */
export import OneOptionalUpdateManyArgs = Prisma.OneOptionalUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpsertArgs\`
 */
export import OneOptionalUpsertArgs = Prisma.OneOptionalUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalDeleteArgs\`
 */
export import OneOptionalDeleteArgs = Prisma.OneOptionalDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.OneOptionalDeleteManyArgs\`
 */
export import OneOptionalDeleteManyArgs = Prisma.OneOptionalDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateManyRequired\`
 */
export import AggregateManyRequired = Prisma.AggregateManyRequired

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredAvgAggregateOutputType\`
 */
export import ManyRequiredAvgAggregateOutputType = Prisma.ManyRequiredAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredSumAggregateOutputType\`
 */
export import ManyRequiredSumAggregateOutputType = Prisma.ManyRequiredSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredMinAggregateOutputType\`
 */
export import ManyRequiredMinAggregateOutputType = Prisma.ManyRequiredMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredMaxAggregateOutputType\`
 */
export import ManyRequiredMaxAggregateOutputType = Prisma.ManyRequiredMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateManyRequiredArgs\`
 */
export import AggregateManyRequiredArgs = Prisma.AggregateManyRequiredArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredAvgAggregateInputType\`
 */
export import ManyRequiredAvgAggregateInputType = Prisma.ManyRequiredAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredSumAggregateInputType\`
 */
export import ManyRequiredSumAggregateInputType = Prisma.ManyRequiredSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredMinAggregateInputType\`
 */
export import ManyRequiredMinAggregateInputType = Prisma.ManyRequiredMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredMaxAggregateInputType\`
 */
export import ManyRequiredMaxAggregateInputType = Prisma.ManyRequiredMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredSelect\`
 */
export import ManyRequiredSelect = Prisma.ManyRequiredSelect

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredInclude\`
 */
export import ManyRequiredInclude = Prisma.ManyRequiredInclude

/**
 * @deprecated Renamed to \`Prisma.FindUniqueManyRequiredArgs\`
 */
export import FindUniqueManyRequiredArgs = Prisma.FindUniqueManyRequiredArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstManyRequiredArgs\`
 */
export import FindFirstManyRequiredArgs = Prisma.FindFirstManyRequiredArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyManyRequiredArgs\`
 */
export import FindManyManyRequiredArgs = Prisma.FindManyManyRequiredArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredCreateArgs\`
 */
export import ManyRequiredCreateArgs = Prisma.ManyRequiredCreateArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateArgs\`
 */
export import ManyRequiredUpdateArgs = Prisma.ManyRequiredUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateManyArgs\`
 */
export import ManyRequiredUpdateManyArgs = Prisma.ManyRequiredUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpsertArgs\`
 */
export import ManyRequiredUpsertArgs = Prisma.ManyRequiredUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredDeleteArgs\`
 */
export import ManyRequiredDeleteArgs = Prisma.ManyRequiredDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredDeleteManyArgs\`
 */
export import ManyRequiredDeleteManyArgs = Prisma.ManyRequiredDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateOptionalSide1\`
 */
export import AggregateOptionalSide1 = Prisma.AggregateOptionalSide1

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1AvgAggregateOutputType\`
 */
export import OptionalSide1AvgAggregateOutputType = Prisma.OptionalSide1AvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1SumAggregateOutputType\`
 */
export import OptionalSide1SumAggregateOutputType = Prisma.OptionalSide1SumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1MinAggregateOutputType\`
 */
export import OptionalSide1MinAggregateOutputType = Prisma.OptionalSide1MinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1MaxAggregateOutputType\`
 */
export import OptionalSide1MaxAggregateOutputType = Prisma.OptionalSide1MaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateOptionalSide1Args\`
 */
export import AggregateOptionalSide1Args = Prisma.AggregateOptionalSide1Args

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1AvgAggregateInputType\`
 */
export import OptionalSide1AvgAggregateInputType = Prisma.OptionalSide1AvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1SumAggregateInputType\`
 */
export import OptionalSide1SumAggregateInputType = Prisma.OptionalSide1SumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1MinAggregateInputType\`
 */
export import OptionalSide1MinAggregateInputType = Prisma.OptionalSide1MinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1MaxAggregateInputType\`
 */
export import OptionalSide1MaxAggregateInputType = Prisma.OptionalSide1MaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1Select\`
 */
export import OptionalSide1Select = Prisma.OptionalSide1Select

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1Include\`
 */
export import OptionalSide1Include = Prisma.OptionalSide1Include

/**
 * @deprecated Renamed to \`Prisma.FindUniqueOptionalSide1Args\`
 */
export import FindUniqueOptionalSide1Args = Prisma.FindUniqueOptionalSide1Args

/**
 * @deprecated Renamed to \`Prisma.FindFirstOptionalSide1Args\`
 */
export import FindFirstOptionalSide1Args = Prisma.FindFirstOptionalSide1Args

/**
 * @deprecated Renamed to \`Prisma.FindManyOptionalSide1Args\`
 */
export import FindManyOptionalSide1Args = Prisma.FindManyOptionalSide1Args

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1CreateArgs\`
 */
export import OptionalSide1CreateArgs = Prisma.OptionalSide1CreateArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateArgs\`
 */
export import OptionalSide1UpdateArgs = Prisma.OptionalSide1UpdateArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateManyArgs\`
 */
export import OptionalSide1UpdateManyArgs = Prisma.OptionalSide1UpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpsertArgs\`
 */
export import OptionalSide1UpsertArgs = Prisma.OptionalSide1UpsertArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1DeleteArgs\`
 */
export import OptionalSide1DeleteArgs = Prisma.OptionalSide1DeleteArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1DeleteManyArgs\`
 */
export import OptionalSide1DeleteManyArgs = Prisma.OptionalSide1DeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateOptionalSide2\`
 */
export import AggregateOptionalSide2 = Prisma.AggregateOptionalSide2

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2AvgAggregateOutputType\`
 */
export import OptionalSide2AvgAggregateOutputType = Prisma.OptionalSide2AvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2SumAggregateOutputType\`
 */
export import OptionalSide2SumAggregateOutputType = Prisma.OptionalSide2SumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2MinAggregateOutputType\`
 */
export import OptionalSide2MinAggregateOutputType = Prisma.OptionalSide2MinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2MaxAggregateOutputType\`
 */
export import OptionalSide2MaxAggregateOutputType = Prisma.OptionalSide2MaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateOptionalSide2Args\`
 */
export import AggregateOptionalSide2Args = Prisma.AggregateOptionalSide2Args

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2AvgAggregateInputType\`
 */
export import OptionalSide2AvgAggregateInputType = Prisma.OptionalSide2AvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2SumAggregateInputType\`
 */
export import OptionalSide2SumAggregateInputType = Prisma.OptionalSide2SumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2MinAggregateInputType\`
 */
export import OptionalSide2MinAggregateInputType = Prisma.OptionalSide2MinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2MaxAggregateInputType\`
 */
export import OptionalSide2MaxAggregateInputType = Prisma.OptionalSide2MaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2Select\`
 */
export import OptionalSide2Select = Prisma.OptionalSide2Select

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2Include\`
 */
export import OptionalSide2Include = Prisma.OptionalSide2Include

/**
 * @deprecated Renamed to \`Prisma.FindUniqueOptionalSide2Args\`
 */
export import FindUniqueOptionalSide2Args = Prisma.FindUniqueOptionalSide2Args

/**
 * @deprecated Renamed to \`Prisma.FindFirstOptionalSide2Args\`
 */
export import FindFirstOptionalSide2Args = Prisma.FindFirstOptionalSide2Args

/**
 * @deprecated Renamed to \`Prisma.FindManyOptionalSide2Args\`
 */
export import FindManyOptionalSide2Args = Prisma.FindManyOptionalSide2Args

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2CreateArgs\`
 */
export import OptionalSide2CreateArgs = Prisma.OptionalSide2CreateArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateArgs\`
 */
export import OptionalSide2UpdateArgs = Prisma.OptionalSide2UpdateArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateManyArgs\`
 */
export import OptionalSide2UpdateManyArgs = Prisma.OptionalSide2UpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpsertArgs\`
 */
export import OptionalSide2UpsertArgs = Prisma.OptionalSide2UpsertArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2DeleteArgs\`
 */
export import OptionalSide2DeleteArgs = Prisma.OptionalSide2DeleteArgs

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2DeleteManyArgs\`
 */
export import OptionalSide2DeleteManyArgs = Prisma.OptionalSide2DeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateA\`
 */
export import AggregateA = Prisma.AggregateA

/**
 * @deprecated Renamed to \`Prisma.AAvgAggregateOutputType\`
 */
export import AAvgAggregateOutputType = Prisma.AAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.ASumAggregateOutputType\`
 */
export import ASumAggregateOutputType = Prisma.ASumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AMinAggregateOutputType\`
 */
export import AMinAggregateOutputType = Prisma.AMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AMaxAggregateOutputType\`
 */
export import AMaxAggregateOutputType = Prisma.AMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateAArgs\`
 */
export import AggregateAArgs = Prisma.AggregateAArgs

/**
 * @deprecated Renamed to \`Prisma.AAvgAggregateInputType\`
 */
export import AAvgAggregateInputType = Prisma.AAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ASumAggregateInputType\`
 */
export import ASumAggregateInputType = Prisma.ASumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.AMinAggregateInputType\`
 */
export import AMinAggregateInputType = Prisma.AMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.AMaxAggregateInputType\`
 */
export import AMaxAggregateInputType = Prisma.AMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.ASelect\`
 */
export import ASelect = Prisma.ASelect

/**
 * @deprecated Renamed to \`Prisma.FindUniqueAArgs\`
 */
export import FindUniqueAArgs = Prisma.FindUniqueAArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstAArgs\`
 */
export import FindFirstAArgs = Prisma.FindFirstAArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyAArgs\`
 */
export import FindManyAArgs = Prisma.FindManyAArgs

/**
 * @deprecated Renamed to \`Prisma.ACreateArgs\`
 */
export import ACreateArgs = Prisma.ACreateArgs

/**
 * @deprecated Renamed to \`Prisma.AUpdateArgs\`
 */
export import AUpdateArgs = Prisma.AUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.AUpdateManyArgs\`
 */
export import AUpdateManyArgs = Prisma.AUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.AUpsertArgs\`
 */
export import AUpsertArgs = Prisma.AUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.ADeleteArgs\`
 */
export import ADeleteArgs = Prisma.ADeleteArgs

/**
 * @deprecated Renamed to \`Prisma.ADeleteManyArgs\`
 */
export import ADeleteManyArgs = Prisma.ADeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateB\`
 */
export import AggregateB = Prisma.AggregateB

/**
 * @deprecated Renamed to \`Prisma.BAvgAggregateOutputType\`
 */
export import BAvgAggregateOutputType = Prisma.BAvgAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.BSumAggregateOutputType\`
 */
export import BSumAggregateOutputType = Prisma.BSumAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.BMinAggregateOutputType\`
 */
export import BMinAggregateOutputType = Prisma.BMinAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.BMaxAggregateOutputType\`
 */
export import BMaxAggregateOutputType = Prisma.BMaxAggregateOutputType

/**
 * @deprecated Renamed to \`Prisma.AggregateBArgs\`
 */
export import AggregateBArgs = Prisma.AggregateBArgs

/**
 * @deprecated Renamed to \`Prisma.BAvgAggregateInputType\`
 */
export import BAvgAggregateInputType = Prisma.BAvgAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.BSumAggregateInputType\`
 */
export import BSumAggregateInputType = Prisma.BSumAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.BMinAggregateInputType\`
 */
export import BMinAggregateInputType = Prisma.BMinAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.BMaxAggregateInputType\`
 */
export import BMaxAggregateInputType = Prisma.BMaxAggregateInputType

/**
 * @deprecated Renamed to \`Prisma.BSelect\`
 */
export import BSelect = Prisma.BSelect

/**
 * @deprecated Renamed to \`Prisma.FindUniqueBArgs\`
 */
export import FindUniqueBArgs = Prisma.FindUniqueBArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstBArgs\`
 */
export import FindFirstBArgs = Prisma.FindFirstBArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyBArgs\`
 */
export import FindManyBArgs = Prisma.FindManyBArgs

/**
 * @deprecated Renamed to \`Prisma.BCreateArgs\`
 */
export import BCreateArgs = Prisma.BCreateArgs

/**
 * @deprecated Renamed to \`Prisma.BUpdateArgs\`
 */
export import BUpdateArgs = Prisma.BUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.BUpdateManyArgs\`
 */
export import BUpdateManyArgs = Prisma.BUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.BUpsertArgs\`
 */
export import BUpsertArgs = Prisma.BUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.BDeleteArgs\`
 */
export import BDeleteArgs = Prisma.BDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.BDeleteManyArgs\`
 */
export import BDeleteManyArgs = Prisma.BDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateC\`
 */
export import AggregateC = Prisma.AggregateC

/**
 * @deprecated Renamed to \`Prisma.AggregateCArgs\`
 */
export import AggregateCArgs = Prisma.AggregateCArgs

/**
 * @deprecated Renamed to \`Prisma.CSelect\`
 */
export import CSelect = Prisma.CSelect

/**
 * @deprecated Renamed to \`Prisma.FindUniqueCArgs\`
 */
export import FindUniqueCArgs = Prisma.FindUniqueCArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstCArgs\`
 */
export import FindFirstCArgs = Prisma.FindFirstCArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyCArgs\`
 */
export import FindManyCArgs = Prisma.FindManyCArgs

/**
 * @deprecated Renamed to \`Prisma.CCreateArgs\`
 */
export import CCreateArgs = Prisma.CCreateArgs

/**
 * @deprecated Renamed to \`Prisma.CUpdateArgs\`
 */
export import CUpdateArgs = Prisma.CUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.CUpdateManyArgs\`
 */
export import CUpdateManyArgs = Prisma.CUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.CUpsertArgs\`
 */
export import CUpsertArgs = Prisma.CUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.CDeleteArgs\`
 */
export import CDeleteArgs = Prisma.CDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.CDeleteManyArgs\`
 */
export import CDeleteManyArgs = Prisma.CDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateD\`
 */
export import AggregateD = Prisma.AggregateD

/**
 * @deprecated Renamed to \`Prisma.AggregateDArgs\`
 */
export import AggregateDArgs = Prisma.AggregateDArgs

/**
 * @deprecated Renamed to \`Prisma.DSelect\`
 */
export import DSelect = Prisma.DSelect

/**
 * @deprecated Renamed to \`Prisma.FindUniqueDArgs\`
 */
export import FindUniqueDArgs = Prisma.FindUniqueDArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstDArgs\`
 */
export import FindFirstDArgs = Prisma.FindFirstDArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyDArgs\`
 */
export import FindManyDArgs = Prisma.FindManyDArgs

/**
 * @deprecated Renamed to \`Prisma.DCreateArgs\`
 */
export import DCreateArgs = Prisma.DCreateArgs

/**
 * @deprecated Renamed to \`Prisma.DUpdateArgs\`
 */
export import DUpdateArgs = Prisma.DUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.DUpdateManyArgs\`
 */
export import DUpdateManyArgs = Prisma.DUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.DUpsertArgs\`
 */
export import DUpsertArgs = Prisma.DUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.DDeleteArgs\`
 */
export import DDeleteArgs = Prisma.DDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.DDeleteManyArgs\`
 */
export import DDeleteManyArgs = Prisma.DDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.AggregateE\`
 */
export import AggregateE = Prisma.AggregateE

/**
 * @deprecated Renamed to \`Prisma.AggregateEArgs\`
 */
export import AggregateEArgs = Prisma.AggregateEArgs

/**
 * @deprecated Renamed to \`Prisma.ESelect\`
 */
export import ESelect = Prisma.ESelect

/**
 * @deprecated Renamed to \`Prisma.FindUniqueEArgs\`
 */
export import FindUniqueEArgs = Prisma.FindUniqueEArgs

/**
 * @deprecated Renamed to \`Prisma.FindFirstEArgs\`
 */
export import FindFirstEArgs = Prisma.FindFirstEArgs

/**
 * @deprecated Renamed to \`Prisma.FindManyEArgs\`
 */
export import FindManyEArgs = Prisma.FindManyEArgs

/**
 * @deprecated Renamed to \`Prisma.ECreateArgs\`
 */
export import ECreateArgs = Prisma.ECreateArgs

/**
 * @deprecated Renamed to \`Prisma.EUpdateArgs\`
 */
export import EUpdateArgs = Prisma.EUpdateArgs

/**
 * @deprecated Renamed to \`Prisma.EUpdateManyArgs\`
 */
export import EUpdateManyArgs = Prisma.EUpdateManyArgs

/**
 * @deprecated Renamed to \`Prisma.EUpsertArgs\`
 */
export import EUpsertArgs = Prisma.EUpsertArgs

/**
 * @deprecated Renamed to \`Prisma.EDeleteArgs\`
 */
export import EDeleteArgs = Prisma.EDeleteArgs

/**
 * @deprecated Renamed to \`Prisma.EDeleteManyArgs\`
 */
export import EDeleteManyArgs = Prisma.EDeleteManyArgs

/**
 * @deprecated Renamed to \`Prisma.PostWhereInput\`
 */
export import PostWhereInput = Prisma.PostWhereInput

/**
 * @deprecated Renamed to \`Prisma.PostOrderByInput\`
 */
export import PostOrderByInput = Prisma.PostOrderByInput

/**
 * @deprecated Renamed to \`Prisma.PostWhereUniqueInput\`
 */
export import PostWhereUniqueInput = Prisma.PostWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.UserWhereInput\`
 */
export import UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to \`Prisma.UserOrderByInput\`
 */
export import UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to \`Prisma.UserWhereUniqueInput\`
 */
export import UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.MWhereInput\`
 */
export import MWhereInput = Prisma.MWhereInput

/**
 * @deprecated Renamed to \`Prisma.MOrderByInput\`
 */
export import MOrderByInput = Prisma.MOrderByInput

/**
 * @deprecated Renamed to \`Prisma.MWhereUniqueInput\`
 */
export import MWhereUniqueInput = Prisma.MWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.NWhereInput\`
 */
export import NWhereInput = Prisma.NWhereInput

/**
 * @deprecated Renamed to \`Prisma.NOrderByInput\`
 */
export import NOrderByInput = Prisma.NOrderByInput

/**
 * @deprecated Renamed to \`Prisma.NWhereUniqueInput\`
 */
export import NWhereUniqueInput = Prisma.NWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalWhereInput\`
 */
export import OneOptionalWhereInput = Prisma.OneOptionalWhereInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalOrderByInput\`
 */
export import OneOptionalOrderByInput = Prisma.OneOptionalOrderByInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalWhereUniqueInput\`
 */
export import OneOptionalWhereUniqueInput = Prisma.OneOptionalWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredWhereInput\`
 */
export import ManyRequiredWhereInput = Prisma.ManyRequiredWhereInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredOrderByInput\`
 */
export import ManyRequiredOrderByInput = Prisma.ManyRequiredOrderByInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredWhereUniqueInput\`
 */
export import ManyRequiredWhereUniqueInput = Prisma.ManyRequiredWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1WhereInput\`
 */
export import OptionalSide1WhereInput = Prisma.OptionalSide1WhereInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1OrderByInput\`
 */
export import OptionalSide1OrderByInput = Prisma.OptionalSide1OrderByInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1WhereUniqueInput\`
 */
export import OptionalSide1WhereUniqueInput = Prisma.OptionalSide1WhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2WhereInput\`
 */
export import OptionalSide2WhereInput = Prisma.OptionalSide2WhereInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2OrderByInput\`
 */
export import OptionalSide2OrderByInput = Prisma.OptionalSide2OrderByInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2WhereUniqueInput\`
 */
export import OptionalSide2WhereUniqueInput = Prisma.OptionalSide2WhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.AWhereInput\`
 */
export import AWhereInput = Prisma.AWhereInput

/**
 * @deprecated Renamed to \`Prisma.AOrderByInput\`
 */
export import AOrderByInput = Prisma.AOrderByInput

/**
 * @deprecated Renamed to \`Prisma.AWhereUniqueInput\`
 */
export import AWhereUniqueInput = Prisma.AWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.BWhereInput\`
 */
export import BWhereInput = Prisma.BWhereInput

/**
 * @deprecated Renamed to \`Prisma.BOrderByInput\`
 */
export import BOrderByInput = Prisma.BOrderByInput

/**
 * @deprecated Renamed to \`Prisma.BWhereUniqueInput\`
 */
export import BWhereUniqueInput = Prisma.BWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.CWhereInput\`
 */
export import CWhereInput = Prisma.CWhereInput

/**
 * @deprecated Renamed to \`Prisma.COrderByInput\`
 */
export import COrderByInput = Prisma.COrderByInput

/**
 * @deprecated Renamed to \`Prisma.CWhereUniqueInput\`
 */
export import CWhereUniqueInput = Prisma.CWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.DWhereInput\`
 */
export import DWhereInput = Prisma.DWhereInput

/**
 * @deprecated Renamed to \`Prisma.DOrderByInput\`
 */
export import DOrderByInput = Prisma.DOrderByInput

/**
 * @deprecated Renamed to \`Prisma.DWhereUniqueInput\`
 */
export import DWhereUniqueInput = Prisma.DWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.EWhereInput\`
 */
export import EWhereInput = Prisma.EWhereInput

/**
 * @deprecated Renamed to \`Prisma.EOrderByInput\`
 */
export import EOrderByInput = Prisma.EOrderByInput

/**
 * @deprecated Renamed to \`Prisma.EWhereUniqueInput\`
 */
export import EWhereUniqueInput = Prisma.EWhereUniqueInput

/**
 * @deprecated Renamed to \`Prisma.PostCreateInput\`
 */
export import PostCreateInput = Prisma.PostCreateInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedCreateInput\`
 */
export import PostUncheckedCreateInput = Prisma.PostUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateInput\`
 */
export import PostUpdateInput = Prisma.PostUpdateInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedUpdateInput\`
 */
export import PostUncheckedUpdateInput = Prisma.PostUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateManyMutationInput\`
 */
export import PostUpdateManyMutationInput = Prisma.PostUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedUpdateManyInput\`
 */
export import PostUncheckedUpdateManyInput = Prisma.PostUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.UserCreateInput\`
 */
export import UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to \`Prisma.UserUncheckedCreateInput\`
 */
export import UserUncheckedCreateInput = Prisma.UserUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.UserUpdateInput\`
 */
export import UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to \`Prisma.UserUncheckedUpdateInput\`
 */
export import UserUncheckedUpdateInput = Prisma.UserUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.UserUpdateManyMutationInput\`
 */
export import UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.UserUncheckedUpdateManyInput\`
 */
export import UserUncheckedUpdateManyInput = Prisma.UserUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.MCreateInput\`
 */
export import MCreateInput = Prisma.MCreateInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedCreateInput\`
 */
export import MUncheckedCreateInput = Prisma.MUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateInput\`
 */
export import MUpdateInput = Prisma.MUpdateInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedUpdateInput\`
 */
export import MUncheckedUpdateInput = Prisma.MUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateManyMutationInput\`
 */
export import MUpdateManyMutationInput = Prisma.MUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedUpdateManyInput\`
 */
export import MUncheckedUpdateManyInput = Prisma.MUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.NCreateInput\`
 */
export import NCreateInput = Prisma.NCreateInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedCreateInput\`
 */
export import NUncheckedCreateInput = Prisma.NUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateInput\`
 */
export import NUpdateInput = Prisma.NUpdateInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedUpdateInput\`
 */
export import NUncheckedUpdateInput = Prisma.NUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateManyMutationInput\`
 */
export import NUpdateManyMutationInput = Prisma.NUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedUpdateManyInput\`
 */
export import NUncheckedUpdateManyInput = Prisma.NUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalCreateInput\`
 */
export import OneOptionalCreateInput = Prisma.OneOptionalCreateInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUncheckedCreateInput\`
 */
export import OneOptionalUncheckedCreateInput = Prisma.OneOptionalUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateInput\`
 */
export import OneOptionalUpdateInput = Prisma.OneOptionalUpdateInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUncheckedUpdateInput\`
 */
export import OneOptionalUncheckedUpdateInput = Prisma.OneOptionalUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateManyMutationInput\`
 */
export import OneOptionalUpdateManyMutationInput = Prisma.OneOptionalUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUncheckedUpdateManyInput\`
 */
export import OneOptionalUncheckedUpdateManyInput = Prisma.OneOptionalUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredCreateInput\`
 */
export import ManyRequiredCreateInput = Prisma.ManyRequiredCreateInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedCreateInput\`
 */
export import ManyRequiredUncheckedCreateInput = Prisma.ManyRequiredUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateInput\`
 */
export import ManyRequiredUpdateInput = Prisma.ManyRequiredUpdateInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedUpdateInput\`
 */
export import ManyRequiredUncheckedUpdateInput = Prisma.ManyRequiredUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateManyMutationInput\`
 */
export import ManyRequiredUpdateManyMutationInput = Prisma.ManyRequiredUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedUpdateManyInput\`
 */
export import ManyRequiredUncheckedUpdateManyInput = Prisma.ManyRequiredUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1CreateInput\`
 */
export import OptionalSide1CreateInput = Prisma.OptionalSide1CreateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedCreateInput\`
 */
export import OptionalSide1UncheckedCreateInput = Prisma.OptionalSide1UncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateInput\`
 */
export import OptionalSide1UpdateInput = Prisma.OptionalSide1UpdateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedUpdateInput\`
 */
export import OptionalSide1UncheckedUpdateInput = Prisma.OptionalSide1UncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateManyMutationInput\`
 */
export import OptionalSide1UpdateManyMutationInput = Prisma.OptionalSide1UpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedUpdateManyInput\`
 */
export import OptionalSide1UncheckedUpdateManyInput = Prisma.OptionalSide1UncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2CreateInput\`
 */
export import OptionalSide2CreateInput = Prisma.OptionalSide2CreateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UncheckedCreateInput\`
 */
export import OptionalSide2UncheckedCreateInput = Prisma.OptionalSide2UncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateInput\`
 */
export import OptionalSide2UpdateInput = Prisma.OptionalSide2UpdateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UncheckedUpdateInput\`
 */
export import OptionalSide2UncheckedUpdateInput = Prisma.OptionalSide2UncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateManyMutationInput\`
 */
export import OptionalSide2UpdateManyMutationInput = Prisma.OptionalSide2UpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UncheckedUpdateManyInput\`
 */
export import OptionalSide2UncheckedUpdateManyInput = Prisma.OptionalSide2UncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.ACreateInput\`
 */
export import ACreateInput = Prisma.ACreateInput

/**
 * @deprecated Renamed to \`Prisma.AUncheckedCreateInput\`
 */
export import AUncheckedCreateInput = Prisma.AUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.AUpdateInput\`
 */
export import AUpdateInput = Prisma.AUpdateInput

/**
 * @deprecated Renamed to \`Prisma.AUncheckedUpdateInput\`
 */
export import AUncheckedUpdateInput = Prisma.AUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.AUpdateManyMutationInput\`
 */
export import AUpdateManyMutationInput = Prisma.AUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.AUncheckedUpdateManyInput\`
 */
export import AUncheckedUpdateManyInput = Prisma.AUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.BCreateInput\`
 */
export import BCreateInput = Prisma.BCreateInput

/**
 * @deprecated Renamed to \`Prisma.BUncheckedCreateInput\`
 */
export import BUncheckedCreateInput = Prisma.BUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.BUpdateInput\`
 */
export import BUpdateInput = Prisma.BUpdateInput

/**
 * @deprecated Renamed to \`Prisma.BUncheckedUpdateInput\`
 */
export import BUncheckedUpdateInput = Prisma.BUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.BUpdateManyMutationInput\`
 */
export import BUpdateManyMutationInput = Prisma.BUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.BUncheckedUpdateManyInput\`
 */
export import BUncheckedUpdateManyInput = Prisma.BUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.CCreateInput\`
 */
export import CCreateInput = Prisma.CCreateInput

/**
 * @deprecated Renamed to \`Prisma.CUncheckedCreateInput\`
 */
export import CUncheckedCreateInput = Prisma.CUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.CUpdateInput\`
 */
export import CUpdateInput = Prisma.CUpdateInput

/**
 * @deprecated Renamed to \`Prisma.CUncheckedUpdateInput\`
 */
export import CUncheckedUpdateInput = Prisma.CUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.CUpdateManyMutationInput\`
 */
export import CUpdateManyMutationInput = Prisma.CUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.CUncheckedUpdateManyInput\`
 */
export import CUncheckedUpdateManyInput = Prisma.CUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.DCreateInput\`
 */
export import DCreateInput = Prisma.DCreateInput

/**
 * @deprecated Renamed to \`Prisma.DUncheckedCreateInput\`
 */
export import DUncheckedCreateInput = Prisma.DUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.DUpdateInput\`
 */
export import DUpdateInput = Prisma.DUpdateInput

/**
 * @deprecated Renamed to \`Prisma.DUncheckedUpdateInput\`
 */
export import DUncheckedUpdateInput = Prisma.DUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.DUpdateManyMutationInput\`
 */
export import DUpdateManyMutationInput = Prisma.DUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.DUncheckedUpdateManyInput\`
 */
export import DUncheckedUpdateManyInput = Prisma.DUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.ECreateInput\`
 */
export import ECreateInput = Prisma.ECreateInput

/**
 * @deprecated Renamed to \`Prisma.EUncheckedCreateInput\`
 */
export import EUncheckedCreateInput = Prisma.EUncheckedCreateInput

/**
 * @deprecated Renamed to \`Prisma.EUpdateInput\`
 */
export import EUpdateInput = Prisma.EUpdateInput

/**
 * @deprecated Renamed to \`Prisma.EUncheckedUpdateInput\`
 */
export import EUncheckedUpdateInput = Prisma.EUncheckedUpdateInput

/**
 * @deprecated Renamed to \`Prisma.EUpdateManyMutationInput\`
 */
export import EUpdateManyMutationInput = Prisma.EUpdateManyMutationInput

/**
 * @deprecated Renamed to \`Prisma.EUncheckedUpdateManyInput\`
 */
export import EUncheckedUpdateManyInput = Prisma.EUncheckedUpdateManyInput

/**
 * @deprecated Renamed to \`Prisma.IntFilter\`
 */
export import IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to \`Prisma.DateTimeFilter\`
 */
export import DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to \`Prisma.StringFilter\`
 */
export import StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to \`Prisma.StringNullableFilter\`
 */
export import StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to \`Prisma.BoolFilter\`
 */
export import BoolFilter = Prisma.BoolFilter

/**
 * @deprecated Renamed to \`Prisma.UserRelationFilter\`
 */
export import UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to \`Prisma.IntNullableFilter\`
 */
export import IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to \`Prisma.FloatFilter\`
 */
export import FloatFilter = Prisma.FloatFilter

/**
 * @deprecated Renamed to \`Prisma.FloatNullableFilter\`
 */
export import FloatNullableFilter = Prisma.FloatNullableFilter

/**
 * @deprecated Renamed to \`Prisma.JsonFilter\`
 */
export import JsonFilter = Prisma.JsonFilter

/**
 * @deprecated Renamed to \`Prisma.JsonNullableFilter\`
 */
export import JsonNullableFilter = Prisma.JsonNullableFilter

/**
 * @deprecated Renamed to \`Prisma.EnumABeautifulEnumFilter\`
 */
export import EnumABeautifulEnumFilter = Prisma.EnumABeautifulEnumFilter

/**
 * @deprecated Renamed to \`Prisma.EnumABeautifulEnumNullableFilter\`
 */
export import EnumABeautifulEnumNullableFilter = Prisma.EnumABeautifulEnumNullableFilter

/**
 * @deprecated Renamed to \`Prisma.BoolNullableFilter\`
 */
export import BoolNullableFilter = Prisma.BoolNullableFilter

/**
 * @deprecated Renamed to \`Prisma.PostListRelationFilter\`
 */
export import PostListRelationFilter = Prisma.PostListRelationFilter

/**
 * @deprecated Renamed to \`Prisma.NListRelationFilter\`
 */
export import NListRelationFilter = Prisma.NListRelationFilter

/**
 * @deprecated Renamed to \`Prisma.MListRelationFilter\`
 */
export import MListRelationFilter = Prisma.MListRelationFilter

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredListRelationFilter\`
 */
export import ManyRequiredListRelationFilter = Prisma.ManyRequiredListRelationFilter

/**
 * @deprecated Renamed to \`Prisma.OneOptionalRelationFilter\`
 */
export import OneOptionalRelationFilter = Prisma.OneOptionalRelationFilter

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2RelationFilter\`
 */
export import OptionalSide2RelationFilter = Prisma.OptionalSide2RelationFilter

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1RelationFilter\`
 */
export import OptionalSide1RelationFilter = Prisma.OptionalSide1RelationFilter

/**
 * @deprecated Renamed to \`Prisma.BigIntFilter\`
 */
export import BigIntFilter = Prisma.BigIntFilter

/**
 * @deprecated Renamed to \`Prisma.DecimalFilter\`
 */
export import DecimalFilter = Prisma.DecimalFilter

/**
 * @deprecated Renamed to \`Prisma.BytesFilter\`
 */
export import BytesFilter = Prisma.BytesFilter

/**
 * @deprecated Renamed to \`Prisma.UserCreateOneWithoutPostsInput\`
 */
export import UserCreateOneWithoutPostsInput = Prisma.UserCreateOneWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.DateTimeFieldUpdateOperationsInput\`
 */
export import DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.StringFieldUpdateOperationsInput\`
 */
export import StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.NullableStringFieldUpdateOperationsInput\`
 */
export import NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.BoolFieldUpdateOperationsInput\`
 */
export import BoolFieldUpdateOperationsInput = Prisma.BoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.UserUpdateOneRequiredWithoutPostsInput\`
 */
export import UserUpdateOneRequiredWithoutPostsInput = Prisma.UserUpdateOneRequiredWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.IntFieldUpdateOperationsInput\`
 */
export import IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.PostCreateManyWithoutAuthorInput\`
 */
export import PostCreateManyWithoutAuthorInput = Prisma.PostCreateManyWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedCreateManyWithoutAuthorInput\`
 */
export import PostUncheckedCreateManyWithoutAuthorInput = Prisma.PostUncheckedCreateManyWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.NullableIntFieldUpdateOperationsInput\`
 */
export import NullableIntFieldUpdateOperationsInput = Prisma.NullableIntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.FloatFieldUpdateOperationsInput\`
 */
export import FloatFieldUpdateOperationsInput = Prisma.FloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.NullableFloatFieldUpdateOperationsInput\`
 */
export import NullableFloatFieldUpdateOperationsInput = Prisma.NullableFloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.EnumABeautifulEnumFieldUpdateOperationsInput\`
 */
export import EnumABeautifulEnumFieldUpdateOperationsInput = Prisma.EnumABeautifulEnumFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.NullableEnumABeautifulEnumFieldUpdateOperationsInput\`
 */
export import NullableEnumABeautifulEnumFieldUpdateOperationsInput = Prisma.NullableEnumABeautifulEnumFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.NullableBoolFieldUpdateOperationsInput\`
 */
export import NullableBoolFieldUpdateOperationsInput = Prisma.NullableBoolFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateManyWithoutAuthorInput\`
 */
export import PostUpdateManyWithoutAuthorInput = Prisma.PostUpdateManyWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedUpdateManyWithoutAuthorInput\`
 */
export import PostUncheckedUpdateManyWithoutAuthorInput = Prisma.PostUncheckedUpdateManyWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.NCreateManyWithoutMInput\`
 */
export import NCreateManyWithoutMInput = Prisma.NCreateManyWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateManyWithoutMInput\`
 */
export import NUpdateManyWithoutMInput = Prisma.NUpdateManyWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.MCreateManyWithoutNInput\`
 */
export import MCreateManyWithoutNInput = Prisma.MCreateManyWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateManyWithoutNInput\`
 */
export import MUpdateManyWithoutNInput = Prisma.MUpdateManyWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredCreateManyWithoutOneInput\`
 */
export import ManyRequiredCreateManyWithoutOneInput = Prisma.ManyRequiredCreateManyWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedCreateManyWithoutOneInput\`
 */
export import ManyRequiredUncheckedCreateManyWithoutOneInput = Prisma.ManyRequiredUncheckedCreateManyWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateManyWithoutOneInput\`
 */
export import ManyRequiredUpdateManyWithoutOneInput = Prisma.ManyRequiredUpdateManyWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedUpdateManyWithoutOneInput\`
 */
export import ManyRequiredUncheckedUpdateManyWithoutOneInput = Prisma.ManyRequiredUncheckedUpdateManyWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalCreateOneWithoutManyInput\`
 */
export import OneOptionalCreateOneWithoutManyInput = Prisma.OneOptionalCreateOneWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateOneWithoutManyInput\`
 */
export import OneOptionalUpdateOneWithoutManyInput = Prisma.OneOptionalUpdateOneWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2CreateOneWithoutOptiInput\`
 */
export import OptionalSide2CreateOneWithoutOptiInput = Prisma.OptionalSide2CreateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateOneWithoutOptiInput\`
 */
export import OptionalSide2UpdateOneWithoutOptiInput = Prisma.OptionalSide2UpdateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1CreateOneWithoutOptiInput\`
 */
export import OptionalSide1CreateOneWithoutOptiInput = Prisma.OptionalSide1CreateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedCreateOneWithoutOptiInput\`
 */
export import OptionalSide1UncheckedCreateOneWithoutOptiInput = Prisma.OptionalSide1UncheckedCreateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateOneWithoutOptiInput\`
 */
export import OptionalSide1UpdateOneWithoutOptiInput = Prisma.OptionalSide1UpdateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedUpdateOneWithoutOptiInput\`
 */
export import OptionalSide1UncheckedUpdateOneWithoutOptiInput = Prisma.OptionalSide1UncheckedUpdateOneWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.BigIntFieldUpdateOperationsInput\`
 */
export import BigIntFieldUpdateOperationsInput = Prisma.BigIntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.DecimalFieldUpdateOperationsInput\`
 */
export import DecimalFieldUpdateOperationsInput = Prisma.DecimalFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.BytesFieldUpdateOperationsInput\`
 */
export import BytesFieldUpdateOperationsInput = Prisma.BytesFieldUpdateOperationsInput

/**
 * @deprecated Renamed to \`Prisma.NestedIntFilter\`
 */
export import NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to \`Prisma.NestedDateTimeFilter\`
 */
export import NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to \`Prisma.NestedStringFilter\`
 */
export import NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to \`Prisma.NestedStringNullableFilter\`
 */
export import NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to \`Prisma.NestedBoolFilter\`
 */
export import NestedBoolFilter = Prisma.NestedBoolFilter

/**
 * @deprecated Renamed to \`Prisma.NestedIntNullableFilter\`
 */
export import NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to \`Prisma.NestedFloatFilter\`
 */
export import NestedFloatFilter = Prisma.NestedFloatFilter

/**
 * @deprecated Renamed to \`Prisma.NestedFloatNullableFilter\`
 */
export import NestedFloatNullableFilter = Prisma.NestedFloatNullableFilter

/**
 * @deprecated Renamed to \`Prisma.NestedEnumABeautifulEnumFilter\`
 */
export import NestedEnumABeautifulEnumFilter = Prisma.NestedEnumABeautifulEnumFilter

/**
 * @deprecated Renamed to \`Prisma.NestedEnumABeautifulEnumNullableFilter\`
 */
export import NestedEnumABeautifulEnumNullableFilter = Prisma.NestedEnumABeautifulEnumNullableFilter

/**
 * @deprecated Renamed to \`Prisma.NestedBoolNullableFilter\`
 */
export import NestedBoolNullableFilter = Prisma.NestedBoolNullableFilter

/**
 * @deprecated Renamed to \`Prisma.NestedBigIntFilter\`
 */
export import NestedBigIntFilter = Prisma.NestedBigIntFilter

/**
 * @deprecated Renamed to \`Prisma.NestedDecimalFilter\`
 */
export import NestedDecimalFilter = Prisma.NestedDecimalFilter

/**
 * @deprecated Renamed to \`Prisma.NestedBytesFilter\`
 */
export import NestedBytesFilter = Prisma.NestedBytesFilter

/**
 * @deprecated Renamed to \`Prisma.UserCreateWithoutPostsInput\`
 */
export import UserCreateWithoutPostsInput = Prisma.UserCreateWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.UserUncheckedCreateWithoutPostsInput\`
 */
export import UserUncheckedCreateWithoutPostsInput = Prisma.UserUncheckedCreateWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.UserCreateOrConnectWithoutpostsInput\`
 */
export import UserCreateOrConnectWithoutpostsInput = Prisma.UserCreateOrConnectWithoutpostsInput

/**
 * @deprecated Renamed to \`Prisma.UserUpdateWithoutPostsInput\`
 */
export import UserUpdateWithoutPostsInput = Prisma.UserUpdateWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.UserUncheckedUpdateWithoutPostsInput\`
 */
export import UserUncheckedUpdateWithoutPostsInput = Prisma.UserUncheckedUpdateWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.UserUpsertWithoutPostsInput\`
 */
export import UserUpsertWithoutPostsInput = Prisma.UserUpsertWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.PostCreateWithoutAuthorInput\`
 */
export import PostCreateWithoutAuthorInput = Prisma.PostCreateWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedCreateWithoutAuthorInput\`
 */
export import PostUncheckedCreateWithoutAuthorInput = Prisma.PostUncheckedCreateWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostCreateOrConnectWithoutauthorInput\`
 */
export import PostCreateOrConnectWithoutauthorInput = Prisma.PostCreateOrConnectWithoutauthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateWithWhereUniqueWithoutAuthorInput\`
 */
export import PostUpdateWithWhereUniqueWithoutAuthorInput = Prisma.PostUpdateWithWhereUniqueWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateManyWithWhereWithoutAuthorInput\`
 */
export import PostUpdateManyWithWhereWithoutAuthorInput = Prisma.PostUpdateManyWithWhereWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostScalarWhereInput\`
 */
export import PostScalarWhereInput = Prisma.PostScalarWhereInput

/**
 * @deprecated Renamed to \`Prisma.PostUpsertWithWhereUniqueWithoutAuthorInput\`
 */
export import PostUpsertWithWhereUniqueWithoutAuthorInput = Prisma.PostUpsertWithWhereUniqueWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.NCreateWithoutMInput\`
 */
export import NCreateWithoutMInput = Prisma.NCreateWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedCreateWithoutMInput\`
 */
export import NUncheckedCreateWithoutMInput = Prisma.NUncheckedCreateWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NCreateOrConnectWithoutmInput\`
 */
export import NCreateOrConnectWithoutmInput = Prisma.NCreateOrConnectWithoutmInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateWithWhereUniqueWithoutMInput\`
 */
export import NUpdateWithWhereUniqueWithoutMInput = Prisma.NUpdateWithWhereUniqueWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateManyWithWhereWithoutMInput\`
 */
export import NUpdateManyWithWhereWithoutMInput = Prisma.NUpdateManyWithWhereWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NScalarWhereInput\`
 */
export import NScalarWhereInput = Prisma.NScalarWhereInput

/**
 * @deprecated Renamed to \`Prisma.NUpsertWithWhereUniqueWithoutMInput\`
 */
export import NUpsertWithWhereUniqueWithoutMInput = Prisma.NUpsertWithWhereUniqueWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.MCreateWithoutNInput\`
 */
export import MCreateWithoutNInput = Prisma.MCreateWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedCreateWithoutNInput\`
 */
export import MUncheckedCreateWithoutNInput = Prisma.MUncheckedCreateWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MCreateOrConnectWithoutnInput\`
 */
export import MCreateOrConnectWithoutnInput = Prisma.MCreateOrConnectWithoutnInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateWithWhereUniqueWithoutNInput\`
 */
export import MUpdateWithWhereUniqueWithoutNInput = Prisma.MUpdateWithWhereUniqueWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateManyWithWhereWithoutNInput\`
 */
export import MUpdateManyWithWhereWithoutNInput = Prisma.MUpdateManyWithWhereWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MScalarWhereInput\`
 */
export import MScalarWhereInput = Prisma.MScalarWhereInput

/**
 * @deprecated Renamed to \`Prisma.MUpsertWithWhereUniqueWithoutNInput\`
 */
export import MUpsertWithWhereUniqueWithoutNInput = Prisma.MUpsertWithWhereUniqueWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredCreateWithoutOneInput\`
 */
export import ManyRequiredCreateWithoutOneInput = Prisma.ManyRequiredCreateWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedCreateWithoutOneInput\`
 */
export import ManyRequiredUncheckedCreateWithoutOneInput = Prisma.ManyRequiredUncheckedCreateWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredCreateOrConnectWithoutoneInput\`
 */
export import ManyRequiredCreateOrConnectWithoutoneInput = Prisma.ManyRequiredCreateOrConnectWithoutoneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateWithWhereUniqueWithoutOneInput\`
 */
export import ManyRequiredUpdateWithWhereUniqueWithoutOneInput = Prisma.ManyRequiredUpdateWithWhereUniqueWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateManyWithWhereWithoutOneInput\`
 */
export import ManyRequiredUpdateManyWithWhereWithoutOneInput = Prisma.ManyRequiredUpdateManyWithWhereWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredScalarWhereInput\`
 */
export import ManyRequiredScalarWhereInput = Prisma.ManyRequiredScalarWhereInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpsertWithWhereUniqueWithoutOneInput\`
 */
export import ManyRequiredUpsertWithWhereUniqueWithoutOneInput = Prisma.ManyRequiredUpsertWithWhereUniqueWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalCreateWithoutManyInput\`
 */
export import OneOptionalCreateWithoutManyInput = Prisma.OneOptionalCreateWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUncheckedCreateWithoutManyInput\`
 */
export import OneOptionalUncheckedCreateWithoutManyInput = Prisma.OneOptionalUncheckedCreateWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalCreateOrConnectWithoutmanyInput\`
 */
export import OneOptionalCreateOrConnectWithoutmanyInput = Prisma.OneOptionalCreateOrConnectWithoutmanyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpdateWithoutManyInput\`
 */
export import OneOptionalUpdateWithoutManyInput = Prisma.OneOptionalUpdateWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUncheckedUpdateWithoutManyInput\`
 */
export import OneOptionalUncheckedUpdateWithoutManyInput = Prisma.OneOptionalUncheckedUpdateWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OneOptionalUpsertWithoutManyInput\`
 */
export import OneOptionalUpsertWithoutManyInput = Prisma.OneOptionalUpsertWithoutManyInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2CreateWithoutOptiInput\`
 */
export import OptionalSide2CreateWithoutOptiInput = Prisma.OptionalSide2CreateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UncheckedCreateWithoutOptiInput\`
 */
export import OptionalSide2UncheckedCreateWithoutOptiInput = Prisma.OptionalSide2UncheckedCreateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2CreateOrConnectWithoutoptiInput\`
 */
export import OptionalSide2CreateOrConnectWithoutoptiInput = Prisma.OptionalSide2CreateOrConnectWithoutoptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpdateWithoutOptiInput\`
 */
export import OptionalSide2UpdateWithoutOptiInput = Prisma.OptionalSide2UpdateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UncheckedUpdateWithoutOptiInput\`
 */
export import OptionalSide2UncheckedUpdateWithoutOptiInput = Prisma.OptionalSide2UncheckedUpdateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide2UpsertWithoutOptiInput\`
 */
export import OptionalSide2UpsertWithoutOptiInput = Prisma.OptionalSide2UpsertWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1CreateWithoutOptiInput\`
 */
export import OptionalSide1CreateWithoutOptiInput = Prisma.OptionalSide1CreateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedCreateWithoutOptiInput\`
 */
export import OptionalSide1UncheckedCreateWithoutOptiInput = Prisma.OptionalSide1UncheckedCreateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1CreateOrConnectWithoutoptiInput\`
 */
export import OptionalSide1CreateOrConnectWithoutoptiInput = Prisma.OptionalSide1CreateOrConnectWithoutoptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpdateWithoutOptiInput\`
 */
export import OptionalSide1UpdateWithoutOptiInput = Prisma.OptionalSide1UpdateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UncheckedUpdateWithoutOptiInput\`
 */
export import OptionalSide1UncheckedUpdateWithoutOptiInput = Prisma.OptionalSide1UncheckedUpdateWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.OptionalSide1UpsertWithoutOptiInput\`
 */
export import OptionalSide1UpsertWithoutOptiInput = Prisma.OptionalSide1UpsertWithoutOptiInput

/**
 * @deprecated Renamed to \`Prisma.PostUpdateWithoutAuthorInput\`
 */
export import PostUpdateWithoutAuthorInput = Prisma.PostUpdateWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedUpdateWithoutAuthorInput\`
 */
export import PostUncheckedUpdateWithoutAuthorInput = Prisma.PostUncheckedUpdateWithoutAuthorInput

/**
 * @deprecated Renamed to \`Prisma.PostUncheckedUpdateManyWithoutPostsInput\`
 */
export import PostUncheckedUpdateManyWithoutPostsInput = Prisma.PostUncheckedUpdateManyWithoutPostsInput

/**
 * @deprecated Renamed to \`Prisma.NUpdateWithoutMInput\`
 */
export import NUpdateWithoutMInput = Prisma.NUpdateWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedUpdateWithoutMInput\`
 */
export import NUncheckedUpdateWithoutMInput = Prisma.NUncheckedUpdateWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.NUncheckedUpdateManyWithoutNInput\`
 */
export import NUncheckedUpdateManyWithoutNInput = Prisma.NUncheckedUpdateManyWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUpdateWithoutNInput\`
 */
export import MUpdateWithoutNInput = Prisma.MUpdateWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedUpdateWithoutNInput\`
 */
export import MUncheckedUpdateWithoutNInput = Prisma.MUncheckedUpdateWithoutNInput

/**
 * @deprecated Renamed to \`Prisma.MUncheckedUpdateManyWithoutMInput\`
 */
export import MUncheckedUpdateManyWithoutMInput = Prisma.MUncheckedUpdateManyWithoutMInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUpdateWithoutOneInput\`
 */
export import ManyRequiredUpdateWithoutOneInput = Prisma.ManyRequiredUpdateWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedUpdateWithoutOneInput\`
 */
export import ManyRequiredUncheckedUpdateWithoutOneInput = Prisma.ManyRequiredUncheckedUpdateWithoutOneInput

/**
 * @deprecated Renamed to \`Prisma.ManyRequiredUncheckedUpdateManyWithoutManyInput\`
 */
export import ManyRequiredUncheckedUpdateManyWithoutManyInput = Prisma.ManyRequiredUncheckedUpdateManyWithoutManyInput
`;
