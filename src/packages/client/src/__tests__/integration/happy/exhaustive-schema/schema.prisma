generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeTypes"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
  posts           Post[]
}

model M {
  id              Int             @id @default(autoincrement())
  n               N[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model N {
  id              Int             @id @default(autoincrement())
  m               M[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OneOptional {
  id              Int             @id @default(autoincrement())
  many            ManyRequired[]
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model ManyRequired {
  id  Int          @id @default(autoincrement())
  one OneOptional? @relation(fields: [oneOptionalId], references: [id])

  oneOptionalId   Int?
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OptionalSide1 {
  id   Int            @id @default(autoincrement())
  opti OptionalSide2? @relation(fields: [optionalSide2Id], references: [id])

  optionalSide2Id Int?
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?
}

model OptionalSide2 {
  id              Int             @id @default(autoincrement())
  opti            OptionalSide1?
  int             Int
  optionalInt     Int?
  float           Float
  optionalFloat   Float?
  string          String
  optionalString  String?
  json            Json
  optionalJson    Json?
  enum            ABeautifulEnum
  optionalEnum    ABeautifulEnum?
  boolean         Boolean
  optionalBoolean Boolean?

}

enum ABeautifulEnum {
  A
  B
  C
}

model A {
  id    String  @id @default(uuid())
  email String  @unique
  // / name comment
  name  String?

  int      Int @db.Integer
  sInt     Int @db.SmallInt
  bInt     Int @db.BigInt
  serial   Int @default(autoincrement()) @db.Serial
  sSerial  Int @default(autoincrement()) @db.SmallSerial
  bSerial  Int @default(autoincrement()) @db.BigSerial
  inc_int  Int @default(autoincrement()) @db.Integer
  inc_sInt Int @default(autoincrement()) @db.SmallInt
  inc_bInt Int @default(autoincrement()) @db.BigInt
}

model B {
  id       String  @id @default(cuid())
  float    Float   @db.Real
  dFloat   Float   @db.DoublePrecision
  decFloat Decimal @db.Decimal(2, 1)
  numFloat Decimal @db.Numeric(10, 6)
}

model C {
  id    String @id @default(cuid())
  char  String @db.Char(10)
  vChar String @db.VarChar(11)
  text  String @db.Text
  bit   String @db.Bit(4)
  vBit  String @db.VarBit(5)
  uuid  String @db.Uuid
}

model D {
  id    String  @id @default(cuid())
  bool  Boolean @db.Boolean
  byteA Bytes   @db.ByteA
  xml   Xml     @db.Xml
  json  Json    @db.Json
  jsonb Json    @db.JsonB
}

model E {
  id   String   @id @default(cuid())
  date DateTime @db.Date
  time DateTime @db.Time(3)
  ts   DateTime @db.Timestamp(3)
}
