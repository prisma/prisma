// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic introspection 1`] = `
Prisma schema loaded from schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "***"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`basic introspection with --url 1`] = `
Prisma schema loaded from schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "***"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  posts   Post[]
  profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`introspection --force 1`] = `
Prisma schema loaded from schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url = "***"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}


// introspectionSchemaVersion: Prisma2,
`;

exports[`should succeed and keep changes to valid schema and output warnings when using --print 2`] = `
Prisma schema loaded from prisma/reintrospection.prisma
generator client {
  provider = "prisma-client-js"
  output = "***"
}

datasource db {
  provider = "sqlite"
  url = "***"
}

model AwesomeUser {
  email    String           @unique
  id       Int              @id @default(autoincrement())
  name     String?
  newPosts AwesomeNewPost[]
  profile  AwesomeProfile?

  @@map("User")
}

model AwesomeNewPost {
  authorId  Int
  content   String?
  createdAt DateTime    @default(now())
  id        Int         @id @default(autoincrement())
  published Boolean     @default(false)
  title     String
  author    AwesomeUser @relation(fields: [authorId], references: [id])

  @@map("Post")
}

model AwesomeProfile {
  bio    String?
  id     Int         @id @default(autoincrement())
  userId Int         @unique
  User   AwesomeUser @relation(fields: [userId], references: [id])

  @@map("Profile")
}


// introspectionSchemaVersion: NonPrisma,
`;

exports[`should succeed when schema is invalid and using --force 3`] = `
generator client {
  provider = "prisma-client-js"
  output = "***"
}

datasource db {
  provider = "sqlite"
  url = "***"
}

model Post {
  authorId  Int
  content   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  published Boolean  @default(false)
  title     String
  User      User     @relation(fields: [authorId], references: [id])
}

model Profile {
  bio    String?
  id     Int     @id @default(autoincrement())
  userId Int     @unique
  User   User    @relation(fields: [userId], references: [id])
}

model User {
  email   String   @unique
  id      Int      @id @default(autoincrement())
  name    String?
  Post    Post[]
  Profile Profile?
}

`;
